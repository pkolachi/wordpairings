written report . ||| kursen examineras i form av en skriftlig rapport
- in form of a projects develop a small system consisting of hardware and or software according to an established development process and schedule . ||| - i projektform genomföra utveckling av ett mindre system bestående av hård- och eller mjukvara enligt en fastställd utvecklingsprocess och tidsplan .
- document the project work in the form of eg requirements specification , user manual and a project report . ||| - dokumentera projektarbetet i form av t ex kravspecifikation , användarmanual samt en projektrapport .
the course should be taken before the final thesis . ||| studierna eller projektarbetet ska göras före eventuellt examensarbete på programmet .
software development in c and assembly language , testing and troubleshooting . ||| programutveckling i c och assemblerspråk , test och felsökning .
structured assembler , basic code generation . ||| strukturerad assemblerprogrammering , grunder för kodgenerering .
first level system programming , ie how the computer is programmed to boot from power on , and handling of different types of exceptions such as internal errors , events and interrupts . ||| första nivåns systemprogrammering , dvs. hur datorn programmeras för start från spänningstillslag och hantering av olika typer av undantag så som interna fel , händelser och avbrott .
programming devices for parallel input and output , time management and programming of timers . ||| programmering av kretsar för parallell in- och utmatning , tidshantering och programmering av räknarkretsar .
basics of computer communications and programming devices for serial communications . ||| grunderna för datorkommunikation och programmering av kretsar för seriekommunikation .
moreover , a simple time-sharing systems ( in c and assembly language ) with special emphasis on the use of peripheral circuits , is implemented . ||| dessutom implementeras ett enkelt tidsdelningssystem ( i c och assemblerspråk ) med speciell tonvikt på användning av periferikretsar .
examination is based on a written exam and approved laboratory exercises . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
based on the exam result , the grade f , 3 , 4 , or 5 are given . ||| baserat på tentamensresultatet ges betygen u , 3 , 4 eller 5 .
write simple assembly language programs using the selected architecture's instruction set . ||| skriva enkla assemblerprogram med användande av den valda arkitekturens instruktionsuppsättning .
write simple machine oriented c programs using the programming language's data types and control structures . ||| skriva enkla maskinorienterade c-program med användande av programspråkets datatyper och styrstrukturer .
describe the assembler equivalent of typical programming structures in c. ||| beskriva motsvarigheten i assembler till typiska programstrukturer i c .
apply tools from the course to develop programs ||| utnyttja de i kursen använda verktygen för programutveckling på ett adekvat sätt .
contribute to the construction and programming of simple embedded systems with given components ||| medverka vid konstruktion och programmering av enkla inbyggda system med givna komponenter .
construct systems generating various types of exceptional events ( internal exceptions , interrupts , restarts ) ||| konstruera system innefattande olika typer av undantag ( interna undantag , avbrott , återstart ) .
describe and illustrate a few basic types of peripherals and their use ||| beskriva och exemplifiera några olika typer av digitala kringkomponenter och deras användning .
scheduled teaching comprises lectures , demonstrations , and supervised simulation and coding exercises ; ||| schemalagd undervisning består av föreläsningar , demonstrationer och handledda simulerings- och kodningsövningar .
and also supervised mandatory laboratory . ||| dessutom utförs handledda obligatoriska laborationer .
during the course , the student designs progressively bigger and bigger building blocks of software in c and assembler . ||| under kursen konstruerar eleven större och större programblock i assembler och c .
the theory is acquired through lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
the student designs the blocks then carries out tests with the aid of simulators during simulation exercises . ||| eleven konstruerar sina programoch testar dessa med hjälp av simulatorer under simuleringsövningar och självstudier .
in preparation for laboratory exercises the student will finally adapt the software in order to enable hardware verification of the function . ||| inför laborationer anpassar eleven sina program så att funktionen dessutom kan verifieras i hårdvara .
mathematical models are used in science and engineering to describe and represent different objects and systems , to analyze , understand and predict , and for finding the best design or strategy . ||| matematiska modeller används inom vetenskap och ingenjörskonst för att beskriva och representera olika slags objekt och system , för att analysera , förstå och förutsäga , samt för att hitta den bästa konstruktionen eller strategin .
mathematical modelling is therefore a basic engineering skill . ||| matematisk modellering är därför en grundläggande ingenjörsfärdighet .
with carefully selected exercises this course teaches mathematical modelling as a tool for solving real problems . ||| med noggrant utvalda övningsuppgifter lär denna kurs ut matematisk modellering som ett verktyg för att lösa verkliga problem .
problems are taken from computing and traditional engineering disciplines , as well as from other areas , such as economy , medicine and games . ||| problemen är tagna från datavetenskap och traditionella ingenjörsämnen , liksom från ekonomi , medicin och spel .
the course is primarily intended as an introduction to mathematical modelling for students with limited experience in the use of mathematics in engineering , but which may come to work in different areas where mathematics is useful . ||| kursen är främst avsedd som en introduktion till matematisk modellering för studenter med begränsad erfarenhet av hur matematiken används inom olika ingenjörsområden , men som kan komma att arbeta inom olika områden där matematisk modellering är användbart .
with application oriented exercises , and by teaching modelling and problem solving , the course then bridges the gap between the theoretical courses in mathematics and relevant applications . ||| med tillämpningsorienterade uppgifter , och genom att lära ut modellering och problemlösning , fyller då kursen igen luckan mellan de teoretiska matematikkurserna och relevanta tillämpningar .
for the most updated information about the course , please see the course home page . ||| för den mest aktuella informationen om kursen , se kursens hemsida .
the core of the course is a number of application oriented exercises . ||| kursens kärna är ett antal tillämpningsorienterade övningsuppgifter .
they are formulated in an exploratory style , and have been carefully selected to develop the modelling and problem solving skills of the student . ||| uppgifterna är formulerade på ett utforskande sätt , och har noggrant valts för att utveckla studentens förmåga att modellera och lösa problem .
the exercises are organized after the main model types ( in the list i have added some keywords to roughly indicate the more detailed scope ) : ||| övningarna grupperas efter huvudsakliga modelltyper ( i listan nedan har jag lagt till nyckelord för att grovt indikera omfånget ) :
* functions and equations . ||| * funktioner och ekvationer .
the significance of different kinds of mathematical expressions and how they can be motivated . ||| betydelsen av olika matematiska uttryck och hur de kan motiveras .
how to find and fit functions to empirical data . ||| hur man kan finna och anpassa funktioner till experimentella data .
curves in computer graphics . ||| kurvor inom datorgrafik .
* optimization models . ||| * optimeringsmodeller .
mathematical programming in economics and decision support . ||| matematisk programmering inom ekonomi och beslutsstöd .
* dynamic models . ||| * dynamiska modeller .
simulation in biology , physics and engineering . ||| simulering inom biologi , fysik och teknik
* probability models . ||| * probabilistiska modeller .
stochastic simulation . ||| stokastisk simulering .
markov models for texts , language and expert systems . ||| markovmodeller för texter , språk och expertsystem .
bayesian inference . ||| bayesiansk inferens .
* discrete models . ||| * diskreta modeller .
graphs and networks for modelling projects and activities , modelling with discrete standard problems and boolean logic , planning . ||| grafer och nät för modellering av projekt och aktiviteter , modellering med diskreta standardproblem och satslogik , planering .
* modelling languages . ||| * modelleringsspråk .
for optimization and rule based expert systems . ||| för bland annat optimering och regelbaserade expertsystem .
we also discuss different problem solving strategies , reflect on solutions and compare different ways to solve the same problem . ||| vi diskuterar också olika problemlösningsstrategier , reflekterar över lösningar och jämför olika sätt att lösa samma problem .
the course also demonstrates the importance of building mathematical computer models for different kinds of applications . ||| i kursen visar vi också betydelsen av matematiska datormodeller för olika tillämpningar .
passed exercise assignments . ||| godkända övningsuppgifter .
the course ends with an individual summarizing report , where the student is encouraged to summarize and reflect on the course from a personal perspective . ||| kursen avslutas med en individuell sammanfattande uppsats , där studenten uppmuntras att sammanfatta och reflektera över kursen på ett personligt sätt .
see the course home page for grading criteria . ||| för betygskriterier , se kursens hemsida .
the course gives the student : ||| kursen ger studenten :
* a systematic view of different kinds of mathematical models , and how they can be used in different areas of application . ||| * en systematisk bild av olika slags matematiska modeller , och hur de kan användas inom olika områden .
attention not only to classical mathematical modelling , but also to models common in computer science . ||| uppmärksamhet ges inte enbart klassiska matematiska modeller , utan också modeller som är vanliga inom datavetenskapen .
* ability to create , use and evaluate mathematical models in different and possibly new areas of application . ||| * förmåga att skapa , använda och utvärdera matematiska modeller inom olika och eventuellt nya tillämpningsområden .
* improved general ability to solve mathematical problems . ||| * ökad allmän förmåga att lösa matematiska problem .
* perspective on the role of mathematical modelling and mathematics in general , and for the professional engineer . ||| * perspektiv på betydelsen av matematisk modellering och matematik i allmänhet , och för ingenjörens yrkesutövning .
note that the emphasis of the course is to learn new and non-trivial skills . ||| notera att tyngdpunkten i kursen ligger på att lära sig nya och icke-triviala färdigheter .
the progress towards the goals is appropriately assessed in different ways during the course . ||| studentens framåtskridande i förhållande till målen utvärderas löpande under kursen på lämpliga sätt .
the course is organized in weekly modules , one for every model type . ||| kursen är organiserad i veckomoduler , en för varje modelltyp .
a module is defined by an introductory lecture , exercises for the week , and a compulsory follow-up exercise giving feedback to the solved exercises . ||| en modul defineras av en inledande föreläsning , övningsuppgifter att lösa under veckan , samt en uppföljande obligatorisk föreläsning som ger återkoppling på de lösta uppgifterna .
the exercises are done in groups of two persons . ||| övningarna genomförs i grupper om två personer .
the course also contains introductory and final lectures . ||| i kursen ingår även inledande och avslutande föreläsningar .
an emphasis is placed on an interactive teaching style with a lot of direct contact between students and teachers . ||| i kursen betonas en interaktiv undervisningsstil med mycket kontakt mellan studenter och lärare .
this is done in supervision sessions where students solve the exercises and regularly discuss with the teachers . ||| detta sker under handledningstimmar där studenter löser uppgifterna och regelbundet diskuterar med lärarna .
they can then receive individual feedback and appropriate guidance in their own problem solving . ||| de får då individuell återkoppling och vägledning i sin egen problemlösning .
the assessment of exercises has been adapted to encourage creativity and independent problem solving . ||| examinationen av uppgifterna har anpassats för att uppmuntra kreativitet och oberoende problemlösning .
as a follow up to each module , the students are asked to reflect on their own and alternative solutions , and on their own problem solving . ||| som uppföljning till varje modul får studenterna reflektera över sina egna och alternativa lösningar , och över sin egen problemlösning .
while the main teaching language is swedish , some support can be given also in english , so it is possible to take the course in english for the interested student . ||| det huvudsakliga undervisningsspråket är svenska , men visst stöd kan ges även på engelska , så det är möjligt för en intresserad student att ta kursen på engelska .
the compulsory courses in mathematics on the software engineering programme or their equivalent ( i.e. discrete mathematics , linear algebra , analysis and mathematical statistics ) . ||| de obligatoriska matematikkurserna på it-programmet eller motsvarande ( dvs. diskret matematik , linjär algebra , analys och matematisk statistik ) .
a course in algorithms and data structures complements this course in a good way , but is not a requirement . ||| en kurs i algoritmer och datastrukturer kompletterar denna kurs på ett bra sätt , men är inte förkunskapskrav .
to learn about common abstract data types , data structures and algorithms . ||| att lära sig om vanliga abstrakta datatyper , datastrukturer och algoritmer .
abstract data types . ||| abstrakta datatyper .
simple complexity analysis . ||| enkel komplexitetsanalys .
common data structures such as arrays , lists , trees , hash tables and how these can be used to implement abstract data types such as stacks , queues , priority queues , dictionaries and graphs . ||| vanliga datastrukturer som fält , listor , träd och hashtabeller samt hur dessa kan användas för att implementera abstrakta datatyper som köer , prioritetsköer , lexika och grafer .
standard algorithms for these data structures and their resource demands . ||| standardalgoritmer för dessa datastrukturer och deras resurskrav .
iterators . ||| iteratorer .
sorting algorithms . ||| sorteringsalgoritmer .
standard libraries for data structures and algorithms . ||| standardbibliotek för datastrukturer och algoritmer .
understand and use some basic abstract data types and data structures , including lists , queues , tables , trees and graphs . ||| förstå och använda några grundläggande abstrakta datatyper och datastrukturer , bland annat listor , köer , tabeller , träd och grafer .
understand and use some of the algorithms used to manipulate and query basic data structures in an efficient way , and understand why they are correct . ||| förstå och använda några av de algoritmer som används för att hantera grundläggande datastrukturer på ett effektivt sätt , och förstå varför de är korrekta .
analyse the efficiency of ( some ) algorithms . ||| analysera ( vissa ) algoritmers effektivitet .
make informed choices between different data structures and algorithms for different applications . ||| göra välgrundade val mellan olika datastrukturer och algoritmer för olika tillämpningar .
implement abstract data types as interfaces , and data structures as classes , in an object-oriented programming language . ||| implementera abstrakta datatyper som gränssnitt , och datastrukturer som klasser , i ett objektorienterat programmeringsspråk .
programming using object-oriented language ( preferably java ) . ||| programmering i objektorienterat språk ( helst java ) .
basic mathematical concepts like sets , functions , relations , graphs , logarithms and proofs by induction . ||| grundläggande matematiska begrepp som mängder , funktioner , relationer , grafer , logaritmer och induktionsbevis .
the aim of this course is to teach the fundamental principles of the object oriented approach to program development , and how to construct object oriented programs . ||| kursens syfte är att lära ut grundprinciperna för det objektorienterade synsättet och hur man konstruerar objektorienterade program .
object oriented development methods are widely spread and take a strong position today . ||| det objektorienterade synsättet har idag en mycket stark ställning när det gäller programutveckling .
object oriented programs consist of a collection of cooperating objects . ||| program som är uppbyggda enligt objektorienterade principer består av ett antal samverkande objekt .
the objects encapsulate data together with methods for accessing and updating the data . ||| objekten kapslar in data och erbjuder metoder för att avläsa och uppdatera dem .
objects are described by data types called classes . ||| objekten beskrivs av s.k. klasser .
programs are coded in java . ||| i kursen används programspråket java .
fundamental concepts in object oriented programming development . ||| grundläggande begrepp i objektorienterad programutveckling .
the concepts of object and class , data encapsulation . ||| objekt och klass , datainkapsling .
constructors , methods , and fields . ||| konstruktorer , metoder , instansvariabler , klassvariabler .
modularisation of programs . ||| modularisering av program .
standards for coding style , naming and commenting . ||| kodningsstandard , namnsättning och kommentering .
program testing . ||| testning av program .
inheritance , dynamic binding and polymorphism . ||| arv , dynamisk bindning och polymorfism .
abstract classes and interfaces . ||| abstrakta klasser och gränssnitt .
graphical user interfaces . ||| grafiska användargränssnitt .
events and listeners . ||| händelser och lyssnare .
the model-view-controller architecture for programs with graphical user interfaces . ||| model-view-controller-arkitekturen för program med grafiska användargränssnitt .
exception handling . ||| felhantering .
streams and files . ||| strömmar och filer .
introduction to active objects and threads . ||| något om aktiva objekt och trådar .
modelling in uml , an orientation . ||| orientering om modellering i uml .
mandatory assignments and written exam . ||| skriftlig tentamen .
independently construct object oriented programs which uses classes constructed with one's own hand , together with various standard classes . ||| självständigt konstruera objektorienterade program som både använder sig av egenhändigt konstruerade klasser och av färdiga standardklasser .
construct event driven programs with graphical user interfaces . ||| konstruera händelsestyrda program med grafiska användargränssnitt .
use standard classes for data collections , streams , and files . ||| använda standardklasser för bl.a. datasamlingar , strömmar och filer .
search information about standard classes in the java api . ||| söka information om standardklasser i java api .
use some commonly available code development tools . ||| använda några vanligt förekommande kodutvecklingsverktyg .
describe simple object oriented models in an object oriented modelling language . ||| beskriva enkla objektorienterade modeller i ett objektorienterat modelleringsspråk .
object oriented methodology is now commonly used for the development of a variety of systems . ||| objektorienterad metodik används numera allmänt vid utveckling av många olika typer av system .
uml is used for modelling and java for coding . ||| i kursen används java som programmeringsspråk och uml som modelleringsspråk .
fundamental concepts in object oriented programming . ||| grundläggande begrepp i objektorienterad programutveckling .
constructors , methods and fields . ||| konstruktorer , metoder , instans- och klassvariabler .
the modelling language uml . ||| modelleringsspråket uml .
modularisation of programs using packages . ||| modularisering av program med paket .
inheritance , dynamic binding and polymorphism . ||| arv , dynamisk bindning och polymorfism .
standard class libraries and their documentation . ||| användning av standardbibliotek och deras dokumentation .
documentation of programs using javadoc . ||| dokumentation av program med javadoc .
standards for coding style , naming and commenting . ||| kodningsstandard , namnsättning och kommentering .
program testing . ||| testning av program .
structured exception handling . ||| strukturerad felhantering .
the structural concepts cohesion , coupling and refactoring . ||| de strukturella begreppen kohesion , koppling och refaktorering .
mandatory assignments and written exam . ||| skriftlig tentamen .
final grade is obtained after passed assignments and is based on the grade of the written exam . ||| slutbetyg i skala 3-5 ges efter godkända inlämningsuppgifter och baseras på tentamen .
construct small object oriented programs . ||| konstruera små objektorienterade program .
use a commonly available computer based program development tool . ||| använda några vanligt förekommande programutvecklingsverktyg .
master techniques for data encapsulation , inheritance and polymorphism in an object oriented programming language . ||| behärska tekniker för datainkapsling , arv och polymorfism i ett objektorienterat programmeringsspråk .
construct simple object oriented models in a graphical modelling language . ||| konstruera enkla objektorienterade modeller i ett grafiskt modelleringsspråk .
uml is used for modelling and java for coding . ||| i kursen används java som programmeringsspråk och uml som modelleringsspråk .
object oriented modelling in uml . ||| objektorienterad modellering i uml .
graphical user interfaces . ||| grafiska användargränssnitt .
the model-view-controller architecture . ||| model-view-controller-arkitekturen .
streams and files . ||| strömmar och filer .
parallel programming . ||| parallprogrammering .
active objects and threads . ||| aktiva objekt och trådar .
communication . ||| kommunikation .
ports , sockets , datagram , multicasting , client-server . ||| portar , socketar , datagram , multicasting , client-server .
reflection and class loading . ||| reflektion och klassladdning .
mandatory assignments , a project and written exam . ||| skriftlig tentamen .
final grade is obtained after passed assignments and project and is based on the grade of the written exam . ||| slutbetyg i skala 3-5 ges efter godkända inlämningsuppgifter och projekt och baseras på tentamen .
construct object oriented programs with graphical user interfaces and threads . ||| konstruera objektorienterade program med grafiska användargränssnitt och trådstruktur .
construct object oriented models in a graphical modelling language . ||| konstruera objektorienterade modeller i ett grafiskt modelleringsspråk .
use commonly available computer based program development tools . ||| använda några vanliga förekommande datorbaserade verktyg för objektorienterad metodik .
perform program development in a project group . ||| arbeta med programutveckling i projektgrupp .
in recent years , powerful tools for verifying software and hardware systems have been developed . ||| under de senaste åren har kraftfulla verktyg för verifikation av programvaru- och hårdvarusystem utvecklats .
these tools rely in a crucial way in logical techniques . ||| dessa verktyg förlitar sig på ett avgörande sätt i logiska tekniker .
this course provides a sound basis in logic and a short introduction to some logical frameworks used in modelling , specifying and verifying computer systems . ||| kursen ger en god grund i logik och en kort introduktion till några logiska ramverk som används för att modellera , specificera och modellera datorsystem .
a sound basic knowledge in logic is a welcome prerequisite for courses in program verification , formal methods and artificial intelligence . ||| grundläggande kunskaper i logik är en god grund för kurser i programverifiering , formella metoder och artificiell intelligens .
we cover : propositional logic ( sections 1.1 to 1.5 ) , predicate logic ( sections 2.1 to 2.6 ) and model-checking ( sections 3.2 and 3.4 ) . ||| vi täcker : satslogik ( avsnitt 1,1-1,5 ) , predikatlogik ( avsnitt 2,1-2,6 ) och model-checking ( avsnitten 3.2 och 3.4) .
the students should be able to understand and use formal tools for checking software and hardware , such as sat-solver and model checking tools ( used in software engineering ) . ||| studenterna ska kunna förstå och använda formella verktyg för kontroll av mjukvara och hårdvara , såsom sat-lösare och " model checking tools " ( som används i programvaruteknik ) .
theyshould also be able to explain the meaning of soundness and completeness for various logic ( propositional , predicate and temporal logic ) and to write derivation trees in natural deduction in predicate logic . ||| de skall också kunna förklara innebörden av sundhet och fullständighet för olika logiker ( sats- , predikat- och temporal logik ) och skriva härledningar i naturlig deduktion i predikatlogik .
the requirement for the course is to have successfully completed two years with the subject computer science or equivalent . ||| kravet för kursen är att ha framgångsrikt slutfört två år med ämnet datavetenskap eller motsvarande .
particularly relevant are mathematics ( including discrete mathematics ) , programming , algorithms and/or data structures . ||| särskilt relevant är matematik ( inklusive diskret matematik ) , programmering , algoritmer och / eller datastrukturer .
the work involves both the organization and leading of the project and the development of the product as such . ||| i projektarbetet ingår såväl organisation och ledning av projektet som själva utvecklingsarbetet .
another aim is to give sufficient knowledge in the formulation of problems , searching for information , reporting , documentation and other areas relevant to the upcoming thesis work . ||| ytterligare ett syfte är att ge tillräckliga kunskaper om problemformulering , informationssökning , rapportering , dokumentation etc. för att självständigt kunna genomföra efterföljande examensarbete .
the course shall give the student practical experience form working in a project group when it comes to planning , construction , implementation and verification of a non-trivial system of hard - and/or software . ||| generellt sett ska kursen ge den studerande praktisk erfarenhet av arbete i projektgrupp för planering , konstruktion , implementering och verifiering av ett icke-trivialt system bestående av hård- och/eller mjukvara .
working in a project : ||| arbete i projekt :
information search ||| informationssökning .
the writing of reports and oral presentation ||| rapportskrivning samt muntlig presentation .
if a project group or an individual participant doesn't pass the exam directions will be given on what additional work that is needed to get a grade . ||| vid underkänt betyg ( för gruppen eller enskild individ ) ges första gången anvisningar för vilka kompletteringar som skall genomföras för att erhålla godkänt betyg .
identify and formulate a project assignment ||| identifiera och formulera en projektuppgift
distribute roles within the group and develop rules for corporation ||| fördela roller i arbetsgruppen och fastlägga samarbetsprinciper
make a time plan ||| göra tidsplanering
identify required knowledge and find the relevant information ||| identifiera kunskapsbehov och söka information
develop and evaluate suggestions for solutions to the problem at hand , carry through the development process and evaluate the solutions ||| ta fram och värdera lösningsförslag , genomföra samt utvärdera lösningar
handle oral and written presentations ||| genomföra muntliga och skriftliga redovisningar
the projects are run in groups of 4 - 8 students . ||| projekten genomförs i grupper om 4-6 teknologer .
every project group has a orderer and a main tutor . ||| varje projekt har en beställare och en huvudhandledare .
each student choose a project assignment from a list of projects on offer and can also give his/her own proposals . ||| studenten väljer projekt från ett antal erbjudna projekt och kan också komma med egna förslag .
projects groups of 4-8 students are formed . ||| projektgrupper om 4-6 studenter formas .
the course presents some possible approaches to developing a web application . ||| kursen presenterar några olika utvecklingsalternativ för en web applikation .
for each approach design is discussed and and a couple of techniques are presented . ||| för varje alternativ diskuteras designfrågor och ett antal tekniker presenteras .
the course emphasize hands-on work using modern advanced development environments and server environments . ||| kursen innehåller praktisk arbete i avancerade utvecklingsmiljöer och server-miljöer .
the main content of the course is ; design , implementation , configuration , deployment , execution and trouble shooting . ||| design , implementation , konfigurering , driftsättning , exekvering och felsökning av web-applikationer utgör huvuddelen av kursen .
content at a glance ; ||| övergripande innehåll :
standards , platforms , frameworks , architecture , design , approaches and more .... ||| standards , plattformar , ramverk , arkitektur , design , utvecklingsalternativ , m.m.
client side technologies ( html , css , javascript , ajax , and more ) ||| tekniker för klientsidan ( html , css , javascript , ajax , m.fl. )
server side technologies ( java servlet api , java server faces , web services , rest and more ) ||| tekniker för serversidan ( java servlet api , java server faces , webservices , rest , m.fl. )
possibly emerging technologies . ||| eventuella " emerging technologies "
passed assignments and project . ||| godkända inlämningsuppgifter och projekt .
grade : u-5 . ||| betyg : u-5 .
grade is decided from the project . ||| betyg ges av projektet
do a sensible choice between the presented approaches and techniques for a modern web application . ||| efter kursen skall man , utifrån de presenterade utvecklingsalternativen och teknikerna , kunna göra medvetna val då man utvecklar en web applikation .
as a result of the choice ; design , implement , deploy and debug a basic web application . ||| utfrån detta val designa , implementera , driftsätta och felsöka en enklare web applikation .
on a basic level be able to find and use open specifications and standards from the area ||| på en grundläggande nivå söka efter och använda öppna standards och specifikationer inom web området .
lectures , assignments and a final project . ||| kursen ges i form av föreläsningar , datorövningar ( inlämningsuppgifter ) och ett avslutande projekt .
- good programming skills in java . ||| - minst 7,5 hp java .
- knowledge in ooa/d and uml . ||| - grundläggande kunskaper i ooa / d och uml .
courses dat050 , dat055 , let375 , leu061 , tda357 or equivalent . ||| lämpliga kurser är dat050 , dat055 , let375 , leu061,tda357 .
in this course the students do a project in limited time . ||| i denna kurs ska studenten genomföra ett projektarbete inom en begränsad tid .
the subject can be freely chosen within computer science and engineering , and suggested by the students themselves or by potential supervisors . ||| ämnet är fritt valt inom datavetenskap eller datateknik , och kan antingen vara föreslaget av en potentiell handledare eller av studenten själv .
the project shall be on a nontrivial level . ||| projektet skall vara icke-trivialt .
the project can be done in small groups , with the understanding that all group members contribute substantially , or individually . ||| projektet kan göras i en liten grupp där samtliga medlemmar bidrar substansiellt , eller individuellt .
a final report must be delivered and also presented orally . ||| projektet redovisas genom en slutrapport samt en muntlig presentation .
contents , depth and clarity will count . ||| bedömning sker efter innehåll , djup och tydligehet .
the subject can be freely chosen within the area of computer science and engineering . ||| projektets ämne kan väljas fritt inom områdena datavetenskap och datateknik .
the project can either suggested by the students themselves or by a potential supervisor . ||| projektet kan antingen föreslås av studenten själv eller av en handledare .
written report and some oral presentation . ||| skriftlig rapport och muntlig presentation .
the supervisor will recommend a final grade for the project for approval by the course examiner . ||| handledaren rekomenderar ett slutbetyg för projektet , vilket sedan ska godkännas av kursens examinator .
work on a complex task which has a clear goal but in general no predefined result , ||| arbeta med ett komplext problem som har ett klart mål men inget fördefinierat resultat
integrate knowledge from disparate fields if appropriate , ||| integrera kunskap från olika områden om det behövs
apply and strengthen various skills , such as ||| tillämpa och stärka förmågor som t.ex.
problem recognition and problem solving ||| att känna igen och lösa ett problem
modelling av problem ||| modellering av problem
application and adaptation of textbook methods ||| tillämpning och anpassning av kända metoder
independent literature investigation ||| oberoende litteratursökning
implementation of software and use of existing software packages ||| implementering av mjukvara och användande av existerande mjukvarupaket
testing av mjukvara ||| testning av mjukvara
drawing conclusions from experimental results . ||| att dra slutsatser från experimentella resultat .
plan the steps of a complex work , set up intermediate goals and keep the project running , come to realistic estimates of resources and achievable results , revise goals and develop work-arounds if necessary , ||| planera ett komplext arbete , sätta upp delmål och hålla projektet igång , göra realistiska bedömningar om resurskrav och möjliga resultat , revision av mål och att hitta andra angreppssätt om nödvändigt .
communicate and present the results efficiently , both in writing and orally ||| kommunicera och presentera resultaten effektivt , både skriftligt och muntlig
document the work in such a way that others can build on it later on . ||| dokumentera arbetet så att andra kan bygga vidare på resultatet
students have to find a supervisor by themselves . ||| studenten måste själv hitta en handledare .
to apply for the course , the student must have arranged a teacher who is willing to supervise the project . ||| för att söka kursen ska studenten ha hittat en lärare som är villig att agera som handledare för projektet .
the overall aim of this course is to introduce the student to the design and verification of electronic systems . ||| kursens övergripande syfte är att introducera studenten till konstruktion och verifiering av elektroniksystem .
the course is intended to give a solid foundation in hdl-based hardware design , which is necessary for the courses that follow it in the eesd curriculum , while simultaneously giving an overview of the field of electronic system design . ||| kursen avses ge en stabil grund i hdl-baserad hårdvarukonstruktion , vilket är nödvändigt för följande kurser i eesd-programmet , och samtidigt ge en överblick över konstruktion av inbyggda elektroniksystem .
- suggest how to select among different technology platforms ( fpga , asic , software on processor , pcb , ... ) , based on parameters such as design , production , and power costs for different technologies . ||| - föreslå val av implementationsplattform ( fpga , asic , mjukvara på processor , kretskort ) med utgångspunkt i kostnader för design , produktion och effektförsörjning för olika alternativ .
- describe the implementation steps required for the design , verification and test of a complex electronic system , and how these steps are related to each other . ||| - beskriva de implementationssteg som krävs för konstruktion , verifiering och test av ett komplext elektroniksystem , och hur dessa steg relateras till varandra .
- describe how electronic system design projects may be organized and steered . ||| - beskriva hur konstruktionsprojekt för elektroniksystem kan organiseras och styras .
- discuss power delivery and heat removal in electronic systems , and how these design aspects can determine the best implementation strategy . ||| - diskutera kraftförsörjning och kylning i elektroniksystem , och hur dessa designaspekter kan avgöra valet av implementationsstrategier .
- implement digital parts of an electronic system , using hardware description languages ( hdls ) and test benches as well as basic electronic design automation ( eda ) tools , such as hdl simulators and synthesis tools . ||| - implementera digitala delar av elektroniksystem med hjälp av hårdvarubeskrivande språk ( hdler ) och testbänkar samt enkla konstruktionsverktyg ( eda-verktyg ) , såsom hdl-simulatorer och syntesverktyg .
- describe how basic system-oriented design can be carried out using model-based design and simulation tools which are interfaced to hardware implementation tools . ||| - redogöra för hur konstruktion kan genomföras på systemnivå med hjälp av verktyg för modellbaserad konstruktion och simuleringsverktyg som angör till verktyg hårdvarukonstruktion enligt ovan .
a lab series improves hdl and eda tool proficiency ; a lecture series provides the overview . ||| en labserie förbättrar och säkerställer studentens verktygsvana ; en föreläsningsserie ger överblicken över fältet .
the first half of the lab series is carried out individually , and the second half is carried out in groups of two . ||| den första halvan av labserien genomförs individuellt , och den andra halvan genomförs i par .
basic courses in logic design and electronic circuits . ||| grundkurser i logikkonstruktion och elektronikkretsar .
basic training in hardware description languages ( vhdl or verilog ) . ||| grundläggande färdigheter i hårdvarubeskrivande språk ( vhdl eller verilog ) .
the overall aim of the course is that the students should learn how to critically and creatively identify , formulate , and solve a complex design problem . ||| kursen övergripande syfte är att studenterna skall lära sig att kritiskt , oberoende och kreativt identifiera , formulera och lösa ett komplext konstruktionsproblem .
this is achieved by letting groups of students put the training from the fall to use in designing a complete embedded electronic system . ||| detta uppnås genom att studenterna får tillämpa sina teoretiska kunskaper från hösten genom att konstruera ett komplext elektroniskt system i ett grupprojekt .
although the project goal varies from year to year , the technical area of the project spans from embedded software to technology platforms such as fpgas and asics . ||| trots att projektets mål varieras år från år , spänner dess teknikinnehåll ändock från inbyggd mjukvara till teknologiplattformar såsom fpga och asic .
this is a course where the students in teams undertake an electronic product prototype design . ||| i denna kurs designar studentgrupper en elektronisk produktprototyp .
from product specification , functional design , detailed design , and all the way to implementation . ||| från specifikation , funktionell design , detaljdesign ändå fram till implementation .
the target technologies are fpga , and/or asic ( digital or analog ) . ||| målteknologierna är fpga och / eller asic ( digital eller analog ) .
to pass , a number of compulsory tasks have to be fulfilled by the team , ||| för godkänt på kursen måste varje team genomföra ett antal uppgifter .
including : submitting half-time report ( s ) , and a final report , and getting them approved ; ||| dessa omfattar : till deadline leverera halvtidsrapport ( er ) , och slutrapport ( er ) och få dessa godkända ;
conducting regular project meetings with supervisor , including reflection meetings and close-out meeting ; ||| delta i regelbundna teammöten med gruppens handledare , inklusive reflektionsmöten vid halvtid och projektavslut ;
orally presenting the planning , half-time , and final reports ; ||| muntligt presentera planeringsarbetet , halvtidsrapporterna och slutrapporterna ;
and delivering an approved end product . ||| samt leverera en godkänd produkt .
in addition , each student has to maintain a personal logbook . ||| dessutom måste varje student kontinuerligt föra personlig loggbok .
each team project is assessed according to the two main deliverables : a final academic report ( 40 % ) , and the product , including product documentation ( 30 % ) ; and on the team process ( 30 % ) . ||| varje grupp examineras på två huvudsakliga slutleveranser : en slutlig akademisk rapport ( 40 % ) , och produkten , inklusive produktspecifikation ( 30 % ) ; samt på processen under projektets gång ( 30 % ) .
the team process is assessed using team and individual logbooks , agile process documentation , supervisor contacts , etc. . ||| processen examineras utgående från gruppens gemensamma och individuella loggböcker , dokumentation av den agila processen , handledarkontakter , etc.
the result of this combined assessment is a team base grade . ||| resultatet av denna sammanlagda bedömning är gruppens basbetyg .
an individual grade is awarded to each student , based on the contribution to the the team's result ( all three parts ) . ||| ett individuellt betyg sätts sedan för varje student , baserat på studentens bidrag till gruppens gemensamma resultat ( alla tre delarna ) .
the individual grade may be higher or lower than the team base grade . ||| det individuella betyget kan vara högre eller lägre än gruppens basbetyg .
apply her/his technical expertise to a multi-person project where an electronic product ( fpga / asic ) is specified , designed , implemented , and verified . ||| tillämpa sin tekniska expertis i ett flerpersonsprojekt i vilket en elektronisk produkt ( fpga / asic ) specificeras , designas , implementeras och verifieras .
proficiently use modern eda tools for fpgas / asics . ||| sakkunnigt använda moderna eda-verktyg för fpga / asic .
contribute , in several team roles , to a multi-person project where an industry-like agile project model is used . ||| bidra , i flera roller , till ett flerpersonsprojekt i vilket en agil projektmodell av industriell typ används .
this includes planning , follow-up and trade offs under resource constraints . ||| detta inkluderar att planera , följa upp samt göra avvägningar under resursbegränsning .
reflect on the group process in a team . ||| reflektera över sin grupps grupprocess , i relation till teori för grupputveckling .
write an academic report , with several authors , describing a product-development project , with correct handling of references . ||| skriva en akademisk rapport , med flera författare , vars ämne är ett produktutvecklingsprojekt , med korrekt källhantering .
document an electronic product technically , including testing and verification documentation . ||| dokumentera en elektronisk produkt tekniskt , inklusive dokumentation av test och verifiering .
design a presentation , with time constraints , and deliver it . ||| designa en muntlig presentation och framföra den under tidsbegränsning .
the course consists of a major project assignment . ||| kursen består av ett större designprojekt .
the project work is done in teams where a number of students work together . ||| projektarbetet görs i team där ett antal studenter arbetar tillsammans .
the project target technologies are fpga , but also digital and analog asic . ||| målteknologierna är fpga men också digital och analog asic .
the project work is conducted according to a well-known agile project model . ||| i projektarbetet används en vedertagen agil projektmodell .
the project is reported orally and in written reports . ||| projektets process och resultat redovisas muntligt och skriftligt .
the written reports comprise technical documentation , any reports required in a project model and an academic report . ||| den skriftliga redovisningen omfattar teknisk dokumentation , ev. projektdokumentation enligt använd projektmodell samt en akademisk rapport .
a passing grade in the laboratory part of dat093 ( course element 0113 ) , or in either dat091 or dat092 , is required . ||| godkänt krävs för laborationsdelen av dat093 ( kursmoment 0113 ) eller för endera av kurserna dat091 och dat092 .
a passing grade in the laboratory part of mcc092 ( course element 0216 ) or either mcc091 ( course element 0211 ) or mcc090 ( course element 0107 ) is required . ||| godkänt krävs också för laborationsdelen av mcc092 ( kursmoment 0216 ) eller antingen mcc091 ( kursmoment 0211 ) eller mcc090 ( kursmoment 0107 ) .
lab exercises , term paper work and ethics assignment in dat110 must have been submitted on time . ||| konstruktionsövningar , fördjupningsstudie och etikuppgift i dat110 måste ha lämnats in i tid .
students in the mpees master program have priority to this course . ||| studenter inom masterprogrammet mpees har förtur till kursen .
other students who fulfill the prerequisites are admitted if seats are available . ||| andra studenter som uppfyller förkunskapskraven antas i mån av plats .
computers are a key component in almost any technical system today because of their functional flexibility as well as ability to execute fast in a power efficient way . ||| datorer utgör en viktig komponent i nästan alla tekniska system idag på grund av deras funktionella flexibilitet och förmåga att utföra beräkningar snabbt och energieffektivt .
in fact , the computational performance of computers has doubled every 18 months over the last several decades . ||| i själva verket har beräkningshastigheten för datorer fördubblats ca var 18 månad under de senaste decennierna .
this course covers the important principles for how to design a computer that offers high performance to the application software . ||| kursen täcker fundamentala principer för hur man konstruerar datorer som erbjuder hög beräkningshastighet för programvaran .
the course covers architectural techniques essential for achieving high performance for application software . ||| kursen omfattar arkitekturella tekniker nödvändiga för att uppnå hög prestanda för exekverande program .
it also covers simulation-based analysis methods for quantitative assessment of the impact a certain architectural technique has on performance and power consumption . ||| detta omfattar även simuleringsbaserade analysmetoder för kvantitativ analys av konsekvenserna av ett konstruktionsbeslut på prestanda och strömförbrukning .
the content is divided into the following parts : ||| kursinnehållet är indelat i följande delar :
1. the first part covers trends that affect the evolution of computer technology including moore s law , metrics of performance ( execution time versus throughput ) and power consumption , benchmarking as well as fundamentals of computer performance such as amdahl s law and locality of reference . ||| 1. den första delen omfattar trender som påverkar utvecklingen av datorteknik inklusive moores lag , mått på beräkningshastighet ( responstid och kapacitet ) , strömförbrukning , benchmarking , amdahls lag samt referenslokalitet .
it also covers how simulation based techniques can be used to quantitatively evaluate the impact of design principles on computer performance . ||| den täcker också hur simuleringsbaserade tekniker kan användas för att kvantitativt utvärdera effekten av konstruktionsbeslut på beräkningshastigheten .
2. the second part covers various techniques for exploitation of instruction level parallelism ( ilp ) by defining key concepts for what ilp is and what limits it . ||| 2. den andra delen omfattar olika tekniker för utnyttjande av parallellism på instruktionsnivå ( ilp ) genom att definiera nyckelbegrepp ilp och vad som begränsar det .
the techniques covered fall into two broad categories : dynamic and static techniques . ||| de tekniker som omfattas delas in i två huvudkategorier : dynamiska och statiska tekniker .
the most important dynamic techniques covered are tomasulo s algorithm , branch prediction , and speculation . ||| de viktigaste dynamiska tekniker som omfattas är tomasulos algoritm , branch prediction och spekulation .
the most important static techniques are loop unrolling , software pipelining , trace scheduling , and predicated execution . ||| de viktigaste statiska tekniker är loop unrolling , software pipelining , trace scheduling samt predicated execution .
3. the third part deals with memory hierarchies . ||| 3. den tredje delen handlar om minneshierarkier .
this part covers techniques to attack the different sources of performance bottlenecks in the memory hierarchy such as techniques to reduce the miss rate , the miss penalty , and the hit time . ||| denna del omfattar tekniker för att angripa olika prestandaflaskhalsar i minneshierarkin såsom tekniker för att minska antalet cache missar , samt minska tiden att hantera en cache träff / miss .
example techniques covered are victim caches , lockup-free caches , prefetching , virtually addressed caches . ||| exempel på tekniker som behandlas är inklusiva / exkusiva hierarkier , lockup-free cachar och prefetching .
also main memory technology is covered in this part . ||| virtuellt minne behandlas också .
4. the fourth part deals with multicore/multithreaded architectures . ||| 4. den fjärde delen behandlar flerkärniga / flertrådade processorarkitekturer ( multicores ) .
at the system level it deals with the programming model and how processor cores on a chip can communicate with each other through a shared address space . ||| på systemnivå behandlas programmeringsmodeller och hur processorkärnor på ett chip kan kommunicera med varandra via ett gemensamt adressrum .
written exam ||| godkända laborationer , skriftlig projektrapport samt skriftlig tentamen .
the course is organized into lectures , exercises , case studies , two laboratory tasks , and a mini research project assignment . ||| kursen är organiserad i föreläsningar , övningar , fallstudier , laborationer och ett miniprojekt .
lectures focus on fundamental concepts and structures . ||| föreläsningarna behandlar grundläggande begrepp och strukturer .
case studies are based on state of the art computers that are documented in the scientific literature . ||| fallstudierna är baserade på moderna kommersiella datorer som är dokumenterade i den vetenskapliga litteraturen .
students carry out the case studies and present them in plenary sessions to fellow students and the instructors . ||| studenter genomför fallstudier och presenterar dem i plenum för kurskamrater och instruktörer .
in light of the fact that we can integrate billions of transistors on a single integrated circuit , electronic system designers are forced to make use of computer-aided design tools , so-called electronic design automation ( eda ) tools , to manage design complexity and to meet , for example , strict timing , power dissipation and time-to-market budgets . ||| mot bakgrund av det faktum att man kan integrera miljarder transistorer på en enda integrerad krets tvingas konstruktörer av elektroniksystem att använda sig av datorstöd , så kallade electronic design automation ( eda ) - verktyg , för att hantera komplexiteten hos konstruktionerna och för att klara av strikta systembudgetar för , till exempel , timing , effektutveckling och konstruktionstid .
thus , apart from having skills in each of the abstraction levels , like circuit , logic , and architecture design , an electronic system designer must have a thorough understanding of design and verification methods that span the different abstraction levels and the algorithms that are leveraged inside the eda tools . ||| bortsett från att ha kunskaper inom enskilda abstraktionsnivåer som krets- , logik- och arkitekturkonstruktion måste därför systemkonstruktören även ha en grundlig förståelse för konstruktions- och verifieringsmetoder som spänner över de olika abstraktionsnivåerna och för de algoritmer som är centrala för eda-verktygen .
the purpose of this course is to strengthen the student's knowledge in eda-based design and verification methods and to make the student proficient in utilizing the right eda tools , in the right context and in the right sequence . ||| syftet med denna kurs är att stärka studentens kunskaper i metoder för eda-baserad konstruktion och verifiering , och att göra studenten förtrogen med att använda rätt eda-verktyg , i rätt sammanhang och i rätt ordning .
the lecture series , which mirrors the overall content of the course , covers : ||| föreläsningsserien speglar kursen i stort och innehåller följande :
- terminology and structure of eda systems . ||| - terminologi för och struktur hos eda-system .
- design of electronic systems that are based on both software and hardware . ||| - konstruktion av elektroniksystem uppbyggda av mjuk- och hårdvara .
- functional verification . ||| - funktionell verifiering .
- behavioral and logic synthesis . ||| - beteende- och logiksyntes .
- timing analysis . ||| - timinganalys .
- power and energy analysis . ||| - effekt- och energianalys .
- variability . ||| - variabilitet .
- physical design . ||| - fysisk konstruktion .
- design for test and manufacturability . ||| - konstruktion för test och tillverkningsbarhet .
- discrete mathematics and optimization relevant to eda . ||| - diskret matematik och optimering relevant för eda .
- technical writing . ||| - teknisk rapportskrivning .
beside the lecture on technical writing , there is also one peer-response workshop where the students get to develop their writing skills by reading and commenting on a draft from another term paper group . ||| utöver föreläsningen kring teknisk rapportskrivning innehåller kursen också en skrivarworkshop där studenterna får utveckla sitt skrivande genom att granska och kommentera varandras utkast inom fördjupningsstudien .
the lecture ethical aspects in embedded electronic system design is associated with dat110 but given in q1's dat093 introduction to electronic system design as a preparation . ||| föreläsningen ethical aspects in embedded electronic system design hör samman med dat110 men ges i förberedande syfte redan i dat093 introduktion till elektroniksystemkonstruktion i läsperiod 1 .
the examination has three parts : ||| examinationen består av tre delar:
lab exercises , including synthesis and place-and-route for asics : ||| konstruktionsövningar , inklusive syntes och place-and-route för asics :
60 % of total course grade is based on quality of preparation , vhdl handins , log books and lab report . ||| 60 % av kursens betyg bestäms av förberedelser , vhdl-inlämning , loggböcker och laborationsrapport .
term paper work ( in teams of 3 students ) on selected topics , including a term paper report and an oral presentation : ||| fördjupningsstudie ( i grupper om 3 studenter ) inom valt område , inklusive en rapport ( ' term paper ' ) och en muntlig presentation :
40 % of total course grade is based on quality of term paper report and oral presentation . ||| 40 % av kursens betyg bestäms av rapporten och den muntlig presentationen .
ethics assignment : ||| etikuppgift :
this individual assignment involves writing a reflective note , which addresses an ethical dilemma in research and development in the technical scope of the course and which is graded either pass or fail . ||| denna individuella uppgift leder till en kort skriftlig reflektion kring ett etiskt dilemma inom forskning och utveckling inom kursens tekniska område och betygsätts med godkänd / icke godkänd .
1. describe the algorithmic principles of a number of important eda concepts , such as behavioral and logic synthesis , logic simulation , static timing analysis , timing closure and power dissipation analysis ||| 1. beskriva algoritmiska principer för ett antal viktiga eda-koncept , som beteende- och logiksyntes , logiksimulering , statisk timinganalys , ' timing closure ' och effektanalys
2. describe contemporary eda design flows and their fundamental weaknesses and strengths3 . ||| 2. beskriva moderna eda-baserade konstruktionsflöden och deras fundamentala svagheter och styrkor
3. apply linux-based eda tools , including simple shell scripts , for design and verification of digital electronic systems ||| 3. använda linux-baserade eda-verktyg , inklusive enkla ' shell scripts ' ( kommandofiler ) , för konstruktion och verifiering av digitala elektroniksystem
4. perform timing-driven synthesis and power dissipation analysis for digital circuits 5 . ||| 4. genomföra fördröjningsdriven ( ' timing-driven ' ) syntes and effektanalys för digitala kretsar
5. critically and systematically integrate knowledge , to model , simulate , and evaluate features of digital asic design flows ||| 5. kritiskt och systematiskt integrera kunskap för att kunna modellera , simulera , och utvärdera egenskaper relevanta för konstruktionsflöden för digitala asics
6. clearly and unambiguously communicate his/her conclusions of laboratory work and in-depth term paper studies , the knowledge and rationale underpinning these as well as ethical aspects . ||| 6. på ett tydligt sätt kommunicera sina slutsatser från konstruktionsövningarna och från fördjupningsstudierna ( ' term paper ' ) , också redovisande bakomliggande fakta , gjorda val och etiska aspekter .
the pedagogical concept of the course rests on three cornerstones : ||| kursen är uppbyggd kring tre olika pedagogiska delar:
lectures : ||| föreläsningar :
these mainly supply the design and verification context of advanced electronic systems containing software and hardware . ||| dessa ger ett kontext till konstruktionsövningarna och fördjupningsstudierna .
lab exercises : ||| konstruktionsövningar :
term paper work : ||| fördjupningsstudie ( ' term paper ' ) :
introduction to electronic system design ( dat093 ) . ||| introduktion till elektroniksystemkonstruktion ( dat093 ) .
the course is intended to give insight into how mixed-signal subsystems , including a/d and d/a converters , are specified and implemented ; and how they affect the performance of the system of which they are part . ||| kursen avser att ge förståelse för hur mixed-signal-subsystem , inklusive a / d- och d / a-omvandlare , specificeras och implementeras samt för hur de påverkar systemprestanda .
the course includes sections on sampling and quantization ; ||| kursen tar upp sampling och kvantisering ;
converter specification ; ||| omvandlarspecifikationer ;
some commonly used converter architectures ; ||| några vanliga omvandlararkitekturer ;
analog interface components such as filters ; ||| analoga interfacekomponenter såsom linjära filter ;
influence of converter imperfections on system performance ; and ||| hur omvandlares icke-idealiteter inverkar på systemprestanda ; samt
cost limits for given parameters . ||| gränser för implementationskostnad med givna parametrar .
lab series with report submission , oral exam , voluntary sit-down exam . ||| labserie med rapportinlämning , muntlig examen samt frivillig skriftlig tentamen .
final grade is a weighted sum of these . ||| slutligt betyg vägs samman från dessa .
specifically , the student will be able to : ||| speciellt kommer studenten att kunna :
- estimate the influence of the converter imperfections on converter and system performance . ||| - uppskatta inflytandet av omvandlares icke-idealiteter på omvandlarens och systemets prestanda
- identify requirements on analog interface components for a given converter solution . ||| - identifiera kraven på analoga kringkomponenter utifrån specifikationer på omvandlaren .
- model a mixed-signal subsystem using software tools in order to verify assumptions and hand calculations . ||| - modellera och simulera ett mixed-signal-system med lämpliga verktyg för att verifiera antaganden och beräkningar .
the course mainly comprises lectures and lab exercises , with supporting problem-solving sessions . ||| kursen baseras på föreläsningar och laborationer , med stödjande övningstillfällen .
lectures introduce material from textbook and research papers . ||| föreläsningarna presenterar material från textbok och forskningsartiklar .
lab exercises are based on software simulations of mixed-signal subsystems . ||| laborationerna omfattar mjukvarusimuleringar av analoga och analog / digitala system .
functional programming , constructive logic , simply typed lambda calculus , type safety , inductive definitions and proof techniques , dependent types , proof assistants based on type theory . ||| funktionell programmering , konstruktiv logik , enkelt typad lambdakalkyl , typsäkerhet , induktiva definitioner och bevistekniker , beroende typer , korrekturassistens baserad på typteori .
the course will also contain an introduction to programming with dependent types and martin-löf's constructive type theory . ||| kursen innehåller också en introduktion till programmering med beroende typer och till martin-löfs konstruktiva typteori , en teori som förenar matematiska bevis och programmering .
examples will be given which illustrate the unity of mathematics and programming in this theory . ||| vidare kommer studenten att få praktisk erfarenhet av att programmera i ett språk med beroende typer .
the course is examined by homework , an oral presentation , and by a take home exam . ||| kursen examineras genom hemuppgifter , en muntlig presentation , och genom en hemtentamen .
the homework and the take home exam includes both theoretical problems and programming assignments in agda , an interactive programming and proof system using dependent types . ||| läxor och hemtentamen omfattar både teoretiska problem och programmeringsuppgifter i " agda " .
the oral presentation is done in pairs , and the student can select either a research paper or a chapter in the course book involving applications of type systems not covered in the lectures . ||| den muntliga presentationen sker parvis , och studenten kan välja att presentera antingen en uppsats eller ett kapitel i kursboken som involverar tillämpningar av typsystem som inte omfattas av föreläsningarna .
the presentation is judged both with respect to the quality of the slides and of the oral presentation . ||| presentationen bedöms både med avseende på presentationamaterialet och den muntliga presentationen .
after completing the course the student should have a solid and broad foundation in type systems for programming languages . ||| efter avslutad kurs ska studenten ha en solid och bred grund inom typsystem för programmeringsspråk .
the student will be able to design , analyse , and implement type systems and also use them in different application areas . ||| studenten ska kunna konstruera , analysera och implementera typsystem och även använda dem i olika applikationsområden .
moreover , the student will be able to work with an interactive programming and proof system using dependent types . ||| dessutom kommer studenten att kunna arbeta med interaktiv programmering och bevissystem med beroende typer .
a further goal is that the student should be able to make ethical considerations of his/her work . ||| ett ytterligare syfte är att studenten översiktligt skall kunna belysa de etiska konsekvenserna av sitt arbete .
each research area and a number of related topics are briefly presented to the student in the introduction lectures . ||| varje forskningsområde och ett antal relaterade ämnen presenteras för studenten i introduktionsföreläsningar .
to each group will be allocated a topic for the paper that is to be written . ||| studenterna bildar arbetsgrupper och varje grupp tilldelas ett ämne för vilket gruppen skall skriva en uppsats .
the paper should be orally presented . ||| uppsatsen skall presenteras muntligt vid ett seminarium .
students are also required to make peer reviews of other papers . ||| studenten skall också granska publikationer och andra gruppers uppsatser .
there will be lectures , seminars and workshops in the areas of scientific writing , reviewing and presentation as well as in ethics . ||| undervisningen sker i form av föreläsningar , seminarier och workshoppar inom uppsatsmetodik , granskning och presentation såväl som etik .
to pass the course , the student must : , ||| för betyget godkänd på kursen skall studenten :
(1) write an analytical survey paper or other scientific paper for a given topic in a specific research area , ||| (1) författa en analyserande översiktsuppsats eller annan vetenskaplig uppsats för ett givet ämne inom ett specifikt forskningsområde ,
(2) complete review assignments and ||| (2) granska publikationer och andra studenters arbeten ,
(3) make an oral presentation of the paper , ||| (3) presentera sin uppsats muntligt ,
(4) participate in lectures , seminars and workshops in technical writing and presentation techniques , ||| (4) delta i föreläsningar , seminarier och workshoppar inom områdena uppsatsmetodik och presentationsteknik ,
(5) participate in the ethical parts of the course and complete given assignments in the ethics area . ||| (5) delta i kursens etiska moment och genomföra eventuella specifika uppgifter inom etikområdet .
get acquainted to a research field : ||| fördjupa sig i ett forskningsområde :
the student should have investigated a selected area of research and deepened his/her knowledge in said area . ||| studenten skall kunna undersöka ett utvalt forskningsområde och fördjupa sin kunskap inom detta område .
this knowledge is used for writing a scientific paper . ||| denna tillägnade kunskap skall studenten visa genom att skriva en uppsats .
perform an independent literature review : ||| genomföra en självständig litteraturstudie :
given a scientific problem in the studied field , the student should be able to find the most relevant papers in scientific literature , review them and communicate the review result . ||| utgående från ett vetenskapligt problem inom det studerade området skall studenten kunna söka fram de mest relevanta artiklarna i den vetenskapliga litteraturen , kunna granska dem och kommunicera granskningens resultat .
write an analytical survey paper or other scientific paper : ||| författa en analyserande översiktsuppsats eller annan vetenskaplig uppsats :
the student should be able to plan , structure and write a research related paper in a selected scientific field . ||| studenten skall kunna planera , strukturera och författa en vetenskaplig uppsats inom det valda vetenskapsområdet .
the report will be based on already published papers and the student should be able to independently select those papers . ||| uppsatsen skall vara baserad på publicerade vetenskapliga artiklar och studenten skall självständigt kunna välja ut relevanta artiklar .
make ethical assessment : ||| göra etiska bedömningar :
the student should be able to make and defend ethical judgement in general , and in particular within the area of scientific writing , e.g. related to plagiarism and authorship . ||| studenten skall kunna göra och försvara etiska bedömningar generellt , och särskilt inom området akademiskt skrivande , t ex relaterat till plagiering och författarskap .
where applicable , the student should be able to discuss and value the societal and economic consequences of his/her work . ||| studenten skall , där så är tillämpbart , kunna diskutera och värdera de samhälleliga , etiska och ekonomiska konsekvenserna av sitt arbete .
the aim of the course is to give understanding of how programming languages are designed , documented , and implemented . ||| syftet med kursen är att skapa förståelse för hur programmeringsspråk utformas , dokumenteras och implementeras .
when implementing the interpreter and compiler you will learn about practical implementation concerns as well as the theory of formal semantics . ||| du kommer att lära dig om programspråkens grammatik när du implementerar syntaxanalys och om typsystem vid implementering av typkontrollerare .
by experimenting with language extensions you will get an insight into good and bad programming language designs . ||| genom att experimentera med språkutvidgningar får du en inblick i bra och dåliga sätt att konstruera programmeringsspråk .
written laboration and written exam . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
grading scale : u , 3 , 4 , 5 . ||| baserat på tentamensresultatet ges betygen u , 3 , 4 eller 5 .
define the lexical structure of programming languages by using regular expressions , explain the functioning of finite automata , and implement lexical analysers by using standard tools ; ||| använda reguljära uttryck för att definiera ett programmeringsspråks lexikala struktur , förklara hur ändliga automata fungerar , och implementera lexikala analysverktyg ;
define the syntax of programming languages by using context-free grammars , explain the principles of ll and lr parsing , and implement parsers by using standard tools ; ||| definiera syntaxen för programmeringsspråk med hjälp av kontextfria grammatiker , förklara principerna för ll och lr-parsning , samt implementera parsers med hjälp av standardverktyg ;
define and implement abstract syntax ; ||| definiera och implementera abstrakt syntax ;
master the technique of syntax-directed translation and its efficient implementation in their chosen programming language ; ||| behärska tekniken för syntaxstyrd översättning och hur man implementerar för ett valfritt programmeringsspråk ;
write simple code generators ; ||| skriva enkla kodgeneratorer ;
be familiar with the basic implementation issues of both imperative and functional languages ; ||| känna till grundläggande implementationsproblematik för både imperativa och funktionella språk ;
design and implement special-purpose programming languages ; ||| designa och implementera domänspecifika programmeringsspråk ;
use unification to implement polymorphic type checking ; ||| implementera polymorfa typkontroll med hjälp av unifiering ;
use closures to implement functional programming languages . ||| använda " closures " för att implementera funktionella programmeringsspråk .
the course requires : ||| kursen kräver :
- good programming skills in haskell , java , c , or c++ ||| - goda programmeringskunskaper i haskell , java , c eller c ++
- familiarity with java , c , or c++ ||| - god kännedom om något av programspråken java , c eller c ++
- basic skills of unix programming ( the shell , makefiles ) ||| - grundläggande färdigheter i unix programmering ( shell-programmering )
- basic knowledge of data structures and algorithms ||| - grundläggande kunskaper i datastrukturer och algoritmer
the following are also recommended : ||| följande rekommenderas också :
- familiarity with functional programming ||| - kännedom om funktionell programmering
- basic knowledge of assembler programming ||| - grundläggande kunskaper i assemblerprogrammering
a software product line ( spl ) is a set of software products that share a common , managed set of features that together address the needs of a particular market segment or mission . ||| mjukvaruproduktlinjer ( spl ) är en uppsättning mjukvaruprodukter som delar en gemensamt managerad uppsättning funktioner som tillsammans möter de behov som finns i ett visst marknadssegment eller uppdrag .
they are developed from a common set of core assets in a planned way . ||| de är utvecklade från en gemensam uppsättning nyckeltillgångar på ett planerat sätt .
the purpose of the course is to give in-depth knowledge in the area of software product lines as a whole , including engineering , processes , organizational , and management-perspectives . ||| syftet med kursen är att ge fördjupade kunskaper inom området mjukvaruproduktlinjer som helhet , inklusive teknik , processer , organisatoriska och lednings-perspektiv .
the course covers the following elements : ||| kursen omfattar följande moment :
the problems with large-scale software reuse and customization , ||| problem med återanvändning och anpassning av storskaliga system ,
scoping and domain analysis , ||| avgränsning och domänanalys ,
product management and product line economics , ||| produktledning och produktlinje-ekonomi ,
design and development of software product-line architectures / components , ||| design och utveckling av produktlinje-arkitekturer / komponenter av programvara ,
instantiation of family members , i.e. products , ||| instansiering av familjemedlemmar , dvs produkter ,
verification and validation in software product line architectures , ||| verifiering och validering av produktlinje-arkitekturer av programvara ,
evolution of software product-line assets , i.e. the product-line architecture , the components and the products , ||| utveckling av produktlinje-tillgångar , det vill säga produkt-line-arkitektur , komponenter och produkter för en programvara ,
frameworks for assessment / description of software product lines and practice , and , ||| ramverk för bedömning / beskrivning av produktlinjer och praxis för programvara ,
industrial practice of software product line engineering . ||| industriell praxis av produktlinjeteknik för programvara .
the course is graded based on the following elements : ||| kursen betygsätts baserat på följande faktorer :
group assignments , 4.5 hp credits , grade fail , 3 , 4 , 5 ||| grupparbeten , 4,5 hp , betyg : underkänd , 3 , 4 , 5
individual written exam , 3 hp credits , grade fail , 3 , 4 , 5 ||| individuell skriftlig tentamen , 3 hp , betyg : underkänd , 3 , 4 , 5
grades are assigned individually for the two types of course elements . ||| betyg sätts individuellt för båda typerna av moment .
understand challenges with and different solutions to large-scale software reuse and customization , ||| förklara utmaningar med , och olika lösningar för , återanvändning och anpassning av storskaliga system ,
understand different processes , roles and organizational approaches to sple , ||| förklara olika processer , roller och organisatoriska metoder för spl ,
be able to use tools that support sple and understand their limitations , ||| använda verktyg som stödjer spl och förklara deras begränsningar ,
be able to assess the potential for , or evaluate existing approaches to spl , at software development organizations using sple frameworks , and ||| bedöma potential av , eller utvärdera befintliga , metoder för spl i mjukvaruorganisationer som använder spl ramverk ,
understand the complexities of pl theory through the practical application of theoretical knowledge in industrial practice . ||| förklara komplexiteten i spl teori genom praktisk tillämpning av teoretiska kunskaper i industriell praxis .
the course is based on lectures , workshops and group assignments . ||| kursen är baserad på föreläsningar , workshops och grupparbeten
to be eligible for the course the student should have ||| för behörighet till kursen krävs
1) a bachelor degree in software engineering , computer science or equivalent , and ||| 1) en kandidatexamen i programvaruteknik , datavetenskap eller motsvarande , samt
2) successfully completed a course in model-driven engineering ( e.g. dat240 model-driven engineering or equivalent ) and in software architecture ( e.g. dat220 advanced software architecture or equivalent ) . ||| 2) en godkänd kurs i modelldriven mjukvaruutveckling ( t.ex. dat240 modelldriven engineering eller motsvarande ) och en godkänd kurs i mjukvaruarkitektur ( t.ex. dat220 advanced software architecture eller motsvarande ) .
there are three different formats of this course : ||| det finns tre olika format för studierna i denna kurs:
f1. individual work on a relevant research assignment ||| f1. individuellt arbete på en relevant forskningsuppgift
f2. individual work on literature study on a relevant topic ||| f2. individuellt arbete på en relevant litteraturstudie
f3. activity in a regular phd student course in a relevant area ||| f3. medverkan i doktorandkurs inom ett relevant område
2. describe the main phases of research work : planning , execution , revision and documentation/dissemination ||| 2. beskriva de huvudsakliga momenten för forskningsarbete ; planering , genomförande , omprioritering och dokumentation / spridning
3. independently perform a research prestudy in the form of a literature study or a limited research assignment ||| 3. på ett oberoende sätt driva en forskningsförstudie i form av en litteraturstudie eller en forskningsuppgift av begränsad omfattning
the course organization depends on the selected course format ( see content ) . ||| kursens organisation beror på det valda formatet ( se innehåll ) .
for a student that follows a regular phd student course ( f3 ) , no participation in the activities below is required . ||| för student som följer en doktorandkurs ( f3 ) krävs inget deltagande i aktiviteterna nedan .
for a student that intends to do a research assignment ( f1 ) or a literature study ( f2 ) , the following information applies : ||| för student som har för avsikt att göra en forskningsuppgift ( f1 ) eller en litteraturstudie ( f2 ) gäller följande information :
the course spans q1 and q2 , during which the student works in an independent manner . ||| kursen sträcker sig över lp1 och lp2 , under vilka studenten arbetar på ett oberoende sätt .
in the beginning of q1 , each student taking the course in q1 is required to state his / her topic of interest and set up a work plan that defines the scope and the goal . ||| i början av lp1 ska varje student som tar kursen i lp1 redovisa vilket ämne man avser arbeta med genom att upprätta en arbetsplan som definierar omfattning och mål .
similarly , in the beginning of q2 , each student taking the course in q2 is required to state his / her topic of interest and set up a work plan that defines the scope and the goal . ||| på samma sätt , i början av lp2 ska varje student som tar kursen i lp2 redovisa vilket ämne man avser arbeta med genom att upprätta en arbetsplan som definierar omfattning och mål .
the student should approach a suitable chalmers teacher , to make sure that he / she can take on the supervisor's role . ||| studenten kontaktar lämpligen en av sina lärare för att undersöka om denne kan agera handledare .
the supervisor is expected to provide guidance throughout the course ; at the very minimum , this involves reading / endorsing the work plan and reading / commenting / grading the final report . ||| handledaren förväntas ge vägledning under hela kursen ; detta handlar åtminstone om att läsa / godkänna arbetsplanen och att läsa / kommentera / betygsätta slutrapporten .
in the end of q2 ( or the beginning of q3 ) , the students present their work . ||| i slutet av lp2 ( eller början av lp3 ) presenterar studenterna sina arbeten .
students that are eligible for this course are enrolled in the mpees master's programme and have successfully completed the following courses : ||| studenten ska vara inskriven på masterprogrammet mpees och ska ha klarat följande kurser :
introduction to electronic system design ( dat093 ) , ||| introduktion till elektroniksystemkonstruktion ( dat093 ) ,
introduction to integrated circuit design ( mcc092/mcc091 ) , and ||| introduction to integrated circuit design ( mcc092 / mcc091 ) , and
methods for electronic system design and verification ( dat110 ) . ||| konstruktionsmetodik för elektroniksystem ( dat110 ) .
in contrast to regular master's courses , this course has a focus on individual , advanced training . ||| till skillnad från vanliga masterkurser har denna kurs sitt fokus på individuell , avancerad utbildning .
hence , there is a limit to the number of students that can be accepted to this course . ||| därför finns det en gräns för hur många studenter som kan accepteras till denna kurs .
this is a follow-up course to tda361 computer graphics . ||| detta är en fortsättningskurs till tda361 computer graphics .
it is allowed to present in pairs ( for 30 minutes ) . ||| vanligt är även att presentera i par - då under 30 minuter .
compulsory seminars presents more details on a research-level for a selection of topics , e.g. ambient occlusion , hair rendering , gpgpu applications , ray tracing and global illumination , gpu-ray tracing , hard and soft shadows , real-time indirect illumination , spherical harmonics , wavelets for cg etc. . ||| de obligatoriska seminarierna presenterar mer detaljer på forskningsnivå för ett antal ämnen och kan innefatta t ex ambient occlusion , hair rendering , gpgpu applications , ray tracing och global illumination , gpu-ray tracing , hårda och mjuka skuggor , real-time indirect illumination och spherical harmonics .
the student will achieve practical experience from a larger project around 3d-graphics ( individually or in groups ) , for instance implementing a specific advanced extensive technique or implementing several advanced but smaller techniques . ||| varje elev gör även ett valfritt lämpligt programmeringsprojekt inom 3d-grafik ( individuellt eller i grupp ) , t ex genom att implementera en specifik metod eller flera avancerade men mindre omfattande tekniker .
this can e.g. , be done as a render engine of a game or stand alone programs . ||| detta kan t ex utformas som en renderingsmotor för ett spel , en ray tracer , en gpgpu-implementation eller stand-alone-effekter m.m.
for each student , at least 80 % attendance at the seminars is compulsory to pass the course . ||| minst 80 % närvaro på seminarierna krävs .
~ 16 seminars : one 2h-seminar each week during study period 3 + 4 . ||| ~16 seminarietillfällen : ett 2h-seminarium varje vecka under läsperiod 3+4 .
for each student , at least 80 % attendance is compulsory to pass the course . ||| minst 80 % närvaro krävs för att få godkänt på kursen .
the first ~ 5 seminars , the presentations are given by the teacher or other researchers . ||| de första c:a 5 seminarietillfällena ges föreläsningar av läraren eller andra forskare .
for the rest of the seminars , presentations are given by the students , followed by group discussions to deepen the understanding of the presented algorithms / techniques . ||| övriga seminarietillfällen hålls presentationer av studenterna , följt av att vi i grupper diskuterar och därmed fördjupar förståelsen för de presenterade algoritmerna / teknikerna .
the course tda361 computer graphics or equivalent . ||| en kurs motsvarande tda361 computer graphics eller liknande .
proper software - and system architecture is instrumental for ensuring that software-reliant systems achieve their business and mission goals , and satisfy required quality attributes such as performance , security , safety . ||| korrekt mjukvaru- och systemarkitektur är avgörande för att mjukvaruberoende system uppnår affärsmål och övriga uppdragsmål , och tillfredsställer erforderliga kvalitetsegenskaper såsom prestanda , säkerhet , säkerhet .
to this end , sound architecture principles and methods support developing , analyzing , and evolving systems . ||| för detta är sunda arkitekturprinciper och metoder ett stöd för att utveckla , analysera , och vidareutveckla system .
for a certain class of systems , e.g. , safety-critical systems , it is of outmost importance that the quality attribute requirements are satisfied , to eliminate the risk for severe , or even catastrophic , consequences . ||| för en viss typ av system , t.ex. säkerhetskritiska system , är det av yttersta vikt att kvalitetskraven är uppfyllda , för att eliminera risken för allvarliga , eller till och med katastrofala , konsekvenser .
architectural modeling , verification , validation , and evaluation have shown to be effective means to significantly increase the overall quality of the system . ||| arkitektur-modellering , - verifiering , - validering och - utvärdering har visat sig vara effektiva medel för att väsentligt öka den övergripande kvaliteten på systemet .
the purpose of this course is to learn principles and methods that aid the designer / developer / architect to gain increased confidence in the architectural design , including quantitative modeling and qualitative architecture evaluation methods . ||| syftet med kursen är att lära sig principer och metoder som hjälper designer / utvecklare / arkitekt att få ökad förtroende för utformningen av arkitektur , inklusive kvantitativ modellering och kvalitativa metoder för utvärdering av arkitektur .
the course will also address the specific challenges related to scale , dynamics , and heterogeneity as found in system of systems , and ultra-large scale systems . ||| kursen uppmärksammar också de särskilda utmaningar som uppstår i samband med skalning , dynamik , och heterogenitet som finns i system av system , och ultra-storskaliga system .
- quality attributes in the context of architecting ||| kvalitetsattribut i samband med arkitekturer
- qualitative and quantitative assessment of architectures ||| kvalitativ och kvantitativ utvärdering av arkitekturer
- architectural modeling through architecture description languages ( a.k.a. adls ) such as aadl and omg marte ||| arkitekt-modellering genom arkitekturbeskrivningsspråk ( adls ) såsom aadl och omg marte
- system modeling and the role of sysml and its relation to software architecting ||| system-modellering och sysmls roll och relation till programvaruarkitekturer
- architecting for evolution and variability ||| arkitekturer för evolution och variabilitet
- partitioned and layered architectures ||| partitionerade och skiktade arkitekturer
- system-of-systems and ultra-large scale systems ||| system-av-system och extremt stor-skaliga system
- case study on virtual integration from the avionics domain ||| fallstudie om virtuell integration inom avionik domänen
a written exam at the end of course . ||| skriftlig tentamen i slutet av kursen .
the projects must also be approved . ||| projekten måste vara godkänt .
a written essay must be approved and presented at a seminar . ||| essän måste vara godkänd och presenterats på ett seminarium .
attention to other students presentation . ||| deltagande vid andra studenters presentationer .
- understand the role and applicability of methods for evaluating architectures ||| förklara betydelsen och tillämpningen av metoder för utvärdering av arkitekturer
- describe inter-dependencies among quality-attributes and understand how they affect architecting ||| beskriva ömsesidigt beroende bland kvalitetsattribut och förstå hur de påverkar arkitekturer
- develop an ability to assess an architecture quantitatively and qualitatively ||| bedöma en arkitektur kvantitativt och kvalitativt
- develop architectural models using adls , and understand the intentionality of models throughout the system life-cycle ||| utveckla arkitektoniska modeller med hjälp adls , och förstå intentionalitet av modeller under hela systemets livscykel
- conduct incremental and multi-fidelity architecture-centric verification and validation ||| genomföra inkrementella och multi-fidelity arkitektur-centrerad verifiering och validering
- understand the characteristics and challenges of architecting system-of-systems and ultra-large-scale systems ||| förklara egenskaper och utmaningar i arkitekturer av system-av-system och extremt storskaliga system
- distinguish between software architecture , system architecture , and run-time architectures . ||| skilja mellan mjukvaruarkitektur , systemarkitektur , och körtids arkitekturer .
lectures , seminars and projects . ||| föreläsningar , seminarier , och projekt .
each student shall write an essay , give a seminar , and participate in other seminars . ||| varje student ska skriva en essä , hålla ett seminarium , och delta i andra seminarier .
to be eligible for this course the student should ||| för behörighet till kursen krävs minst
1) have a bachelor degree in software engineering , computer science or equivalent , including a successfully completed course in programming ( e.g. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 or equivalent ) , and ||| 1) en kandidatexamen i software engineering , programvaruteknik , datavetenskap eller motsvarande , inklusive an godkänd kurs i programmering ( t.ex. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 eller motsvarande ) , och
2) a successfully completed course in practical software development or software engineering project ( e.g. dat255 software engineering project ) . ||| 2) en godkänd kurs i praktisk mjukvaruutveckling eller programvaruteknik projekt ( t.ex. dat255 software engineering project ) .
one of the main challenges in software development is to make sure one is developing the right system , i.e. to understand the requirements that need to be fulfilled . ||| en av de största utmaningarna inom mjukvaruutveckling är att se till man utvecklar rätt system , dvs att förstå de krav som måste uppfyllas .
the purpose of this course is how to learn how to find and collect requirements from relevant sources , both at the start and during a software development project , following established principles and formats for documenting and maintaining requirements . . ||| syftet med kursen är hur man lär sig att hitta och samla kraven från relevanta källor , både i början och under ett utvecklingsprojekt programvara , efter fastställda principer och format för att dokumentera och underhålla krav .
one of the main challenges in software development is to make sure you are developing the right system , i.e. to understand the requirements that need to be fulfilled . ||| en av de största utmaningarna i programvaruutveckling är att se till att du utvecklar rätt system , dvs att förstå de krav som måste uppfyllas .
the focus of this course is how to find and collect requirements from relevant sources both at the start and during a software development project . ||| kursen fokuserar på hur man ska hitta och samla in krav från relevanta källor , både i början och under ett projekt för programvaruutveckling .
different methods for this as well as different underlying principles and formats for documenting and maintaining requirements are covered. ||| vi går igenom olika metoder för detta , såväl som olika bakomliggande principer och format för att dokumentera och underhålla krav .
in particular the course covers the problems that arise when requirements engineering is conducted in a fast-paced , cost-sensitive industrial reality . ||| kursen behandlar särskilt problem som uppstår när man hanterar krav i en snabbt föränderlig och kostnadskänslig industriell verklighet .
the following topics are included in the course : ||| följande moment ingår i kursen :
requirements elicitation ||| framtagning av krav
writing requirements and requirements specifications ||| skriva krav och kravspecifikationer
quality assurance of requirements ||| kvalitetssäkring av krav
prioritising requirements ||| prioritering av krav
connections and alignment between requirements engineering and other software engineering activities ||| koppling och samstämmighet mellan kravhantering och andra mjukvaruutvecklingsaktiviteter
requirements engineering in in-project vs. market-driven development ||| kravhantering i projekt kontra marknadsdriven utveckling
requirements engineering in agile and iterative / incremental development ||| kravhantering i agile och iterativ / inkrementell utveckling
knowledge and understanding - ||| kunskap och förståelse
explain why requirements engineering is a key to successful software engineering , ||| förklara varför kravhantering är en nyckel till framgångsrik programvaruteknik ,
describe the challenges involved in requirements engineering , ||| beskriva de utmaningar som är involverade i kravhantering ,
explain the importance of identifying stakeholders and their knowledge , context and goals , ||| förklara vikten av att identifiera intressenter och deras kunskap , sammanhang och mål ,
explain the difference between functional and quality requirements , ||| förklara skillnaden mellan funktions- och kvalitetskrav ,
describe how requirements engineering in agile projects differ from traditional requirements engineering . ||| beskriva hur kravhantering i agila projekt skiljer sig från traditionell kravhantering .
skilfully elicit software requirements , ||| skicklig framtagning av programvarukrav ,
prioritise requirements , ||| prioritera krav ,
assure the quality of requirements and requirements specifications , ||| kvalitetssäkra krav och kravspecifikationer ,
be able to assess current requirements engineering practices in a software project or a software development company . ||| kunna bedöma nuvarande praxis av kravhantering i ett mjukvaruprojekt eller ett företag inom mjukvaruutveckling .
to be eligible for this course the student should ||| för behörighet till kursen krävs minst
1) have a bachelor degree in software engineering , computer science or equivalent , including a successfully completed course in programming ( e.g. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 or equivalent ) , and ||| 1) en kandidatexamen i software engineering , programvaruteknik , datavetenskap eller motsvarande , inklusive an godkänd kurs i programmering ( t.ex. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 eller motsvarande ) , och
2) a successfully completed course in practical software development or software engineering project ( e.g. dat255 software engineering project ) . ||| 2) en godkänd kurs i praktisk mjukvaruutveckling eller programvaruteknik projekt ( t.ex. dat255 software engineering project ) .
this course will deal with an area of current interest in computer science and engineering . ||| kursen kommer att behandla ett område av aktuellt intresse inom data- och informationsteknik .
the aim of this course is to give the student the chance to follow , for example , a graduate course or a lecture series by a visiting researcher at the department . ||| kursens syfte är att ge studenten möjlighet att följa , till exempel , en doktorandkurs eller en föreläsningsserie som ges av en gästforskare vid institutionen .
research-oriented course in a field of relevance to computer science and engineering . ||| forskningsinriktad kurs inom ett område relevant för data- och informationsteknik .
the examination might vary on each instance of the course . ||| examination i denna kurs varierar beroende på kurstillfälle .
further information will be given on the course home page . ||| mer detaljerad information om hur kursen examineras ska presenteras på kurshemsidan .
the course shall give the student further knowledge in a research area of relevance to computer science and engineering . ||| kursen skall tillhandahålla studenten djupare kunskaper avseende ett forskningsområde relevant för ämnet data- och informationsteknik .
knowledge and understanding ||| kunskap och förståelse
master the terminology , concepts and theories associated with the selected area ; ||| förstå och förklara terminologi , koncept och teori kopplade till valt forskningsområde ;
demonstrate deep knowledge and understanding in the area of the course , and insight into current research and development ; ||| redogöra för och förklara forskningsområdet , samt visa förståelse för aktuell forskning och utveckling i det valda forskningsområdet ;
demonstrate deep methodological knowledge in the area of the course ; ||| redogöra för och förklara forskningsmetoder inom valt forskningsområde ;
skills and abilities ||| färdighet och förmåga
demonstrate the ability to critically and systematically integrate knowledge and to analyse , assess , and deal with complex issues in the area of the course ; ||| visa på en förmåga att kritiskt och systematiskt integrera kunskaper , och att analysera , bedöma och hantera komplexa frågor i valt forskningsområde ;
judgement and approach ||| värderingsförmåga och förhållningssätt
search for , and extract , necessary information from scientific publications in the selected area of the course , with the purpose of identifying strengths and weakness of solutions , approaches and methodologies . ||| söka efter , samt extrahera , nödvändig information från vetenskapliga publikationer inom valt forskningsområde , i syfte att bedöma lämpligheten av presenterade lösningar , tillvägagångssätt och metoder .
the student shall have a bachelor's degree in computer science and engineering or equivalent . ||| studenten ska ha en kandidatexamen inom data- och informationsteknik .
in addition , a mandatory pre-requisite to take this course is that the student has established a contact with the examiner of the course ; ||| därutöver är det ett förkunskapskrav att studenten har etablerat kontakt med kursens examinator ;
it is up to the examiner to decide whether a student is accepted or not to the course . ||| det är examinatorn som beslutar om studenten ska antas till kursen eller ej .
standard visual modeling languages , such as uml , taken out of the box , often do not fit an organization's needs . ||| standardiserade visuella modelleringsspråk , såsom uml , tagna direkt ur lådan passar sällan en organisations behov .
extending modeling languages with necessary constructs and features , or creating complementary languages , requires specialist knowledge beyond that of software modeling . ||| att utöka modelleringsspråk med nödvändiga konstruktioner och funktioner , eller skapa kompletterande språk , kräver specialistkunskaper utöver kunskap i modellering av programvara .
the purpose of this course is for the student to get familiarized with contemporary technologies and notations for creation , adaptation , and transformation of modeling languages . ||| syftet med kursen är att studenten ska bekanta sig med moderna tekniker och språk / notationer för att skapa , anpassa och omvandla modelleringsspråk .
standard visual modelling languages , such as uml , do often not fit an organization's needs out of the box . ||| standardsspråk för visuell modellering , t.ex. uml , passar ofta inte en organisations behov .
extending modelling languages with necessary constructs and features , or creating complementary languages , requires specialist knowledge beyond that of software modelling . ||| att utöka modelleringsspråk med nödvändiga konstruktioner och funktioner eller att skapa ett nytt språk , kräver specialistkunskaper utöver kunskap i programvaru-modellering .
the purpose of this course is to familiarize the student with contemporary technologies and notations for creation , adaptation , and transformation of modeling languages . ||| syftet med kursen är att studenterna blir förtrogna med modern teknik och språk / notation för att skapa , anpassa och omvandla modelleringsspråk .
examination consists of two parts : a written examination ( 4,5 hec ) and a project examination ( 3 hec ) . ||| examinationen består av två delar : en skriftlig tentamen ( 4,5 hp ) och ett projekt ( 3 hp ) .
the written examination is individual . ||| den skriftliga tentamen är individuell .
the project examination is based on the outcome of the group work . ||| projekt-examinationen baseras på resultatet av gruppens arbete .
for the written examination the grading scale used is five , four , three , not passed . ||| för skriftlig tentamen används betygsskalan underkänt , 3 , 4 , 5 .
for the project the grading scale used is passed and not passed . ||| för projektet används betygsskalan godänd och ej godkänd .
for passed ( 3 ) as a complete course grade , both the written exam and the project part must have been awarded passed . ||| för godkänd ( 3 ) på hela kursen , krävs att både skriftlig examen och projektet har erhållit betyget godkänd .
for 4 or 5 , the project part must have been awarded passed , and the written exam must have been awarded 4 respectively 5 . ||| för 4 eller 5 krävs att projektet har erhållit betyget godkänd , och skriftlig tentamen har erhållit betyget 4 respektive 5 .
knowledge and understanding ||| kunskap och förståelse
explain the following concepts : models , metamodel , constraints , transformation , semantics , abstract and concrete syntax ; ||| förklara följande begrepp : modeller , meta , begränsningar , transformation , semantik , abstrakt och konkret syntax ;
explain the architecture of contemporary modeling frameworks ||| förklara arkitekturen av samtida modelleringsramverk
explain how domain specific modeling languages can be realized within a contemporary modeling framework ||| förklara hur domänspecifika modelleringsspråk kan realiseras inom en samtida modellering ram
skills and abilities ||| färdigheter och förmågor
construct domain specific languages , e.g. specify metamodels including syntax and semantics ||| konstruera domänspecifika språk , t.ex. , specificera metamodels och deras syntax och semantik
construct model editors within a modeling framework ||| realisera modell-editering inom ett modelleringsramverk
create model validators within a modeling framework . ||| realisera modell-validering inom ett modelleringsramverk
specify model transformations and realizes them within a modeling framework . ||| specificera modell transformationer och realisera dem inom ett modelleringsramverk
apply the domain specific modeling approach to an authentic case ||| tillämpa domänspecifik modellering i ett autentiskt fall
judgement and approach . ||| värderingsförmåga och förhållningssätt .
recognize emerging technologies for model driven engineering using relevant information sources ||| känna till ny teknik för modelldrivet arbete genom relevanta informationskällor
select appropriate modeling technologies for a modeling tooling problem at hand ||| välja lämpliga modelleringsteknik för ett modelleringsverktyg problem till hands
the course consists of a series of lectures and a project . ||| kursen består av föreläsningar och ett projekt .
the lectures introduce each theme ; the project explores the themes by development of a modeling tool . ||| föreläsningarna introducerar varje tema ; projektet utforskar teman genom utveckling av ett modelleringsverktyg .
the tool is aimed at an authentic situation , and is realized by a contemporary modeling framework . ||| verktyget syftar till att hantera en autentisk situation , och realiseras genom ett samtida modelleringramverk .
the project consists of weekly iterations , during which the modeling tool is incrementally developed . ||| projektet består av veckovis iterationer , under vilken modelleringsverktyget stegvis utvecklas .
project work is carried out in teams of 6 students , with support of a group supervisor . ||| projektarbetet utförs i grupper , med stöd av en grupphandledare .
to be eligible for the course the student should have ||| för behörighet till kursen krävs minst
1) have a bachelor degree in software engineering , computer science or equivalent , ||| 1) en kandidatexamen i software engineering , programvaruteknik , datavetenskap eller motsvarande ,
2) successfully completed a course in object oriented programming e.g. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 or equivalent , and ||| 2) en godkänd kurs i objektorienterad programmering , t.ex. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 eller motsvarande , och
3) successfully completed a course in software modeling e.g.tda593 or equivalent . ||| 3) en godkänd kurs i mjukvarumodellering t ex tda593 eller motsvarande .
software development organizations need to constantly improve to become faster , better , and more efficient . ||| mjukvaruföretag måste ständigt förbättra sig för att bli snabbare , bättre och mer effektiv .
the course prepares students for the master thesis project and improves the student's ability to conduct phd studies . ||| kursen förbereder studenterna för examensarbete och förbättrar elevens förmåga att bedriva forskarstudier .
this course is for students who are interested in the empirical methods applied to the field of software engineering . ||| kursen är för studenter som är intresserade av att lära sig applicera olika empiriska metoder inom programvaruteknik .
the course introduces quantitative and qualitative methods in software engineering with accompanying statistical methods used for analysis . ||| kursen introducerar kvantitativa och kvalitativa metoder inom programvaruteknik .
the course contains : ||| kursen innehåller :
descriptive and inferential statistical methods applied to software engineering . ||| deskriptiv och inferentiell statistik applicerat på programvaruteknik .
conducting qualitative and quantitative methods in software engineering . ||| kvalitativa metoder i programvaruteknik .
the course is examined by three written lab assignments carried out in groups of normally 3-4 students . ||| kursen examineras genom tre inlämningsuppgift ( labbar ) som genomförs i grupp ( normalt 3-4 studenter ) .
the course is also examined by an individual written hall-exam . ||| kursen examineras slutligen också med en skriftlig salstenta .
the assignments are both theoretical and practical in nature . ||| inlämningsuppgifter är teoretiska och praktiska till sin natur .
1. knowledge and understanding : ||| 1. kunskaper och förståelse :
a. describe the principles of empiricism in software engineering . ||| a. förstå principerna avseende empiri inom programvaruteknik .
b. describe the principles of case study research / experiments / surveys . ||| b. förståelse principerna bakom fallstudier / experiment / enkäter .
c. describe the principles of meta-analytical studies . ||| c. beskriva de underliggande principerna för meta-analytiska studier .
d. explain the importance of research ethics . ||| d. förklara vikten av forskningsetik .
e. recognise and define code of ethics for when conducting research in software engineering . ||| e. känna till och definiera " code of ethics " gällande forskning inom programvaruteknik .
f. discuss and explain the most common ethical models in research . ||| f. diskutera och förklara the vanligaste etiska modellerna inom forskningen .
g. state and explain the importance of threats to validity and how to control said threats . ||| g. redogöra för och förklara vikten av validitetshot och hur man kan kontrollera dessa typer av hot .
2. skills and abilities : ||| 2. färdigheter och förmågor :
a. design an empirical study . ||| a. designa en empirisk studie .
b. analyse descriptive statistics and decide on appropriate analysis methods . ||| b. analysera deskriptiv statistik och definiera lämpliga analysmetoder .
c. use and interpret code of ethics for software engineering research . ||| c. använda och förklara " code of ethics " för programvaruteknisk forskning .
3. judgement and approach : ||| 3. värderingsförmåga och förhållningssätt :
a. state and discuss the tools used for data analysis and , in particular , judge their output . ||| a. ange och diskutera verktyg för dataanalys och , i synnerhet , bedöma verktygens resultat .
b. judge the appropriateness of particular empirical methods and their applicability to solve various and disparate software engineering problems . ||| b. bedöma lämpligheten i olika empiriska metoder och deras tillämpbarhet i att lösa olika och disparata programvarutekniska problemställningar .
c. question and assess common ethical issues in software engineering research . ||| c. ifrågasätta och bedöma vanliga etiska frågeställningar inom programvaruteknisk forskning .
the course introduces quantitative and qualitative methods in software engineering research with accompanying statistical methods used for analysis . ||| kursen introducerar kvantitativa och kvalitativa metoder för programvaruteknisk forskning tillsammans med statistiska metoder för att analysera resultat .
the course contains : ||| kursen innehåller :
descriptive and inferential statistical methods applied to software engineering . ||| deskriptiva och inferentiella statistiska metoder applicerade inom programvaruteknik .
conducting qualitative and quantitative methods in software engineering . ||| användning av kvantitativa och kvalitativa metoder .
methods for analysing quantitative and qualitative data in software engineering . ||| metoder för att analysera kvantitativ och kvalitativ data inom programvaruteknik .
usage of statistical tools . ||| användandet av statistiska verktyg .
the course provides a practical introduction to software engineering . ||| kursen ger en praktisk introduktion till mjukvaruutveckling .
it is up to every team to adapt the theory and use the tools to define their own way of working ||| det är upp till varje team att anpassa teori , anamma verktyg och skapa sitt eget sätt att arbeta .
the course is examined in two parts : a project deliverable ( source code , binary , and documentation ) and a final report that reflects on the project decisions and outcome . ||| kursen examineras i två delar : en leverabel från projektet ( källkod , applikation , och dokumentation ) och en slutrapport där studenterna reflekterar över beslut inom projektet och dess utfall .
these together are weighted and scored on a scale 0 to 100 . ||| dessa två delar vägs samman och poängsätts från 0 till 100 .
detailed weights and grading criteria are available in the course pm . ||| en exakt beskrivning angående viktning och betygskriterier finns i kurs-pm .
the scores are set on a group level but are adjusted for individual contribution . ||| poäng för de två sätts på gruppnivå , men den slutgiltiga poängen anpassas på individnivå , t.ex. baserat på individuellt bidrag .
after completion of this course the student should possess the following understanding , skills , abilities and judgement : ||| efter fullgjord kurs skall studenten besitta följande kunskaper , färdigheter och förmågor :
1. knowledge and understanding , the student should : ||| kunskap och förståelse , studenten skall kunna :
a. identify the complexities of software design and development ||| identifiera svårigheter inom mjukvarudesign och implementation
b. describe the fundamentals of software engineering , such as stakeholders and requirements ||| beskriva grundläggande koncept inom mjukvaruutveckling , t.ex. intressenter och krav
2. skills and abilities , the student should : ||| färdigheter och förmågor , studenten skall kunna :
a. elicitate requirements from and design a solution to a real-world problem ||| locka fram ( elicitera ) krav från och designa en lösning till ett verkligt problem
c. apply skills from programming courses and other relevant courses in a project-like environment ||| tillämpa färdigheter från programmeringskurser och andra relevanta kurser i en projektliknande miljö
d. learn new tools and apis on his/her own ||| lära sig nya verktyg och apier på egen hand
the course is organized as a project where the students work in teams of usually six students to address a real-world software engineering task . ||| kursen organiseras som ett projekt där studenterna arbetar i team om sex studenter ( vanligtvis ) för att lösa en realistisk mjukvaruutvecklingsuppgift .
the teams have weekly supervision meetings . ||| teamen har veckovisa handledningsmöten .
the project is supplemented by lectures that provide insight into the task the students are working on and software engineering in general . ||| som supplement till projektet ges en serie föreläsningar som ger fördjupad insikt i uppgiften samt mjukvaruutveckling i stort .
testing is one of the most used verification and validation technique in industry . ||| testning är ett av de mest använda verifiering- och valideringstekniker inom industrin .
this course provides the students with a general background on testing techniques , with a focus on the theory and practice of model-based testing . ||| denna kurs ger studenterna en allmän bakgrund om testmetoder , med fokus på teori och praktik av modellbaserad testning .
the course provides the students with a background on the theory and practice of model-based testing , including how testing tools can be used to improve software quality . ||| kursen ger studenten med en bakgrund på teori och praktikav modellbaserad testning , inklusive hur testverktyg kananvändas för att förbättra mjukvarans kvalité ( software quality ) .
general test techniques are explained with focus on model-based testing . ||| allmänna provningstekniker förklaras med fokus på modellbaserad testning .
students will get hands-on experience in building a model for testing and they use this model for both testing and verification purposes . ||| eleverna kommer att få praktisk erfarenhet av att bygga en modell för testning och de använder denna modell för både testning och verifiering .
examination consists of two parts : a written exam ( 4.5 hec ) , and a hand-in of assignments ( 3 hec ) . ||| examinationen består av två delar : en skriftlig tentamen ( 4,5 hp ) , samt inlämnade uppdrag ( 3 hp ) .
the hand-in assignments are normally carried out individually or in pairs , and the written exam is individual . ||| de inlämningsuppgifter utförs normalt individuellt eller i par , och tentamen är individuell .
for the written exam is fail ( u ) , 3 , 4 and 5 . ||| betygsskala i skriftlig tentamen : underkänd ( u ) , 3 , 4 , och 5 .
knowledge and understanding : ||| kunskap och förståelse :
- explain the distinction between software verification and software validation ; ||| - förklara skillnaden mellan verifiering och validering av programvara ;
- describe the connection between software development phases and kinds of testing ; ||| - beskriv sambandet mellan mjukvaruutvecklingsfaser och olika typer av tester ;
- describe and explain ( a number of ) different test methods , and use them in practical situations ; ||| - beskriva och förklara ( ett antal ) olika testmetoder , och använda dem i praktiska situationer ;
- describe and explain what model-based testing is . ||| - beskriva och förklara vad modellbaserad testning är .
skills and abilities : ||| färdigheter och förmågor :
- construct models in the modeling and specification languages learned in the course ; ||| - konstruera modeller i modellerings och specifikationsspråk lärt i kursen ;
- construct appropriate and meaningful test and interpret and explain ( to stakeholders ) the results of the application of such test cases ( using appropriate tools ) to practical examples ; ||| - konstruera lämpliga och meningsfulla tester och tolka och förklara ( till intressenter ) resultaten av tillämpningen av sådana testfall ( med lämpliga verktyg ) till praktiska exempel ;
- apply model based testing on realistic examples . ||| - applicera modellbaserad testning på realistiska exempel .
judgement and approach : ||| värderingsförmåga och förhållningssätt :
- exemplify and describe tools used for testing software , and use them and interpret their output ; ||| - exemplifiera och beskriva verktyg som används för testning av programvara , och använda dem och tolka resultaten ;
- identify and hypothesize about sources of program failures , and reflect on how to better verify the correctness of such programs . ||| - identifiera och göra hypoteser om källor till program misslyckanden , och reflektera över hur man bättre kontrollera riktigheten av sådana program .
the students are expected to be active during the whole mini-module . ||| studenterna förväntas vara aktiva under hela minimodulen .
the exercises are both theoretical and practical in nature . ||| övningarna är både av teoretisk och praktisk slag .
to be eligible for the course the student should have a bachelor degree in software engineering , computer science or equivalent , including a completed course in programming . ||| för behörighet till kursen krävs minst en kandidatexamen i programvaruteknik , datavetenskap eller motsvarande , och en godkänd kurs i programmering .
knowledge of data structures and propositional logic is recommended . ||| kunskap om datastrukturer och satslogik rekommenderas .
initial development is only a small phase of a system's development lifecycle , typically followed by many years of system evolution . ||| initial utveckling är bara en liten fas av ett systems livscykel , vanligen följs av många år av vidareutveckling .
the purpose of this course is to familiarise the student with situations , activities , and techniques typical for software evolution , such as adding a new feature , refactoring , automating variability or testing , improving performance , re-balancing non functional requirements , and so on . ||| syftet med kursen är att den studerande blir förtrogen med situationer , aktiviteter och metoder som är typiska för vidareutveckling av mjukvara , till exempel att lägga till en ny funktion , refactoring , automatisering av variabilitet eller testning , förbättra prestanda , re-balansering icke-funktionella krav , och så vidare .
assessment consists of a series of poster sessions during the semester , and a final written report ( 1 per group ) . ||| bedömningen består av en serie av poster-tillfällen under terminen , samt en slutlig skriftlig rapport ( 1 per grupp ) .
the poster sessions are used for formative assessment , whereas the final report is used for summative assessment . ||| poster-tillfällen används för formativ bedömning , medan den slutliga rapporten används för summativ bedömning .
grades are individual and based on the content of the group's report and the individual's degree of contribution to the project as a whole . ||| betyg är individuell och baserad på innehållet i gruppens rapport och individens bidrag till projektet som helhet .
the grading scale comprises fail , ( u ) , 3 , 4 and 5 . ||| betygsskalan består av underkänd ( u ) , 3 , 4 och 5 .
for grade 3 , all knowledge goals above must be satisfied . ||| för betyg 3 , ska alla kunskapsmål ovan uppfyllas .
for grade 5 , the project as a whole , must have managed to deliver an improved software product to the product owning organisation ( typically an open source project ) , and got acceptance for the improvement . ||| för betyg 5 , måste projektet som helhet ha lyckats leverera en förbättrad programvara till den produktägande organisationen ( vanligtvis ett open source-projekt ) , och fått acceptans för den förbättring gruppen har gjort .
1. knowledge and understanding , the student is able to ||| 1. kunskap och förståelse studenten ska kunna :
* explain the notion of software product quality as defined by iso9126 . ||| förklara begreppet programvarukvalitet enligt definitionen i iso9126
* summarize state of the art in methods and tools for quality improvement , in one of the quality areas of iso9126 ( i.e. , functionality , reliability , usability , efficiency , maintainability , portability , and sub-areas of these ) . ||| sammanfatta aktuella metoder och verktyg för kvalitetsutveckling i ett av kvalitetsområdena i iso9126 ( dvs funktionalitet , tillförlitlighet , användbarhet , effektivitet , underhållbarhet , bärbarhet och delområden av dessa )
* explain the challenges associated with software evolution . ||| förklara de utmaningar som är förknippade med programvaruutveckling
2. skills and abilities , the student is able to ||| 2. färdigheter och förmågor studenten ska kunna :
* evaluate the quality of a software product using a quality model . ||| utvärdera kvaliteten av en programvara med hjälp av en kvalitetsmodell
* improve the quality of a software product in one area of software product quality . ||| förbättra kvaliteten på en programvara i ett område av programvara kvalitet
* collaborate with peers working towards different improvement goals on the same product . ||| samarbeta med kollegor som arbetar mot olika förbättringsmål på samma produkt
* interact with a product-owning organisation . ||| interagera med en produktägande organisation
3. judgement and approach , the student is able to ||| 3. värderingsförmåga och förhållningssätt studenten ska kunna :
* select an authentic software product in need for quality improvement . ||| välja en programvara i behov av kvalitetsförbättringar
* select improvement methods and techniques appropriate for a quality improvement task in at least one of the areas above . ||| välja metoder och tekniker som är lämpliga för kvalitetsförbättring i åtminstone ett av de områden som nämnts ovan
(1) a course in programming ( e.g. tda545 object-oriented programming ) , i ||| (1) en godkänd kurs i programmering ( t ex tda545 objektorienterad programmering eller motsvarande ) ,
(3a) dat231 requirements engineering , ||| (3a) dat231 kravhantering ,
(3b) dat240 model-driven software development , ||| (3b) dat240 modelldriven mjukvaruutveckling ,
(3c) dat220 advanced software architecture , ||| (3c) dat220 avancerad mjukvaruarkitektur , eller
(3d) dat260 model-based testing , or ||| (3d) dat260 modellbaserad testning .
the course is intended to give an overview of the energy-dissipation aspects of computers and computing , ranging from electronic circuits to operating systems and from battery-powered pocket devices to supercomputers and data centers . ||| kursen syftar till att ge en översikt över de aspekter av datorer som leder till energiförbrukning , allt från elektroniska kretsar till operativsystem och från batteridrivna enheter till superdatorer och datacenter .
grades will be determined based on performance on the written and oral assignments ( 40 % ) , labs ( 40 % ) , and take-home ( open-book ) exam ( 20 % ) . ||| betyg kommer att fastställas baserat på prestation på de skriftliga och muntliga uppgifterna ( 40 % ) , laborationer ( 40 % ) , och hemtentamen ( öppen bok ) ( 20 % )
the course is given in english . ||| kursen ges på engelska .
teaching is through lectures , class exercises , and laboratory sessions ( some of which we will use to work on presentation skills ) . ||| undervisningen bedrivs genom föreläsningar , övningar och laborationer ( vilka vi kommer att använda för att arbeta på presentationsteknik ) .
grades ||| betyg
the final grade is calculated based on individual grades on the three types together with their weights mentioned above . ||| slutbetyget beräknas utifrån individuella betyg på de tre typerna tillsammans med sina vikter som nämns ovan .
the course consists of a lecture series , homework assignments , oral and written presentations , and labs . ||| kursen består av en föreläsningsserie , hemuppgifter , muntliga och skriftliga presentationer och laborationer .
much of the work for this course will consist of independent reading assignments . ||| en stor del av arbetet för denna kurs kommer att bestå av oberoende instuderingsuppgifter .
students will give frequent oral presentations to demonstrate their understanding of the readings and to facilitate discussion . ||| studenterna kommer därför att ge täta muntliga presentationer dels för att visa sin förståelse av instuderingsuppgifterna och dels för att skapa diskussioner .
specific skills to be practiced range from short " elevator pitches " to longer lectures ( done within a team ) in a fun , relaxed , and collaborative setting . ||| presentationerna kommer också att leda till träning på allt från korta " elevator pitches " till längre föreläsningar ( utförda i en grupp ) i en rolig , avslappnad och samverkande omgivning .
discussions will not only focus on technology , but also on how that technology affects the world's carbon footprint and will likely impact society now and in future generations . ||| diskussionerna kommer inte bara att fokusera på teknik , men också på hur tekniken dels påverkar världens koldioxidutsläpp just nu och dels på hur den sannolikt kommer att inverka på samhället i kommande generationer .
computer architecture ( dat105 ) or equivalent is strongly recommended . ||| datorarkitektur ( dat105 ) eller motsvarande rekommenderas starkt .
students must understand how the processor pipeline and caches work and must be comfortable reading assembly language . ||| studenterna måste förstå funktionen hos en processors pipeline och cachar och måste kunna läsa assemblerkod .
the aim of the course is to introduce the principles and practice of parallel programming in a functional programming language . ||| syftet med kursen är att introducera principer och praktiska tekniker för parallell programmering i ett funktionellt programmeringsspråk .
by parallel programming , we mean programming using multiple hardware cores or processors in order to gain speed . ||| med parallell programmering menas användning av flera hårdvaruenheter ( kärnor eller processorer ) för att öka beräkningskapaciteten .
the course covers approaches to parallel functional programming in both haskell and erlang . ||| kursen belyser metoder för parallell funktionell programmering i både haskell och erlang .
it covers current research on these topics , and relies heavily on scientific papers as its source materials . ||| akutell forskning inom ämnet presenteras , och kursen använder vetenskapliga artiklar som kursmaterial .
the course covers the principles and practice of parallel programming in both haskell and erlang . ||| kursen behandlar principer och praktiska tekniker för parallell programmering i haskell och erlang .
advantages of functional approaches to parallelism : immutability , absence of data races , determinism . ||| fördelar med parallell funktionell programmering : oföränderlighet ( immutability ) , avsaknad av synkroniseringsfel , ( determinism ) .
profiling parallel functional programs : granularity , bottlenecks , locality , data-dependencies . ||| att profilera parallella funktionella program : kornighet , flaskhalsar , lokalitet , databeroenden
parallel functional algorithms : divide-and-conquer . ||| parallella funktionella algoritmer : " söndra-och-härska " .
approaches to expressing parallelism in haskell : the eval monad , the par monad , parallel strategies , skeletons , data parallelism . ||| metoder för att uttrycka parallellism i haskell : " eval-monaden " , " par-monaden " , parallella strategier , skelett och dataparallellism .
functional approaches to gpu programming . ||| funktionell gpu programmering .
parallelisation and distribution for erlang . ||| parallellisering och distribuering i erlang .
scalability . ||| skalbarhet .
handling errors in a massively parallel system . ||| felhantering i ett massivt parallellt system .
knowledge and understanding ||| kunskap och förståelse
1. distinguish between concurrency and parallelism . ||| 1. förstå betydelsen av skillnad mellan samtidighet ( concurrency ) och parallellism
2. give an overview of approaches to parallelism in functional programming languages in the scientific literature . ||| 2. kunna beskriva metoder för parallellism inom funktionella programspråk i den vetenskapliga litteraturen .
skills and abilities ||| färdigheter
1. write , modify and test parallel functional programs , to run on a variety of architectures such as shared memory multiprocessors , networks of commodity servers , and gpus . ||| 1. skriva , modifiera och testa parallella funktionella program , avsedda för olika datorsystemarkitekturer inklusive multiprocessorer med delat minne , nätverk av servrar , och grafikprocessorer ( gpu ) .
2. interpret parallelism profiles and address bottlenecks . ||| 2. tolka exekveringsprofiler av parallella program och åtgärda flaskhalsar .
judgement and approach ||| värderingsförmåga och förhållningssätt
1. identify when using a functional language may be appropriate for solving a parallel programming problem . ||| 1. identifiera under vilka omständigheter ett funktionellt språk är lämpligt för att läsa ett parallellt programmeringsproblem .
2. select an appropriate form of parallel functional programming for a given problem , and expain the choice . ||| 2. välja den form av parallell funktionell programmering som passar för ett givet problem , och förklara valet .
students complete obligatory laboratory assignments . ||| gästföreläsningar hålls av externa experter och ledande forskare .
the requirement for the course is to have successfully completed two years within the subject computer science or equivalent . ||| studenter skall ha fullföljt två års studier inom datavetenskap , datateknik eller jämförbar utbildning .
course participants must also have completed an introductory course in functional programming , preferably using haskell or erlang . ||| kursdeltagare skall ha genomgått en introduktionskurs i funktionell programmering , företrädesvis användande haskell eller erlang .
( examples at chalmers are tda452 and tda555 ) . ||| ( kursexempel på chalmers är tda452 och tda555 . )
the course also aims to give the student technical skills in the design , integration and verification of hardware and software for processor-based systems . ||| kursen ska också ge studenten tekniska färdigheter i att konstruera , integrera och verifiera hård- och mjukvara för processorbaserade system .
design and verification of a microprocessor system , which includes a microprocessor and some peripheral devices , that is developed for specific functionality and performance . ||| konstruktion och verifiering av ett mikrodatorsystem , inklusive mikroprocessor och periferienheter , som tas fram för en viss funktionalitet och viss prestanda .
methodology for project work , including planning , execution , follow up and version control . ||| metodik för projektarbete , inklusive planering , drift , uppföljning och versionshantering .
technical writing including technical documentation , minutes and final report . ||| skriftlig framställning i form av dokumentation , protokoll och slutrapport .
the course , which is run with project groups of 6-8 students , leads to individual grades ( u , 3 , 4 and 5 respectively ) . ||| kursen , som drivs på projektform i grupper om 6-8 studenter , leder till individuella betyg ( u , 3 , 4 respektive 5 ) .
the grade is based on different interacting parameters , namely the quality of project work ( planning , project effort ) , technical quality ( compliance with project plan , quality of final product ) , and quality of written communication ( disciplinary language , information structure , rhetoric , audience adapted argumentation ) . ||| betyget baseras på olika samverkande parametrar , nämligen kvalitet i projektdrift ( planering , konstruktionsarbete ) , teknisk kvalitet ( uppfyllande av plan , kvalitet hos slutprodukt ) samt kvalitet i skriftlig kommunikation ( disciplinärt språk , informationsstruktur , retorik , publikanpassad argumentation ) .
assessments are carried out for four distinct deliverables : ||| betygsgrundande bedömning sker för fyra speciella leveranser :
1) project plan , ||| 1) projektplan ,
2) opposition note on another group's draft of the final report , ||| 2) oppositionskommentar på annan grupps utkast på slutrapport ,
3) project demonstration , and ||| 3) demonstration av slutprodukt samt
4) final report . ||| 4) slutrapport .
in addition , assessments are done on several occasions during the course with respect to the project meeting management and version control . ||| dessutom sker betygsgrundande bedömning vid flera tillfällen under kursens gång med avseende på projektmöteshantering och versionshantering .
the assessments above lead to a group grade . ||| resultatet av dessa bedömningar är ett gruppbetyg .
based on each student's contribution to the project work , an individual grade , which may be higher or lower than the group grade , is established . ||| baserat på respektive students bidrag till projektgruppens arbete sätts ett individuellt betyg som kan vara högre eller lägre än gruppbetyget .
1. design , verify and demonstrate a microprocessor system that consists of a microprocessor and appropriate peripherals ( possibly also some interface electronics and a graphical user interface ) to meet specified functionality and performance . ||| 1. konstruera , verifiera och demonstrera ett mikrodatorsystem som består av en mikroprocessor och lämpliga periferienheter ( eventuellt också viss elektronik för gränssnitt och ett grafiskt gränssnitt ) för att uppfylla specificerad funktionalitet och prestanda.
2. write a c program for a microprocessor with focus on management of peripherals . ||| 2. skriva ett c-program för en mikroprocessor med fokus på hantering av periferienheter.
3. demonstrate basic skills in managing and following up a technical development project in a group of a handful of developers . ||| 3. visa basfärdigheter i att driva och följa upp ett tekniskt utvecklingsprojekt som drivs i en grupp om en handfull utvecklare.
4. with the support of the basic functions of a version control system , organizing ongoing documentation , reports , and program code . ||| 4. med stöd av grundläggande funktioner hos ett versionshanteringssystem , organisera löpande dokumentation , rapporter samt programkod.
5. write a basic project plan prior to a technical development project . ||| 5. skriva en grundläggande projektplan inför ett tekniskt utvecklingsprojekt.
6. write a project report at the conclusion of a technical development project as well as critically examine another project . ||| 6. skriva en projektrapport som avslutning på ett tekniskt utvecklingsprojekt samt kritiskt granska ytterligare ett projekt.
7. reason about choices and conclusions , their background and their consequences , in his/her own project as well as for another project . ||| 7. resonera om ställningstaganden och slutsatser , deras bakgrund och deras följder , i det egna projektet samt för ytterligare ett projekt .
initially the lectures introduce the features of the microprocessor system that facilitate technical assessments and system design choices . ||| initialt introducerar föreläsningarna den mikrodatorteknik som krävs för att göra tekniska bedömningar och val vid konstruktion av systemet .
in addition , the early lectures highlight how to run and document technical development projects , including aspects such as technical writing , group dynamics , and version control . ||| dessutom belyser de tidiga föreläsningarna hur man driver och dokumenterar tekniska utvecklingsprojekt , till exempel aspekter som rapportskrivning , gruppdynamik och versionshantering .
the project team , which is assembled by the teacher team , selects a project from a limited number of offered projects . ||| projektgruppen , som sätts samman av lärarlaget , väljer projekt från ett begränsat antal erbjudna projekt .
in connection with the project selection , a project mentor , who provides support during the project , is assigned to each project team . ||| i samband med valet tilldelas varje projektgrupp en mentor som ger stöd under projektarbetet .
during the first two study weeks , the project team is focused on assimilating technical documents and on preparing a project plan . ||| de första två läsveckorna ägnar projektgruppen sig främst åt att läsa in sig på teknisk dokumentation och åt att utarbeta en projektplan .
the system implementation work commences during study week 3 and runs , supported by weekly project meetings and continuous documentation , until the final two study weeks when the work on system verification , demonstration preparation , and final documentation is intensified . ||| konstruktionsarbetet påbörjas i läsvecka 3 och löper , med stöd av veckovisa projektgruppsmöten och kontinuerlig dokumentation , fram till de avslutande två läsveckorna då arbetet med systemverifiering , demonstrationsförberedelser och slutdokumentation intensifieras .
knowledge and understanding demonstrate knowledge in robotics , their control and/or communication systems with emphasis on hands-on experience with their construction , their programming and insights of current research and development in the area . ||| kunskap och förståelse förvärvat kunskaper inom robotik , inbyggda styrsystem och / eller kommunikationssystem med betoning på praktisk erfarenhet av konstruktion , programmering samt insikter i aktuell forskning och utveckling inom området .
skills and abilities demonstrate the ability to develop and design computer control and distributed algorithms , programs , network protocols , which are adapted to the needs and capacities of road users , and which meet the societal requirements of sustainable development in social and ecological terms . ||| färdighet och förmåga visa förmåga att utveckla och konstruera datoriserade styrsystem , distribuerade algoritmer , program och nätverksprotokoll , anpassade efter användande trafikanters behov , och som möter samhälleliga krav på hållbar utveckling i sociala och ekologiska termer .
demonstrate the ability to work in teams and to collaborate in groups with different constitutions and backgrounds . ||| visa förmåga att arbeta i team och att samarbeta i grupper med olika konstitutioner och bakgrunder .
demonstrate the ability to plan an engineering task and to report on its progress and project achievements . ||| visa förmåga att planera en ingenjörs uppgift och att rapportera om framsteg och prestationer inom projekt .
judgement and approach demonstrate the ability to plan an engineering task and give a clear account of his/her and the team achievements , and conclusions in a way that is supported both orally and in writing while addressing different engineering audiences . ||| värderingsförmåga och förhållningssätt visa förmåga att planera en ingenjörsuppgift , redogöra för individuella och gruppens prestationer , formulera slutsatser , både muntligt och skriftligt , på ett sätt som kan förstås och delas av ingenjörer med andra specialinriktningar .
lectures , project meetings , reports and project deliverables . ||| föreläsningar , projektmöten , rapporter och projektresultat .
the course includes projects that are placed at a software development company . ||| kursen innehåller projekt som är förlagt på ett mjukvaruutvecklingsföretag .
the project contains elements that test in practice the knowledge which the student has been trained in , i.e. in the area of software engineering . ||| projektet innehåller moment som testar i praktiken de kunskaper som studenten har blivit utbildad i , dvs inom området software engineering .
the student must demonstrate the ability to identify industrial problems and use advanced software engineering methods to solve the problems that have been identified . ||| studenten måste visa förmågan att identifiera industriella frågeställningar och använda avancerade software engineering metoder för att lösa de problemen som har identifierats .
the course includes the comparison of different methods to solve the problems and an analysis of differences between theoretical and practical considerations of how the methods used or should be used . ||| i kursen ingår jämförelsen mellan olika metoder för att lösa problemen samt en analys av skillnader mellan teoretiska och praktiska förutsättningar av hur metoderna används eller bör användas .
the course is assessed through a planning report and an individual written final report . ||| kursen examineras genom en individuell planeringsrapport och en individuell skriftlig slutrapport .
the planning report should describe : ||| planeringsrapporten ska beskriva :
- which company offers internship to graduate , incl .contact and written offerings from the company ||| - vilket företag erbjuder praktikplats till studenten , inkl. kontaktpersoner och skriftlig erbjudan från företaget
- project deliverables to the company ||| - projektets leverabler till företaget
- any ipr issues . ||| - ev ipr frågeställningar .
the grades for the course are fail , 3 , 4 , and 5 . ||| betygsskalan omfattar betygsgraderna u , 3 , 4 och 5
to pass the course requires the grade 3 for the planning report and the grade g for the final report . ||| för att få betyget 3 för kursen krävs betyg g på planeringsrapporten samt betyg 3 på slutrapporten .
for the grade 4 requires the grade g for the planning report and the grade 4 for the final report . ||| för att få betyget 4 för kursen krävs betyget g på planeringsrapporten samt betyg 4på slutrapporten .
for the grade 5 requires the grade g for the planning report and the grade 5 for the final report . ||| för att få betyget 5 för kursen krävs betyget g på planeringsrapporten samt betyg 5på slutrapporten .
after completing the course , students should be able to : ||| efter avslutad kurs förväntas studenten kunna:
- identify a number of software engineering techniques to solve industrial problems ||| - identifiera ett antal software engineering metoder för att lösa industriella problem
- solve the problem with one of the selected methods ||| - lösa problemet med en av utvalda metoder
- apply knowledge from courses in the field of software engineering to contribute to the development of the company ||| - tillämpa kunskapen från kurser inom området software engineering till att bidra till företagets utveckling
- select the most appropriate method given the circumstances relevant to the cooperative enterprise . ||| - välja den mest lämpliga metoden givit de förutsättningar som är relevanta för samarbetsföretaget.
- reflect on the theoretical premises of applied software engineering practices ||| - reflektera över teoretiska förutsättningar av tillämpade software engineering metoder
to be admitted to the course the student must ||| för att antas till kursen måste studenten
2) provide a planning report that clearly defines the project goals , execution , and learning goals . ||| 2) tillhandahålla en planeringsrapport som tydligt definierar projektmål , utförande samt lärandemål .
students get admitted on approval of the planning report . ||| studenten antas genom ett godkännande av planeringsrapporten .
complete the computer science curriculum with knowledge and generic skills relevant in the student's future professional roles . ||| kursens syfte är att komplettera den datatekniska / datavetenskapliga läroplanen med allmänna kunskaper som är relevanta i studenternas framtida yrkesroller .
students will ||| studenten ska
develop their scientific writing skills by studying , critically analyzing , and summarizing selected well-written scientific articles , ||| utveckla sitt vetenskapliga skrivande genom att studera , kritiskt analysera och sammanfatta utvalda , välskrivna vetenskapliga artiklar ,
train technical communication for different audiences , ||| öva på teknisk kommunikation i skrift för olika målgrupper ,
discus ethical aspects of subjects in computer science , ||| diskutera etiska frågor som rör ämnen inom datavetenskap ,
learn about ethical principles of research and publishing . ||| lära sig om forsknings- och publiceringsetik .
guidelines for the basics of technical writing . ||| riktlinjer för grunderna i tekniskt skrivande .
theories on ethics , with examples . ||| teorier om etik samt exempel .
examples showing how modern research is done and how advanced practical solutions are applied in industry . ||| exempel på hur modern forskning bedrivs såväl som på hur avancerade praktiska lösningar används i industrin .
* read and summarize scientific articles , clearly describe which technical problems are treated and what are the reasons for the choice of solutions , ||| * läsa och sammanfatta vetenskapliga artiklar , så att det klart framgår vilka tekniska problem som löses , liksom grunden för valet av lösning
* retrieve information on a certain question , identify the essential points and communicate them , ||| * söka fram information om en viss fråga , identifiera det väsentliga och förmedla det
* describe a scientific or technical topic in such a way that also non-experts can understand the most important points , ||| * beskriva or koncist sammanfatta en vetenskaplig eller teknisk frågeställning på ett sådant sätt att även icke-experter kan förstå de viktigaste punkterna
* make informed evaluations of the ethical and societal impact of a method , design or system , ||| * utvärdera etiska och samhälleliga effekter av en metod , konstruktion eller ett system ,
* apply ethical principles and good practice in scientific writing , including proper citation and use of statistics . ||| * tillämpa etiska principer i vetenskapligt skrivande , inklusive korrekt citat och korrekt användning av statistik .
knowledge equivalent to at least two years of studies in computer science . ||| kunskaper motsvarande sammanlagt minst två års studier i datatekniska och datavetenskapliga ämnen .
the course is only open to students admitted to mpalg . ||| kursen är endast öppen för studenter inskrivna på mpalg .
ensuring quality is a major challenge in software development , among other things , due to the complexity , time pressure , and cost considerations . ||| att säkerställa kvalitet är en stor utmaning inom mjukvaruutveckling bland annat pga komplexitet , tidspress , och kostnadshänsyn .
this course is aimed at students learn modern methods of quality assurance in software development , with particular focus on embedded systems and web applications . ||| denna kurs syftar till att studenterna lär sig moderna metoder för kvalitetssäkring i mjukvaruutveckling , med särskilt fokus på inbyggda system och webbapplikationer .
the course introduces the students to the modern methods for quality assurance in software development . ||| kursen introducerar studenterna till moderna metoder för kvalitetssäkring inom mjukvaruutveckling .
the content of the course consists of lectures about relevant standards ( e.g. iso/iec 9126 , iso/iec 9000 , iso/iec 25000 ) for quality assurance and standards for measurement of quality ( e.g. iso/iec 15939 ) . ||| kurser innehåller föreläsningar om relevanta standarder ( t ex iso/iec 9126 , iso/iec 9000 , iso/iec 250xx ) för kvalitetssäkring , samt standarder för mätning och visualisering av kvalitet ( t ex iso/iec 15939 ) .
the course prepares the students to work as quality engineers and quality managers in software development organizations with the focus on embedded software and web applications . ||| kursen förbereder studenter för arbete som kvalitetsingenjörer eller kvalitetschefer i mjukvaruutvecklingsorganisationer med särskilt fokus på inbyggda system och webbapplikationer .
1. report ( rapport ) , 3 higher education credits ||| rapport ( report ) , 3 hp
- the sub-course is a report based on the results of quantifying and assessing the quality of a software product . ||| - delkursen är en rapport som innehåller resultat av beräkningar av kvaliteten hos en utvald produkt .
the purpose of the sub-course is to assess students practical skills taught during the course . ||| delkursen syftar till att examinera studenternas praktiska kunskaper som ges i kursen .
2. written exam ( skriftlig salstenta ) , 4.5 higher education credits ||| 2. skriftlig salstenta ( written exam ) , 4,5 hp
- the sub-course is an individual , written hall exam with both theoretical and practical questions . ||| - delkursen består av en salstenta som innehåller både teoretiska och praktiska frågor .
the purpose of the questions is to assess the students knowledge of definitions and relevant research within the field . ||| frågorna syftar till att examinera studenternas kunskap om definitioner och relevant forskning inom området .
knowledge and understanding ||| kunskap och förståelse
- explain and discuss the importance of software quality for the modern society ||| - förklara och diskutera vilken betydelse mjukvarukvalitet har för det moderna samhället
- describe how sustainability can be seen as a quality attribute in software products ||| - beskriva hur hållbarhet kan betraktas som ett kvalitetsattribut hos mjukvaruprodukter
skills and abilities ||| färdigheter och förmåga
- construct quality models for different levels of software development organizations , e.g. teams , projects ||| - konstruera kvalitetsmodeller för olika nivåer av mjukvaruutvecklingsorganisationer , t ex team , projekt
- construct quality assurance plans ; collect data to quantify and assess the quality of software products ( e.g. based on the existing open source products ) ||| - konstruera kvalitetssäkringsplaner ; samla data för att kvantifiera och bedöma kvaliteten av mjukvaruprodukter ( t ex baserat på existerande " open source " - program )
- construct automated measurement systems for measuring quality of software products based on the data from the modern development tools ( e.g. bugzilla ) ||| - konstruera automatiserade system för att mäta kvalitet av mjukvaruprodukter baserat på data från moderna utvecklingsverktyg ( t ex git , bugzilla )
- use modern tools for visualization of trends in software quality ( e.g. defect inflow profile ) ||| - använda moderna verktyg för visualisering av trender av mjukvarukvaliten ( t ex trender av antalet defekter )
judgement and approach ||| värderingsförmåga och förhållningssätt
- assess the importance of software quality in relation to time and costs in modern software development projects ||| - värdera vikten av mjukvarukvalité i relation till tids- och kostnadsbild för moderna mjukvaruprojekt
- relate software quality to societal aspects of software development ( e.g. how human lives are influenced by low quality software in cars ) ||| - relatera mjukvarukvalitet till samhällsliga aspekter av mjukvarutveckling ( t ex hur människoliv påverkas av den dåliga kvaliteten på mjukvara i moderna bilar )
- assess the risks of erroneous quality assurance processes in modern software development companies ||| - bedöma riskerna med bristfälliga kvalitetssäkringsprocesser i modern mjukvaruutveckling
to be eligible for this course the student should ||| för behörighet till kursen krävs minst en kandidatexamen inom software engineering , informationsteknik , programvaruteknik , datavetenskap eller motsvarande , inklusive en godkänd kurs i programmering .
2) a completed course in practical software development or software engineering project ( e.g. dat255 software engineering project ) . ||| ( t.ex. tda548 grundläggande programvaruutveckling eller motsvarande ) samt en godkänd kurs i ett praktiskt projekt inom systemutveckling eller mjukvaruutveckling ( t.ex. dat255 software engineering project )
the lecture topics are : ||| föreläsningarna kommer att behandla :
introduction to functional programming and calculational proofs ||| introduktion till funktionell programmering , programkalkyl och bevis
introduction to domain specific languages ( dsls ) : case study linear algebra ||| introduktion till domänspecifika språk ( dsl ) med linjär algebra som exempel
dsls and mathematics : case study category theory ||| dsl och matematik : kategoriteori som exempel
real analysis : mean value theorems , taylor formulas ||| reell analys : medelvärdessatser , taylors formuler
real analysis : a dsl for power series ||| reell analys : ett dsl för potensserier
more linear algebra : eigenvalues and optimization ||| mer linjär algebra : egenvärden och optimering
knowledge and understanding ||| kunskap och förståelse
design and implement a dsl ( domain specific language ) for a new domain ||| designa och implementera ett domänspecifikt språk ( dsl ) för en ny domän
organize areas of mathematics in dsl terms ||| strukturera delområden inom matematik i termer av dsl
explain main concepts of elementary real and complex analysis , algebra , and linear algebra ||| förklara de centrala begreppen i grudläggande reell och complex anays , algebra och linjör algebra
skills and abilities ||| färdighet och förmåga
develop adequate notation for mathematical concepts ||| utveckla lämplig notation för matematiska koncept
perform calculational proofs ||| genomföra och kalkylera bevis
use power series for solving differential equations ||| använda potensserier för att lösa differentialekvationer
use laplace transforms for solving differential equations ||| använda laplace-transformer för att lösa differentialekvationer
judgement and approach ||| värderingsförmåga och förhållningssätt
discuss and compare different software implementations of mathematical concepts ||| diskutera och jämföra olika implementationer av matematiska begrepp
the student should have successfully completed ||| studenten ska ha klarat
two courses in computer science , for example ( introduction to programming or mathematical software ) and object oriented programming ||| två kurser i datateknik ( exemeplvis två kurser i programmering )
an additional three courses ( 22.5 hec ) of any mathematics or computer science courses . ||| ytterligare tre kurser ( 22.5hp ) inom matematik , data eller it
the course will present classical mathematical topics from a computing science perspective : ||| kursen presenterar klassiska matematiska ämnen från ett datavetenskaligt perspektiv :
the lecture topics are : ||| föreläsningarna kommer att behandla :
introduction to functional programming and calculational proofs ||| introduktion till funktionell programmering , programkalkyl och bevis
introduction to domain specific languages ( dsls ) : case study linear algebra ||| introduktion till domänspecifika språk ( dsl ) med linjär algebra som exempel
dsls and mathematics : case study category theory ||| dsl och matematik : kategoriteori som exempel
real analysis : mean value theorems , taylor formulas ||| reell analys : medelvärdessatser , taylors formuler
real analysis : a dsl for power series ||| reell analys : ett dsl för potensserier
more linear algebra : eigenvalues and optimization ||| mer linjär algebra : egenvärden och optimering
knowledge and understanding ||| kunskap och förståelse
design and implement a dsl ( domain specific language ) for a new domain ||| designa och implementera ett domänspecifikt språk ( dsl ) för en ny domän
organize areas of mathematics in dsl terms ||| strukturera delområden inom matematik i termer av dsl
explain main concepts of elementary real and complex analysis , algebra , and linear algebra ||| förklara de centrala begreppen i grudläggande reell och complex anays , algebra och linjör algebra
skills and abilities ||| färdighet och förmåga
develop adequate notation for mathematical concepts ||| utveckla lämplig notation för matematiska koncept
perform calculational proofs ||| genomföra och kalkylera bevis
use power series for solving differential equations ||| använda potensserier för att lösa differentialekvationer
use laplace transforms for solving differential equations ||| använda laplace-transformer för att lösa differentialekvationer
judgement and approach ||| värderingsförmåga och förhållningssätt
discuss and compare different software implementations of mathematical concepts ||| diskutera och jämföra olika implementationer av matematiska begrepp
the student should have successfully completed ||| studenten ska ha klarat
two courses in computer science , for example ( introduction to programming or mathematical software ) and object oriented programming ||| två kurser i datateknik ( exemeplvis två kurser i programmering )
an additional three courses ( 22.5 hec ) of any mathematics or computer science courses . ||| ytterligare tre kurser ( 22.5hp ) inom matematik , data eller it
the bachelor thesis also aims to develop skills in application of engineering problem solving and research methods . ||| kandidatarbetet syftar också till att ge kunskaper och färdigheter i ingenjörsmässigt och vetenskapligt arbetssätt .
the main part of the bachelor thesis is a project . ||| kandidatarbetets huvuddel utgörs av ett projektarbete .
the written thesis report should follow established standards for scientific and technical reports . ||| kandidatarbetet redovisas skriftligt enligt gällande normer för vetenskaplig och teknisk rapportering samt presenteras muntligt och försvaras vid ett seminarium .
the report may consist of an independently authored report , or an identifiable part of a joint report . ||| den skriftliga delen kan bestå av en självständigt författad uppsats / rapport , omfattande hela kandidatarbetet , eller en tydligt identifierbar del av en gemensam uppsats / rapport .
formulate and delimit a complex problem ||| formulera och avgränsa en problemställning inom det valda ämnet
integrate and develop knowledge relevant for the formulated problem ||| integrera och utveckla kunskap inom den valda problemställningen
critically evaluate another project with respect to problem , approach and results ||| kritiskt granska , värdera och konstruktivt ifrågasätta ett annat kandidatarbete avseende frågeställning , genomförande och resultat
only credits registered in ladok after the exam period 1 in study year 3 will be taken into consideration . ||| avstämning sker efter att läsperiod 1 i årskurs 3 har inrapporterats till ladok .
the purpose of a thesis is to enable the student to develop deeper knowledge , understanding , capabilities and attitudes in the context of the programme of study . ||| examensarbetet syftar till att studenten skall utveckla fördjupade kunskaper , förståelse , förmågor och förhållningssätt inom utbildningens sammanhang .
the thesis should be written at the end of the programme and offers the opportunity to delve more deeply into and synthesise knowledge acquired in previous studies . ||| examensarbetet skall ligga i slutet av utbildningen och innebära en fördjupning och syntes av tidigare förvärvade kunskaper .
a thesis for a master of science in engineering/master of architecture or master of science programmes should place emphasis on the technical/scientific/artistic aspects of the subject matter ||| i examensarbetet på ett civilingenjörs- / arkitekt eller teknologie masterprogram betonas det tekniska / naturvetenskapliga / konstnärliga innehållet .
for a thesis to be approved , the following stages must be completed : ||| för att examensarbetet skall godkännas krävs att följande delmoment genomförts :
an approved planning report ||| godkänd planeringsrapport
an approved thesis ||| godkänd rapport
an approved presentation and defense of the thesis ||| godkänd presentation och försvar vid examensarbetsredovisningen
approved opposition of another thesis ||| godkänd opposition på ett annat masterexamensarbete
attendance of the presentation and defense of two other theses ||| närvaro vid två andra examensarbetsredovisningar
for a 60 hec thesis , an interim report must be submitted when the work has reached the halfway point . ||| för examensarbeten omfattande 60 hp skall en delredovisning göras efter halva tiden .
the examiner will decide on the form for the interim report . ||| examinator beslutar om form för delredovisning .
when the interim report has been approved , 30 hec will be registered in ladok . ||| godkänd delredovisning leder till att 30 hp inrapporteras i ladok .
the learning objectives for a thesis are based on the objectives for master of science in engineering / architecture / master of science degrees formulated in chalmers ' local master's degree procedures . ||| lärandemålen för masterexamensarbetet utgår från de mål för civilingenjörs- , arkitekt- respektive teknologie masterexamen som formulerats i chalmers lokala examensordning .
( diarienummer : c2007/723 ) . ||| ( dnr c2007 / 723 ) .
specific learning objectives that are to be fulfilled in the master's thesis are that the student should be able to : ||| specifika lärandemål som ska fullföljas i masterexamensarbetet är att studenten skall kunna :
in their project use essential in-depth knowledge of the major subject / field of study and , in a scientifically correct way , relate to current research and development work ; ||| använda väsentligt fördjupade kunskaper inom huvudområdet / inriktningen för utbildningen i sitt projekt och på ett vetenskapligt korrekt sätt relatera till aktuellt forsknings- och utvecklingsarbete ,
choose and state one's reasons for selecting their project method with respect to the major subject / field of study ; ||| välja och motivera sitt val av metod i projektet , inom huvudområdet / inriktningen för utbildningen ,
contribute to research and development work , and be able to relate their work to relevant scientific or technical / industrial / architectonic contexts ; ||| bidra till forsknings- och utvecklingsarbete , och kunna relatera sitt arbete till relevant vetenskapligt respektive tekniskt / industriellt / arkitektoniskt sammanhang .
based on a holistic view , critically , independently and creatively identify , formulate and deal with complex issues ; ||| med helhetssyn kritiskt , självständigt och kreativt identifiera , formulera och hantera komplexa frågeställningar ,
plan and , with adequate methods , carry out qualified tasks within the designated framework and also be able to evaluate this work ; ||| planera och med adekvata metoder genomföra kvalificerade uppgifter inom givna ramar , samt kunna utvärdera detta arbete ,
create , analyse and critically evaluate different technical / architectonic solutions ; ||| skapa , analysera och kritiskt utvärdera olika tekniska / arkitektoniska lösningar ,
critically and systematically integrate knowledge ; ||| kritiskt och systematiskt integrera kunskap ,
present and discuss their conclusions as well as the knowledge and arguments these are based upon both in spoken and written english ; ||| på engelska muntligt och skriftligt klart redogöra för och diskutera sina slutsatser , samt den kunskap och de argument som ligger till grund för dessa ,
within the framework for the specific project , identify which issues need to be addressed for relevant societal , ethical and ecological factors to be observed , and ||| inom ramen för det specifika projektet identifiera vilka frågeställningar som behöver besvaras för att relevanta samhälleliga , etiska och ekologiska aspekter skall beaktas , samt
observe and discuss ethical aspects of research and development work , both pertaining to how the work is carried out as well as what it explores/develops ; ||| beakta och diskutera etiska aspekter på forsknings- och utvecklingsarbete , såväl vad avser hur arbetet genomförs , som vad som undersöks / utvecklas .
identify and discuss needs for further elucidation of different project aspects before decision-making or project realisation , when relevant ||| identifiera och diskutera behov av ytterligare belysning av olika aspekter av projektet före beslut eller genomförande , där så är relevant .
upon completion of the degree work , the student shall have demonstrated such knowledge and ability as are required to work independently as a master of architecture / master of science in engineering / master of science . ||| vid genomfört examensarbete ska studenten ha visat sådan kunskap och förmåga som krävs för att självständigt arbeta som arkitekt / civilingenjör / teknologie master
initiation ||| initiering
the thesis is to be written by a single student or two students working together . ||| examensarbetet kan genomföras av en student eller två studenter tillsammans .
this description must be included with the registration documentation . ||| denna beskrivning skall bifogas registreringsunderlaget .
the description should contain the background , purpose , objective and possibly the method . ||| beskrivningen bör innehålla bakgrund , syfte , mål och eventuellt metod .
the examiner will ensure that the students meet the requirements for general and specific prerequisites for the thesis and that the proposed topic for the thesis meets the general intended learning outcomes for theses . ||| examinator kontrollerar att studenterna uppfyller de generella och specifika förkunskapskraven för examensarbete , och att det föreslagna examensarbetet motsvarar lärandemålen för examensarbete .
the examiner signs the registration documentation . ||| examinator signerar registreringsunderlaget .
the mpa ensures that the thesis falls within the main subject of the master's programme and signs the registration documentation . ||| masterprogramansvarig kontrollerar att examensarbetet faller inom masterprogrammets huvudområde och signerar registreringsunderlaget .
the mpa sends the registration documentation to the student and education office . ||| mpa skickar in registreringsunderlaget till studentcentrum .
the student and education office completes the registration in ladok . ||| studentcentrum genomför registrering i ladok .
planning ||| planering
the students must write a planning report providing a detailed description of the problem/task . ||| studenterna skall skriva en planeringsrapport som skall precisera problembeskrivningen / uppgiften .
the planning report must contain the background , purpose , objective , scope , method and timetable for completion of the thesis . ||| planeringsrapporten skall innehålla bakgrund , syfte , mål , avgränsningar , metod och tidsplan för examensarbetets genomförande .
the planning report is submitted to the examiner for approval . ||| planeringsrapporten lämnas till examinator för godkännande .
supervision ||| handledning
the students are entitled to guidance during the course of their work . ||| under arbetets gång har studenten / erna rätt till regelbunden handledning .
interim reporting ||| delredovisning
after twenty working weeks on a 60 hec thesis , the student ( s ) must report the status of their work to the examiner and the mpa . ||| för 60 hp examensarbeten skall studenten / studenterna efter tjugo arbetsveckor avrapportera arbetets status till examinator och masterprogramansvarig ( mpa ) .
an approved interim report results in 30 hec being registered in ladok . ||| godkänd delredovisning innebär att 30 hp inrapporteras i ladok .
written report ||| skriftlig redovisning
the thesis must be written in english . ||| examensarbetsrapporten skall skrivas på engelska .
the cover , etc. , of the thesis must be formulated according to the instruction and templates at " design and publish master thesis " at chalmers . ||| utformning av examensarbetets framsida mm skall ske enligt mall " utformning av examensarbete " vid chalmers .
see https://student.portal.chalmers.se/en/chalmersstudies/masters-thesis/pages/design-and-publish-masters-thesis.aspx . ||| se https://student.portal.chalmers.se/sv/chalmersstudier/kandidat-och-examensarbete/examensarbete/sidor/utformning-rapporter-exjobb-kand.aspx .
the thesis must be parsed using anti-plagiarism software . ||| examensarbetsrapporten skall kontrolleras mot ett plagiatverktyg .
chalmers ' policies regarding open access and confidentiality apply to the work on the thesis and to publishing the report . ||| chalmers policyer för offentlighet och sekretess gäller för examensarbetets genomförande samt för publicering av rapporten .
see chalmers ' working procedure c2008/271 . ||| se chalmers arbetsordning : c2008 / 271 .
the thesis must be published electronically in chalmers publication library ( cpl ) according to the applicable rules for electronic publication of theses at chalmers . ||| examensarbetsrapporten skall publiceras elektroniskt i chalmers publication library ( cpl ) enligt de regler som gäller för elektronisk publicering av examensarbeten vid chalmers .
when two students work jointly on a thesis , the division of the work must be clearly stated in the thesis . ||| när två studenter utför examensarbetet tillsammans skall arbetsfördelningen tydligt framgå av examensarbetsrapporten .
oral presentation ||| muntlig redovisning
the oral presentation begins with the students describing their work . ||| den muntliga redovisningen inleds med att studenterna presenterar sitt arbete .
the oral presentation must be made in english . ||| den muntliga presentationen skall utföras på engelska .
at the time of the oral presentation , the written thesis must be completed but not published . ||| vid tidpunkten för den muntliga redovisningen skall rapporten vara färdigskriven , men ej publicerad .
this is to make it possible to include viewpoints that arise during the oral presentation to be incorporated into the thesis . ||| detta för att medge att synpunkter som framkommer vid redovisningen inarbetas i rapporten .
the oral presentation , including a defense of the thesis , must be done at chalmers . ||| muntlig redovisning inklusive opposition skall genomföras på chalmers .
any additional presentations can be made at a company or other external organisation , if necessary . ||| ytterligare redovisning kan vid behov genomföras på företag .
in exceptional cases , for example , if thesis research has been conducted abroad , the examiner may grant a dispensation from the requirement for an oral presentation , defense of the findings in the thesis and presence at other presentations at chalmers . ||| i undantagsfall , till exempel då examensarbetet genomförts utomlands , kan examinator medge undantag från kravet på muntlig redovisning , opposition och närvaro på andra redovisningar vid chalmers .
the presentation of the thesis must be announced at the department at least two weeks prior to the date of the presentation . ||| presentationen av examensarbetet skall annonseras vid den aktuella institutionen minst två veckor före presentationsdatum .
the presentation must be held in the period between august 15 and june 15 , during normal office hours . ||| presentationen skall ske inom perioden 15 augusti till 15 juni , under normal arbetstid .
students pursuing the five-year master of science in engineering / master of architecture education must have accrued at least 225 hec before beginning work on a thesis . ||| studenter i de femåriga civilingenjörs- och arkitektutbildningarna skall ha uppnått minst 225 hp innan examensarbetet påbörjas .
students who are only taking part in the master's programme must have accrued at least 45 hec in this programme before beginning work on a thesis . ||| studenter som enbart läser ett masterprogram skall ha uppnått minst 45 hp inom masterprogrammet innan examensarbetet påbörjas .
in addition to the general credit requirements , the necessary prerequisite courses must be completed for the specific thesis . ||| förutom de generella poängkraven skall för det specifika examensarbetets genomförande nödvändiga förkunskapsgrundande kurser vara avklarade .
the examiner will formulate and monitor these prerequisite requirements . ||| examinator formulerar och kontrollerar sådana förkunskapskrav .
the purpose of a thesis is to enable the student to develop deeper knowledge , understanding , capabilities and attitudes in the context of the programme of study . ||| examensarbetet syftar till att studenten skall utveckla fördjupade kunskaper , förståelse , förmågor och förhållningssätt inom utbildningens sammanhang .
the thesis should be written at the end of the programme and offers the opportunity to delve more deeply into and synthesise knowledge acquired in previous studies . ||| examensarbetet skall ligga i slutet av utbildningen och innebära en fördjupning och syntes av tidigare förvärvade kunskaper .
a thesis for a master of science in engineering/master of architecture or master of science programmes should place emphasis on the technical/scientific/artistic aspects of the subject matter ||| i examensarbetet på ett civilingenjörs- / arkitekt eller teknologie masterprogram betonas det tekniska / naturvetenskapliga / konstnärliga innehållet .
for a thesis to be approved , the following stages must be completed : ||| för att examensarbetet skall godkännas krävs att följande delmoment genomförts :
an approved planning report ||| godkänd planeringsrapport
an approved thesis ||| godkänd rapport
an approved presentation and defense of the thesis ||| godkänd presentation och försvar vid examensarbetsredovisningen
approved opposition of another thesis ||| godkänd opposition på ett annat masterexamensarbete
attendance of the presentation and defense of two other theses ||| närvaro vid två andra examensarbetsredovisningar
for a 60 hec thesis , an interim report must be submitted when the work has reached the halfway point . ||| för examensarbeten omfattande 60 hp skall en delredovisning göras efter halva tiden .
the examiner will decide on the form for the interim report . ||| examinator beslutar om form för delredovisning .
when the interim report has been approved , 30 hec will be registered in ladok . ||| godkänd delredovisning leder till att 30 hp inrapporteras i ladok .
the learning objectives for a thesis are based on the objectives for master of science in engineering / architecture / master of science degrees formulated in chalmers ' local master's degree procedures . ||| lärandemålen för masterexamensarbetet utgår från de mål för civilingenjörs- , arkitekt- respektive teknologie masterexamen som formulerats i chalmers lokala examensordning .
( diarienummer : c2007/723 ) . ||| ( dnr c2007 / 723 ) .
specific learning objectives that are to be fulfilled in the master's thesis are that the student should be able to : ||| specifika lärandemål som ska fullföljas i masterexamensarbetet är att studenten skall kunna :
in their project use essential in-depth knowledge of the major subject / field of study and , in a scientifically correct way , relate to current research and development work ; ||| använda väsentligt fördjupade kunskaper inom huvudområdet / inriktningen för utbildningen i sitt projekt och på ett vetenskapligt korrekt sätt relatera till aktuellt forsknings- och utvecklingsarbete ,
choose and state one's reasons for selecting their project method with respect to the major subject / field of study ; ||| välja och motivera sitt val av metod i projektet , inom huvudområdet / inriktningen för utbildningen ,
contribute to research and development work , and be able to relate their work to relevant scientific or technical / industrial / architectonic contexts ; ||| bidra till forsknings- och utvecklingsarbete , och kunna relatera sitt arbete till relevant vetenskapligt respektive tekniskt / industriellt / arkitektoniskt sammanhang .
based on a holistic view , critically , independently and creatively identify , formulate and deal with complex issues ; ||| med helhetssyn kritiskt , självständigt och kreativt identifiera , formulera och hantera komplexa frågeställningar ,
plan and , with adequate methods , carry out qualified tasks within the designated framework and also be able to evaluate this work ; ||| planera och med adekvata metoder genomföra kvalificerade uppgifter inom givna ramar , samt kunna utvärdera detta arbete ,
create , analyse and critically evaluate different technical/architectonic solutions ; ||| skapa , analysera och kritiskt utvärdera olika tekniska / arkitektoniska lösningar ,
critically and systematically integrate knowledge ; ||| kritiskt och systematiskt integrera kunskap ,
present and discuss their conclusions as well as the knowledge and arguments these are based upon both in spoken and written english ; ||| på engelska muntligt och skriftligt klart redogöra för och diskutera sina slutsatser , samt den kunskap och de argument som ligger till grund för dessa ,
within the framework for the specific project , identify which issues need to be addressed for relevant societal , ethical and ecological factors to be observed , and ||| inom ramen för det specifika projektet identifiera vilka frågeställningar som behöver besvaras för att relevanta samhälleliga , etiska och ekologiska aspekter skall beaktas , samt
observe and discuss ethical aspects of research and development work , both pertaining to how the work is carried out as well as what it explores/develops ; ||| beakta och diskutera etiska aspekter på forsknings- och utvecklingsarbete , såväl vad avser hur arbetet genomförs , som vad som undersöks / utvecklas .
identify and discuss needs for further elucidation of different project aspects before decision-making or project realisation , when relevant ||| identifiera och diskutera behov av ytterligare belysning av olika aspekter av projektet före beslut eller genomförande , där så är relevant .
upon completion of the degree work , the student shall have demonstrated such knowledge and ability as are required to work independently as a master of architecture / master of science in engineering / master of science . ||| vid genomfört examensarbete ska studenten ha visat sådan kunskap och förmåga som krävs för att självständigt arbeta som arkitekt / civilingenjör / teknologie master
initiation ||| initiering
the thesis is to be written by a single student or two students working together . ||| examensarbetet kan genomföras av en student eller två studenter tillsammans .
this description must be included with the registration documentation . ||| denna beskrivning skall bifogas registreringsunderlaget .
the description should contain the background , purpose , objective and possibly the method . ||| beskrivningen bör innehålla bakgrund , syfte , mål och eventuellt metod .
the examiner will ensure that the students meet the requirements for general and specific prerequisites for the thesis and that the proposed topic for the thesis meets the general intended learning outcomes for theses . ||| examinator kontrollerar att studenterna uppfyller de generella och specifika förkunskapskraven för examensarbete , och att det föreslagna examensarbetet motsvarar lärandemålen för examensarbete .
the examiner signs the registration documentation . ||| examinator signerar registreringsunderlaget .
the mpa ensures that the thesis falls within the main subject of the master's programme and signs the registration documentation . ||| masterprogramansvarig kontrollerar att examensarbetet faller inom masterprogrammets huvudområde och signerar registreringsunderlaget .
the mpa sends the registration documentation to the student and education office . ||| mpa skickar in registreringsunderlaget till studentcentrum .
the student and education office completes the registration in ladok . ||| studentcentrum genomför registrering i ladok .
planning ||| planering
the students must write a planning report providing a detailed description of the problem/task . ||| studenterna skall skriva en planeringsrapport som skall precisera problembeskrivningen / uppgiften .
the planning report must contain the background , purpose , objective , scope , method and timetable for completion of the thesis . ||| planeringsrapporten skall innehålla bakgrund , syfte , mål , avgränsningar , metod och tidsplan för examensarbetets genomförande .
the planning report is submitted to the examiner for approval . ||| planeringsrapporten lämnas till examinator för godkännande .
supervision ||| handledning
the students are entitled to guidance during the course of their work . ||| under arbetets gång har studenten / erna rätt till regelbunden handledning .
interim reporting ||| delredovisning
after twenty working weeks on a 60 hec thesis , the student ( s ) must report the status of their work to the examiner and the mpa . ||| för 60 hp examensarbeten skall studenten / studenterna efter tjugo arbetsveckor avrapportera arbetets status till examinator och masterprogramansvarig ( mpa ) .
an approved interim report results in 30 hec being registered in ladok . ||| godkänd delredovisning innebär att 30 hp inrapporteras i ladok .
written report ||| skriftlig redovisning
the thesis must be written in english . ||| examensarbetsrapporten skall skrivas på engelska .
the cover , etc. , of the thesis must be formulated according to the instruction and templates at " design and publish master thesis " at chalmers . ||| utformning av examensarbetets framsida mm skall ske enligt mall " utformning av examensarbete " vid chalmers .
see https://student.portal.chalmers.se/en/chalmersstudies/masters-thesis/pages/design-and-publish-masters-thesis.aspx . ||| se https://student.portal.chalmers.se/sv/chalmersstudier/kandidat-och-examensarbete/examensarbete/sidor/utformning-rapporter-exjobb-kand.aspx .
the thesis must be parsed using anti-plagiarism software . ||| examensarbetsrapporten skall kontrolleras mot ett plagiatverktyg .
chalmers ' policies regarding open access and confidentiality apply to the work on the thesis and to publishing the report . ||| chalmers policyer för offentlighet och sekretess gäller för examensarbetets genomförande samt för publicering av rapporten .
see chalmers ' working procedure c2008/271 . ||| se chalmers arbetsordning : c2008 / 271 .
the thesis must be published electronically in chalmers publication library ( cpl ) according to the applicable rules for electronic publication of theses at chalmers . ||| examensarbetsrapporten skall publiceras elektroniskt i chalmers publication library ( cpl ) enligt de regler som gäller för elektronisk publicering av examensarbeten vid chalmers .
when two students work jointly on a thesis , the division of the work must be clearly stated in the thesis . ||| när två studenter utför examensarbetet tillsammans skall arbetsfördelningen tydligt framgå av examensarbetsrapporten .
oral presentation ||| muntlig redovisning
the oral presentation begins with the students describing their work . ||| den muntliga redovisningen inleds med att studenterna presenterar sitt arbete .
the oral presentation must be made in english . ||| den muntliga presentationen skall utföras på engelska .
at the time of the oral presentation , the written thesis must be completed but not published . ||| vid tidpunkten för den muntliga redovisningen skall rapporten vara färdigskriven , men ej publicerad .
this is to make it possible to include viewpoints that arise during the oral presentation to be incorporated into the thesis . ||| detta för att medge att synpunkter som framkommer vid redovisningen inarbetas i rapporten .
the oral presentation , including a defense of the thesis , must be done at chalmers . ||| muntlig redovisning inklusive opposition skall genomföras på chalmers .
any additional presentations can be made at a company or other external organisation , if necessary . ||| ytterligare redovisning kan vid behov genomföras på företag .
in exceptional cases , for example , if thesis research has been conducted abroad , the examiner may grant a dispensation from the requirement for an oral presentation , defense of the findings in the thesis and presence at other presentations at chalmers . ||| i undantagsfall , till exempel då examensarbetet genomförts utomlands , kan examinator medge undantag från kravet på muntlig redovisning , opposition och närvaro på andra redovisningar vid chalmers .
the presentation of the thesis must be announced at the department at least two weeks prior to the date of the presentation . ||| presentationen av examensarbetet skall annonseras vid den aktuella institutionen minst två veckor före presentationsdatum .
the presentation must be held in the period between august 15 and june 15 , during normal office hours . ||| presentationen skall ske inom perioden 15 augusti till 15 juni , under normal arbetstid .
students pursuing the five-year master of science in engineering/master of architecture education must have accrued at least 225 hec before beginning work on a thesis . ||| studenter i de femåriga civilingenjörs- och arkitektutbildningarna skall ha uppnått minst 225 hp innan examensarbetet påbörjas .
students who are only taking part in the master's programme must have accrued at least 45 hec in this programme before beginning work on a thesis . ||| studenter som enbart läser ett masterprogram skall ha uppnått minst 45 hp inom masterprogrammet innan examensarbetet påbörjas .
in addition to the general credit requirements , the necessary prerequisite courses must be completed for the specific thesis . ||| förutom de generella poängkraven skall för det specifika examensarbetets genomförande nödvändiga förkunskapsgrundande kurser vara avklarade .
the examiner will formulate and monitor these prerequisite requirements . ||| examinator formulerar och kontrollerar sådana förkunskapskrav .
operating systems exist everywhere where computer systems exist , not just in desktops and servers but also in vehicles , phones and embedded industrial systems . ||| operativsystem finns överallt där datorsystem finns ; inte bara i stationära datorer och servrar utan också i fordon , telefoner och inbyggda industriella system .
this course provides an introduction to the design and implementation of operating systems . ||| kursen ger en introduktion till design och implementering av operativsystem .
the course provides an introduction to the design and implementation of operating systems . ||| kursen ger en introduktion till design och implementering av operativsystem .
topics covered include : concurrent processes , resource management , deadlocks , memory management techniques , virtual memory , processor scheduling , disk scheduling , file systems , distributed file systems and micro kernels , virtual machines and security and protection schemes . ||| exempel på avsnitt som behandlas är : processbegreppet , parallella processer , resurshantering , hantering av låsningssituationer ( deadlock ) , hantering av primärminne , virtuellt minne , cpu schemaläggning , skivminnen , filsystem , distribuerade filsystem och mikrokärnor , virtual machines , säkerhet- och skyddsmekanismer .
during its development , the course does not only present key components of operating systems , but also discusses their design and implementation challenge and their evolution from pioneer to modern mobile-based ones . ||| kursen presenterar viktiga komponenter i operativsystem , och kompletterar denna diskussion med hur deras slutliga utformning och implementering utvecklades från historiska till moderna mobila os .
examples include unix , linux , windows , mobile-devices operating systems . ||| de olika begreppen illustreras med exempel från unix , linux , windows och operativsystem for mobila apparater .
written examination . ||| genomförande av laboration och skriftlig tentamen .
after successful completion of the course participants will be able to demonstrate knowledge and understanding of : ||| efter kursen skall studenterna kunna visa att de har kunskaper om och förståelse för :
3. implementation of simple os components . ||| 3. implementeringen av enklare delar av ett operativsystem
4. the participants will also be able to : ||| studenterna skall också kunna :
* implement a piece of system-level code in the c programming language . ||| * implementera någon enklare rutin i ett operativsystem i programspråket c .
lectures , exercises and labs . ||| undervisningen bedrivs i from av föreläsningar , lektionsövningar och laborationer .
pintos is among the international well-established platforms for top quality hands-on labs . ||| pintos är internationellt renommerat som en väletablerad plattform av högsta kvalité för praktiskt labbande för operativsystem .
the student should have good understanding of computer organization and basic knowledge in low level programming and be familiar with terms like assembler , interrupt and so on , i.e. contents of the course machine oriented programming . ||| studenten skall ha god förståelse av en dators konstruktion och grundläggande kunskaper i maskinnära programmering samt ha kännedom om begrepp som assembler och avbrott etc , dvs innehållet i någon kurs i maskinorienterad programmering .
the student needs to also have knowledge on data structures e.g. trees , linked lists , hash tables , i.e. contents of the course `` data structures '' , as well as some programming skills ( at least 7.5 course points in programming ) . ||| studenten behöver också ha kunskaper om datastrukturer t ex träd , länkade listor , hashtabeller , dvs innehållet i en kurs i datastrukturer samt programmeringskunskaper ( minst 7,5 kurspoäng i dataprogrammering ) .
knowledge of basic probability theory can be an advantage , but can also be acquired during the course via complementary reading . ||| kunskap om grundläggande sannolikhetslära kan vara en fördel , men kan också inhämtas parallellt med denna kurs .
the course deals with design and analysis of fault-tolerant computer systems . ||| kursen behandlar konstruktion och analys av feltoleranta datorsystem .
the content can be divided into five areas : ||| innehållet kan delas in i fem delområden :
terminology and definitions : includes terms such as dependability , reliability , maintainability , availability and safety , taxonomies for dependable systems , fault and failure models , etc. . ||| terminologi och definitioner : omfattar termer som pålitlighet , tillförlitlighet , funktionssannolikhet , underhållsgodhet , tillgänglighet och säkerhet .
design techniques for error detection and fault tolerance . ||| vidare behandlas taxonomier för feltoleranta system och modeller för fel och felyttringar .
hardware redundancy : triple modular redundancy ( tmr ) , dual modular redundancy ( dmr ) , hot and cold standby systems , hybrid redundancy , forward and backward recovery , etc. . ||| konstruktionsmetoder för feldetektering och feltolerans : maskinvaruredundans : trippelmodulär redundans ( tmr ) , dubbelmodulär redundans ( dmr ) , aktiv redundans , varmt och kallt beredskapssystem , hybridredundans , m.m. programvaruredundans : n-versionsprogrammering , recovery blocks .
time redundancy : methods for detecting and tolerating transient faults . ||| tidsredundans : metoder för detektering av transienta fel .
fault-tolerance in distributed systems : time-triggered systems , byzantine failures . ||| feltolerans i distribuerade system : tidsstyrda system , byzantinska fel .
dependability analysis of computer systems : reliability block diagrams , fault-trees , markov chain models , failure mode and effects analysis ( fmea ) , fault tree analysis ( fta ) , etc. . ||| analys av feltoleranta datorsystem : tillförlitlighetsblockschema , felträd , markovkedjemodeller , felmodsanalys ( fmea ) , felträdsanalys ( fta ) , stokastiska petrinät .
includes two laboratory classes in which markov chain models and stochastic petri nets are used to analyze fault-tolerant systems . ||| två laborationer ingår där feltoleranta datorsystem analyseras med markovkedjemodeller och stokastiska petrinät ..
the analysis is done using a special computer program . ||| beräkningarna görs med ett speciellt datorprogram .
students are required to document the results of one laboratory class in a technical report . ||| resultaten från en av laborationerna skall dokumenteras i en teknisk rapport .
written exam . ||| skriftlig tentamen .
compulsary participation in two laboratory classes . ||| obligatoriskt deltagande i två laborationer .
* formulate dependability requirements for computer systems used in business - , safety - and mission-critical applications . ||| * formulera pålitlighetskrav för datorsystem som används i affärskritiska , säkerhetskritiska och missionskritiska tillämpningar .
* describe the structure and principles of commonly used system architectures for fault-tolerant computers . ||| * beskriva och jämföra grundläggande principer och arkitekturer för feltoleranta datorsystem .
* perform probabilistic dependability analysis of computer systems using fault-trees , reliability block diagrams , time-continuous markov chains and stochastic petri nets . ||| * genomföra sannolikhetsteoretiska analyser av datorsystemarkitekturer med hjälp av felträd , tillförlitlighetsblockschema , tidskontinuerliga markovkedjor och stokastiska petrinät .
* master the terminology of dependable computing . ||| * behärska den grundläggande terminologin inom området pålitliga datorsystem .
lectures , exercises and two laboratory classes . ||| föreläsningar , övningar och två laborationer .
* the essential elements and concepts of digital technology and different number systems . ||| * digitalteknikens grundläggande element och begrepp och olika talsystem .
* using boolean algebra to construct combinatorial networks and synchronous sequential circuits . ||| * boolesk algebras användning för konstruktion av kombinatoriska nät och synkrona sekvensnät .
* the computer's digital building blocks ( alu , data path , controller , memory , input and output devices ) . ||| * datorns digitala byggblock ( alu , dataväg , styrenhet , minne , in- och ut- enheter ) .
* the traditional processor architecture ( data-path and control unit and its instruction set ) as a synchronously operating digital machine . ||| * den traditionsenliga processorns uppbyggnad ( dataväg och styrenhet med instruktionsuppsättning ) som en synkront arbetande digitalmaskin .
* coding in machine language and assembly language . ||| * kodning i maskinspråk och assemblerspråk .
to pass the course the student must pass a written examination and the laboratory work . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
based on the written examination the final grade is either u , 3 , 4 or 5 . ||| baserat på tentamensresultatet ges betygen u,3,4 eller 5 .
describe the computer structures and organisation ||| * beskriva datorns uppbyggnad och funktion .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- give a block-level description of how the data-path , register file , and arithmetic logic unit ( alu ) are connected , and ||| - beskriva på blocknivå hur styrenhet , dataväg , registerfil , aritmetik- och logikenhet ( alu ) kopplas samman i en centralenhet .
- explain architectural concepts such as accumulator architectures , risc , cisc , stack architectures , and pipelines . ||| - förklara begreppen ackumulatorarkitektur , risc , cisc , stackarkitektur och pipeline .
* describe and analyze/design the central processing unit's basic parts . ||| * beskriva och analysera / konstruera centralenhetens grundläggande delar .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- analyze/design a single alu and design control signal sequences for basic alu operations , and ||| - analysera / konstruera en enkel alu och utforma styrsignalsekvenser för grundläggande alu-operationer .
- analyze a single data path and construct and design control signal sequences for transfers between registers , alu , and memory . ||| - analysera en enkel dataväg , samt konstruera och utforma styrsignalsekvenser för överföringar mellan register , alu och minne .
* explain how the instructions created the control signal sequences . ||| * förklara hur instruktioner byggs upp av styrsekvenser .
the student should be able to use examples to explain and describe instruction formats , instruction decoding , and instruction execution . ||| detta betyder att man till exempel ska kunna förklara och med exempel beskriva instruktionsformat , instruktionsavkodning och instruktionsutförande
* describe and analyze the control unit ||| * beskriva och analysera den automatiska styrenhetens funktion och uppbyggnad .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe how the control signal sequences can be realized with either hard-wired logic or micro-programmed logic , and ||| - beskriva hur styrsignalsekvenser kan realiseras med fast kopplad logik såväl som mikroprogrammerad logik .
- analyze and design control signal sequences from instruction semantics . ||| - analysera och konstruera styrsignalsekvenser utgående från instruktioners semantik .
* explain the primary memory's core functions and describe , analyze , and design realize the main memory's connection to the cpu . ||| * förklara primärminnets grundläggande funktioner samt beskriva , analysera och konstruera primärminnets anslutning till centralenheten .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe different types of primary memory such as rom , prom , flash , sram , and dram , and explain the usefulness of each type for different purposes ; ||| - beskriva olika typer av primärminnen såsom rom , prom , flash , statiskt ram och dynamiskt ram , samt förklara respektive minnestyps användbarhet för olika ändamål .
- explain the concept of memory hierarchies ; ||| - förklara begreppet minneshierarki .
- describe , analyze , and realize address decoding logic for the primary memory ; ||| - beskriva , analysera och konstruera avkodningslogik för primärminne med digitala komponenter .
- describe , analyze and realize simple memory addressed ios with digital components ; and ||| - beskriva , analysera och konstruera enkel minnesadresserad io med digitala komponenter .
- explain/describe how the bus links the cpu and memory . ||| - förklara / beskriva hur centralenhet och minne kopplas samman med hjälp av datorns bussystem .
the student should be able to describe synchronous and asynchronous bus protocols and multiplexing . ||| detta betyder att man till exempel ska kunna beskriva synkrona och asynkrona bussprotokoll samt multiplexteknik .
* describe basic exception handling in computer systems . ||| * beskriva elementär undantagshantering i datorsystem .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- explain various hardware and software exception handling , such as restart , software-initiated exceptions , and externally generated exceptions ( interrupts ) , ||| * förklara undantagstyper såsom återstart , programvaruinitierade undantag samt externt genererade undantag ( avbrott ) .
- describe how the restart and software-initiated exception are performed in the controller , and ||| * beskriva hur återstart och programvaruinitierade undantag utförs i styrenheten .
- describe how interrupts are handled in the cpu . ||| * beskriva hur avbrott hanteras i centralenheten .
the student should be able to ||| detta betyder att man till exempel ska kunna
- convert numbers between decimal , binary , and hexadecimal representation , and ||| - utföra omvandling av tal mellan decimal , binär och hexadecimal representation .
* describe and analyze the computer's structure as a programmable digital system . ||| * beskriva och analysera datorns uppbyggnad som programmerbart digitalt system .
the combinatorial circuits considered here consist ( mainly ) of simple circuits such as multiplexers , de-multiplexers , full adders , bit shifters , etc. . ||| de kombinatoriska nät som här avses utgörs ( huvudsakligen ) av enklare nät såsom väljare,fördelare , heladderare , bitskiftare etc.
the sequential circuits considered here consist of memory elements and counters . ||| de sekvensnät som här avses utgörs av minneselement och räknare .
program in assembler ||| om assemblerprogrammering
* explain the stored program principle . ||| * förklara det lagrade programmets princip .
* describe the programmer's model of the machine . ||| * beskriva programmerarens bild av maskinen , dvs instruktionsuppsättning och adresseringssätt .
* describe , analyze , and design simple assembly language programs organized into subroutines . ||| * beskriva , analysera och konstruera enkla assemblerprogram , organiserade i subrutiner .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- structure programs using subroutines and stack management , and ||| - strukturera program med hjälp av subrutiner och stackhantering .
- write small routines including software-controlled and interrupt-driven input and output and delays . ||| - skriva små rutiner innefattande programstyrd och avbrottsstyrd in- och utmatning samt fördröjningar .
scheduled teaching consists of lectures , demonstrations , and supervised coding and simulation exercises . ||| schemalagd undervisning består av föreläsningar , demonstrationer och handledda simulerings- kodnings- övningar .
there are also supervised laboratory sessions for which students are required to prepare beforehand . ||| dessutom utförs handledda obligatoriska laborationer där förkunskapskontroll genomförs inför varje laboration .
throughout the course , the student will design increasingly complex digital building blocks of digital and computer systems . ||| under kursen konstruerar studenten genomgående större och större digitala byggblock ingående i digitala system och datorsystem .
the theory is presented in lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
students construct their building blocks and test their designs with the help of simulators during exercises . ||| studenten konstruerar sina byggblock och testar sin konstruktion med hjälp av simulatorer under simuleringsövningar .
the building blocks are subsequently realized in hardware during the lab sessions . ||| därefter implementerar studenten sina byggblock i hårdvara under laboration .
the realization is completed by linking the building blocks into a computer and programming it . ||| konstruktionsarbetet avslutas med att sammankoppla byggblocken till en dator och programmera denna .
none ||| endast grundläggande behörighet
* the essential elements and concepts of digital technology and different number systems . ||| * digitalteknikens grundläggande element och begrepp och olika talsystem .
* using boolean algebra to construct combinatorial networks and synchronous sequential circuits . ||| * boolesk algebras användning för konstruktion av kombinatoriska nät och synkrona sekvensnät .
* the computer's digital building blocks ( alu , data path , controller , memory , input and output devices ) . ||| * datorns digitala byggblock ( alu , dataväg , styrenhet , minne , in- och ut- enheter ) .
* the traditional processor architecture ( data-path and control unit and its instruction set ) as a synchronously operating digital machine . ||| * den traditionsenliga processorns uppbyggnad ( dataväg och styrenhet med instruktionsuppsättning ) som en synkront arbetande digitalmaskin .
* coding in machine language and assembly language . ||| * kodning i maskinspråk och assemblerspråk .
to pass the course the student must pass a written examination and the laboratory work . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
based on the written examination the final grade is either u , 3 , 4 or 5 . ||| baserat på tentamensresultatet ges betygen u,3,4 eller 5 .
describe the computer structures and organisation ||| * beskriva datorns uppbyggnad och funktion .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- give a block-level description of how the data-path , register file , and arithmetic logic unit ( alu ) are connected , and ||| - beskriva på blocknivå hur styrenhet , dataväg , registerfil , aritmetik- och logikenhet ( alu ) kopplas samman i en centralenhet .
- explain architectural concepts such as accumulator architectures , risc , cisc , stack architectures , and pipelines . ||| - förklara begreppen ackumulatorarkitektur , risc , cisc , stackarkitektur och pipeline .
* describe and analyze/design the central processing unit's basic parts . ||| * beskriva och analysera / konstruera centralenhetens grundläggande delar .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- analyze/design a single alu and design control signal sequences for basic alu operations , and ||| - analysera / konstruera en enkel alu och utforma styrsignalsekvenser för grundläggande alu-operationer .
- analyze a single data path and construct and design control signal sequences for transfers between registers , alu , and memory . ||| - analysera en enkel dataväg , samt konstruera och utforma styrsignalsekvenser för överföringar mellan register , alu och minne .
* explain how the instructions created the control signal sequences . ||| * förklara hur instruktioner byggs upp av styrsekvenser .
* describe and analyze the control unit ||| * beskriva och analysera den automatiska styrenhetens funktion och uppbyggnad .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe how the control signal sequences can be realized with either hard-wired logic or micro-programmed logic , and ||| - beskriva hur styrsignalsekvenser kan realiseras med fast kopplad logik såväl som mikroprogrammerad logik .
- analyze and design control signal sequences from instruction semantics . ||| - analysera och konstruera styrsignalsekvenser utgående från instruktioners semantik .
* explain the primary memory's core functions and describe , analyze , and design realize the main memory's connection to the cpu . ||| * förklara primärminnets grundläggande funktioner samt beskriva , analysera och konstruera primärminnets anslutning till centralenheten .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe different types of primary memory such as rom , prom , flash , sram , and dram , and explain the usefulness of each type for different purposes ; ||| - beskriva olika typer av primärminnen såsom rom , prom , flash , statiskt ram och dynamiskt ram , samt förklara respektive minnestyps användbarhet för olika ändamål .
- explain the concept of memory hierarchies ; ||| - förklara begreppet minneshierarki .
- describe , analyze , and realize address decoding logic for the primary memory ; ||| - beskriva , analysera och konstruera avkodningslogik för primärminne med digitala komponenter .
- describe , analyze and realize simple memory addressed ios with digital components ; and ||| - beskriva , analysera och konstruera enkel minnesadresserad io med digitala komponenter .
- explain/describe how the bus links the cpu and memory . ||| - förklara / beskriva hur centralenhet och minne kopplas samman med hjälp av datorns bussystem .
the student should be able to describe synchronous and asynchronous bus protocols and multiplexing . ||| detta betyder att man till exempel ska kunna beskriva synkrona och asynkrona bussprotokoll samt multiplexteknik .
* describe basic exception handling in computer systems . ||| * beskriva elementär undantagshantering i datorsystem .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- explain various hardware and software exception handling , such as restart , software-initiated exceptions , and externally generated exceptions ( interrupts ) , ||| * förklara undantagstyper såsom återstart , programvaruinitierade undantag samt externt genererade undantag ( avbrott ) .
- describe how the restart and software-initiated exception are performed in the controller , and ||| * beskriva hur återstart och programvaruinitierade undantag utförs i styrenheten .
- describe how interrupts are handled in the cpu . ||| * beskriva hur avbrott hanteras i centralenheten .
within digital technology ||| om digitalteknik
* describe and use binary codes . ||| * beskriva och använda binära koder .
the student should be able to ||| detta betyder att man till exempel ska kunna
- convert numbers between decimal , binary , and hexadecimal representation , and ||| - utföra omvandling av tal mellan decimal , binär och hexadecimal representation .
* describe and analyze the computer's structure as a programmable digital system . ||| * beskriva och analysera datorns uppbyggnad som programmerbart digitalt system .
the combinatorial circuits considered here consist ( mainly ) of simple circuits such as multiplexers , de-multiplexers , full adders , bit shifters , etc. . ||| de kombinatoriska nät som här avses utgörs ( huvudsakligen ) av enklare nät såsom väljare,fördelare , heladderare , bitskiftare etc.
the sequential circuits considered here consist of memory elements and counters . ||| de sekvensnät som här avses utgörs av minneselement och räknare .
program in assembler ||| om assemblerprogrammering
* explain the stored program principle . ||| * förklara det lagrade programmets princip .
* describe the programmer's model of the machine . ||| * beskriva programmerarens bild av maskinen , dvs instruktionsuppsättning och adresseringssätt .
the student should be able to describe the processor register set , explain the various types of instruction groups and addressing modes and describe them with examples . ||| detta betyder att man till exempel ska kunna förklara olika allmängiltiga typer av instruktionsgrupper och adresseringssätt samt beskriva dessa med exempel .
* describe , analyze , and design simple assembly language programs organized into subroutines . ||| * beskriva , analysera och konstruera enkla assemblerprogram , organiserade i subrutiner .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- structure programs using subroutines and stack management , and ||| - strukturera program med hjälp av subrutiner och stackhantering .
- write small routines including software-controlled and interrupt-driven input and output and delays . ||| - skriva små rutiner innefattande programstyrd och avbrottsstyrd in- och utmatning samt fördröjningar .
scheduled teaching consists of lectures , demonstrations , and supervised coding and simulation exercises . ||| schemalagd undervisning består av föreläsningar , demonstrationer och handledda simulerings- kodnings- övningar .
there are also supervised laboratory sessions for which students are required to prepare beforehand . ||| dessutom utförs handledda obligatoriska laborationer där förkunskapskontroll genomförs inför varje laboration .
throughout the course , the student will design increasingly complex digital building blocks of digital and computer systems . ||| under kursen konstruerar studenten genomgående större och större digitala byggblock ingående i digitala system och datorsystem .
the theory is presented in lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
students construct their building blocks and test their designs with the help of simulators during exercises . ||| studenten konstruerar sina byggblock och testar sin konstruktion med hjälp av simulatorer under simuleringsövningar .
the building blocks are subsequently realized in hardware during the lab sessions . ||| därefter implementerar studenten sina byggblock i hårdvara under laboration .
the realization is completed by linking the building blocks into a computer and programming it . ||| konstruktionsarbetet avslutas med att sammankoppla byggblocken till en dator och programmera denna .
basic eligibility ||| grundläggande behörighet
an embedded system is a computer system designed to perform one or a few dedicated functions . ||| ett inbyggt system är ett datorsystem som är konstruerat för att utföra en eller ett fåtal specifika funktioner .
it is embedded in the sense that it is part of a complete device , often including electrical hardware and mechanical parts . ||| det är inbyggt i den mening att det är en del av en komplett enhet , ofta omfattande elektrisk hårdvara och mekaniska delar .
for reasons of safety and usability , some embedded systems have strict constraints on non-functional behavior such as computational delay and periodicity . ||| av säkerhets- och användbarhetsskäl har vissa inbyggda system strikta krav på icke-funktionella beteenden såsom fördröjning och periodicitet hos datorberäkningarna .
such systems are referred to as real-time systems . ||| sådana datorsystem kallas realtidssystem .
examples of real-time systems are control systems for cars , aircraft and space vehicles as well as computer games and multimedia applications . ||| exempel på realtidssystem är styrsystem för bilar , flygplan och rymdfarkoster , samt datorspel och multimediatillämpningar .
this course is intended to give basic knowledge about methods for the design and analysis of real-time systems . ||| denna kurs syftar till att ge grundläggande kunskaper om metoder för konstruktion och analys av realtidssystem .
due to the extremely high costs associated with late discovery of problems in embedded systems , it is important to follow a good design methodology during the development of the software and hardware . ||| på grund av de extremt höga kostnader som följer av en sen upptäckt av problem i inbyggda system är det viktigt att god designmetodik används under utvecklingen av mjuk- och hårdvaran .
one means for that is to use a system architecture that offers good component abstractions and facilitates simple interfacing of components . ||| en sådan metod är att använda en systemarkitektur som tillhandahåller bra abstraktioner av mjukvarukomponenter och som understödjer enkel sammankoppling av sådana komponenter .
the course gives an overview of some state-of-the-art system architectures being used in the design of embedded systems , for example , east-adl , autosar and aadl . ||| kursen ger en översikt av några systemarkitekturer som används vid design av inbyggda system , t ex east-adl , autosar och aadl .
the system architecture philosophy dictates that the software of an embedded system is organized into multiple concurrently-executing tasks , where each task ( or group of tasks ) implements a specific functionality in the system . ||| filosofin bakom systemarkitekturer dikterar att mjukvaran i ett inbyggt system organiseras i multipla parallellt exekverande processer , där varje process ( eller grupp av processer ) implementerar en specifik funktionalitet i systemet .
to that end , a main objective of the course is to demonstrate how the enhanced c programming language is used for implementing communication/synchronization between tasks , resource management and mutual exclusion . ||| ett viktigt syfte med kursen är att demonstrera hur det utökade programspråket c används för att realisera kommunikation och synkronisering mellan processer , resurshantering och ömsesidig uteslutning .
since other programming languages uses monitors or semaphores to implement these functions , the course also contains a presentation of such techniques . ||| eftersom andra programspråk använder monitorer och semaforer för att realisera dessa funktioner , innehåller kursen också en genomgång av sådana tekniker .
in addition , the course demonstrates how to use low-level programming in c to implement interrupt-driven interaction with hardware devices . ||| dessutom demonstreras det i kursen hur man använder lågnivåprogrammering i c för att realisera avbrottsstyrd interaktion med hårdvaruenheter .
to demonstrate the general principles in real-time programming , the course also gives examples of how these techniques are implemented in other programming languages , such as ada and java . ||| för att demonstrera de generella principerna bakom programmering av realtidssystem ger kursen också exempel på hur dessa principer realiseras i andra programspråk , som ada och java .
in order to execute a program containing concurrent tasks there is a run-time system ( real-time kernel ) that distributes the available capacity of the microprocessor ( s ) among the tasks . ||| för att möjliggöra exekvering av ett program som innehåller parallella processer används ett runtime-system ( realtidskärna ) som fördelar den totala tillgängliga beräkningskapaciteten hos systemets mikroprocessor ( er ) mellan processerna .
the course shows how a simple run-time system is organized . ||| kursen beskriver hur ett enkelt runtime-system är organiserat .
the run-time system determines the order of execution for the tasks by means of a scheduling algorithm . ||| exekveringsordningen mellan processerna bestämmer runtime-systemet med hjälp av en schemaläggningsalgoritm .
to that end , the course presents techniques based on cyclic time-table based scheduling as well as scheduling techniques using static or dynamic task priorities . ||| kursen presenterar tekniker baserat på såväl cykliska tidtabeller som statiska eller dynamiska processprioriteter .
in addition , protocols for the management of shared hardware and software resources are presented . ||| dessutom presenteras protokoll för hantering av delade hård- och mjukvaruresurser .
since many contemporary real-time applications are distributed over multiple computer nodes , the course also presents topologies and medium access mechanisms for some commonly-used communication networks . ||| eftersom många av dagens realtidstillämpningar är distribuerade över multipla datornoder innehåller kursen också en introduktion till topologier och mediumaccesstekniker för några vanligt använda kommunikationsnätverk .
in real-time systems , where tasks have strict timing constraints , it is necessary to make a pre-run-time analysis of the system schedulability . ||| i realtidssystem , där processer har strikta tidskrav , är det nödvändigt att göra a priori analys av systemets schemaläggningsbarhet .
the course presents three different analysis methods for systems that schedule tasks using static or dynamic priorities : utilization-based analysis , response-time analysis , and processor-demand analysis . ||| kursen presenterar tre olika analysmetoder för system som schemalägger processer med statiska eller dynamiska prioriteter : utnyttjandegradsbaserad analys , svarstidsanalys och beräkningsbehovsanalys .
in conjunction with this , the course also gives an account on how to derive the maximum resource requirement ( worst-case execution time ) of a task . ||| i samband med detta ges också en insikt i hur det maximala resursbehovet ( värsta-fallets exekveringstid ) för en process beräknas .
written exam and approved laboratory assignment . ||| skriftlig tentamen och godkänd laborationsuppgift .
after the course the students shall be able to : ||| efter kursen skall studenten kunna :
formulate requirements for embedded systems with strict constraints on computational delay and periodicity . ||| formulera krav för inbyggda datorsystem med strikta önskemål på fördröjning och periodicitet hos datorberäkningarna .
reflect and argue in writing on the choice of system implementation vis-á-vis ethical aspects of data integrity ||| reflektera och argumentera i skrift över valet av systemimplemering vis-á-vis etiska aspekter på dataintegritet .
categorize and describe the different layers in a system architecture for embedded real-time systems . ||| kategorisera och beskriva de olika lagren i en systemarkitektur för inbyggda realtidssystem .
construct concurrently-executing tasks ( software units ) for real-time applications that interface to hardware devices ( sensors/actuators ) . ||| konstruera parallellt exekverande processer ( programvarumoduler ) för realtidstillämpningar med gränssnitt mot hårdvaruenheter ( sensorer / ställdon ) .
describe the principles and mechanisms used for designing run-time systems and communication networks for real-time applications . ||| beskriva de principer och mekanismer som används för att konstruera run-time system och kommunikationsnätverk för realtidstillämpningar .
apply the basic analysis methods used for verifying the temporal correctness of a set of executing tasks . ||| tillämpa de grundläggande analysmetoder som används för att verifiera den tidsmässiga korrektheten hos en uppsättning processer .
the course is organized as a series of lectures and a set of exercise sessions where the programming techniques and theories presented at the lectures are put into practice . ||| kursen utgörs av en föreläsningsserie samt ett antal salsövningar där programmeringmetoder och teorier från föreläsningarna praktiseras .
apart from the programming of cooperating concurrent tasks with strict timing constraints , the laboratory assignment also encompasses low-level programming of hardware devices such as timers and network controllers . ||| uppgiften omfattar , förutom programmering av samverkande parallella processer , även maskinnära programmering av hårdvaruenheter som realtidsklockor och nätverkskontrollers .
preparatory courses in concurrent programming and operating systems . ||| förberedande kurser i parallellprogrammering och operativsystem .
work in designing and implementing a small digital device , in which a microprocessor can be included . ||| konstruktionsarbete i samband med konstruktion av en digital apparat eller ett mindre digitalt system i vilket en mikroprocessor kan ingå .
the following skills are usually students acquire : ||| följande kunskaper brukar studenterna förvärva :
- construction ||| - konstruktion
- with limited resources ||| - med begränsade resurser
- troubleshooting with an logic analyzer ||| - felsökning med logikanalysator
- timing ||| - timing
- using cpld circuits ||| - använda cpld- kretsar
- reading technical documentation ||| - läsa teknisk dokumentation
- report writing , technical documentation ||| - rapportskrivning , teknisk dokumentation
the examination is continuous during the course of laboratory [ l ] , weekly meetings [ w ] , review of logbooks [ b ] , assessment of the final product [ p ] and report [ r ] and the oral presentation [ o ] . ||| examinationen sker fortlöpande under kursen med laborationer [ l ] , veckomöten [ v ] , granskning av loggböcker [ o ] , bedömning av slutprodukt [ p ] och rapport [ r ] samt den muntlig framställning [ m ] .
the rating is based on the project group has chosen , which gives a base rating , this is adjusted according to how well the project has been completed . ||| betyget sätts utifrån vilket projekt gruppen har valt vilket ger ett bas betyg , detta justeras efter hur väl projektet har genomförts .
all parts above must be approved for the final grade . ||| alla delmoment ovan måste vara godkända för slutbetyg på kursen .
understand the principles for a structured and hierarchical description of smaller digital systems [ p , r ] . ||| principer för en strukturerad och hierarkisk beskrivning av mindre digitala system [ p, r ] .
understand the function , use and limitations of the programmable logic circuits [ l , r , p ] . ||| funktion , användning och begränsningar hos programmerbara kretsar [ l, r, p ] .
understand the function , use and limitations of modern design tools for electronic design ( eda ) [ l , r , p ] . ||| funktion , användning och begränsningar hos moderna konstruktionsverktyg för elektronikkonstruktion ( eda ) [ l, r, p ] .
know the requirements for power supply for digital circuits in environments with multiple voltages [ r , p ] . ||| krav för korrekt strömförsörjning av digitala kretsar i miljöer med flera spänningar [ r, p ] .
know how to search for documentation of commercial electronic components [ r , b ] . ||| hur man söker dokumentation om kommersiella elektronikkomponenter [ r, o ] .
skills and abilities ||| färdighet och förmåga
based on a vague requests , develop a technical specification for a small digital system [ r , p ] . ||| utgående från en vagt formulerat underlag ta fram en teknisk specifikation över funktion hos ett mindre digitalt system [ r, p ] .
based on a specification realize the function of a small digital system in programmable logic and other components in a structured manner using modern cad tools [ l , r , p ] . ||| utgående från en specifikation realisera funktionen hos ett mindre digitalt system i programmerbar logik och övriga komponenter på ett strukturerat sätt med hjälp av moderna cad-verktyg [ l, r, p ] .
understand and use relevant parts of the documentation of existing electronic components , to be able to interconnect them [ r ] . ||| förstå och använda tillämpliga delar i dokumentation över existerande elektronikkomponenter vid sammankoppling av dessa [ r ] .
perform engineering tradeoffs in the design related to functionality , speed , complexity and size [ r , p ] . ||| utföra ingenjörsmässiga avvägningar i konstruktionen mellan funktion , hastighet , komplexitet och storlek [ r, p ] .
manage modern eda tools with both their advantages and shortcomings [ l , w , b ] . ||| hantera moderna eda-verktyg med både deras fördelar och ofullkomligheter [ l, v, o ] .
debugging the design , using computer-based simulators and measuring instruments as logic analyzers and oscilloscope [ w , b ] . ||| felsökning av konstruktionen med användande av datorbaserade simulatorer och mätinstrument såsom logikanalysatorer och oscilloskop [ v, o ] .
complete and document a prototype of a smaller digital system [ p , r ] . ||| färdigställa och dokumentera en prototyp av ett mindre digitalt system [ p, r ] .
produce technical documentation of their design so that it is understandable and useful for people at different levels in a company [ r ] . ||| framställa teknisk dokumentation över den egna konstruktionen så att den är förståelig och användbar för personer på olika nivåer i ett företag [ r ] .
muntlig presentation av av arbetet på ett ingenjörsmässigt och professionellt sätt [ m ] . ||| muntlig presentation av arbetet på ett ingenjörsmässigt och professionellt sätt [ m ] .
oral presentation of work in an engineering and professional manner [ o ] . ||| genomföra arbete i projektform , och kontinuerligt dokumentera projektets framskridande [ v, o ] .
the course begins with some lecture and exercises that allows students to become familiar with cad / eda tools . ||| kursen inleds med en kort föreläsningsserie och några laborationer som gör att studenterna bekantar sig med cad / eda-verktygen .
subsequently , the students themselves proceed with the construction work under supervision . ||| därefter utför studenterna själva sitt konstruktionsarbete under överinseende av handledaren .
the project work is performed in groups of three or four students . ||| projektarbetet utförs i grupper om tre till fyra teknologer .
each group selects a task of its own or follows a proposal from a catalog of projects . ||| varje grupp väljer en uppgift efter eget förslag eller ur en projektkatalog .
components , instruments and equipment will be available for students in accessible premises for a period of six weeks . ||| komponenter , instrument och övrig utrustning hålls tillgängliga i för kursdeltagarna åtkomliga lokaler under en tidrymd av sex veckor .
construction work is presented in a written report . ||| konstruktionsarbetet redovisas i en skriftlig rapport .
students have a meeting each week with a supervisor . ||| studenterna har ett möte i veckan med handledare eller examinator som är obligatoriskt .
the course concludes with a seminar with mandatory attendance , where projects are presented . ||| kursen avslutas med ett seminarium med obligatorisk närvaro , där projekten redovisas .
fundamentals of digital systems and computer engineering , electronics , computer programming . ||| grundkurser inom områdena digital- och datorteknik , elektronik , programmering .
in addition the course eda322 digital design is strongly recommended . ||| dessutom är kursen eda322 digital konstruktion starkt rekommenderad .
the course gives basic knowledge in the security area , i.e. how to protect your system against intentional intrusions and attacks . ||| denna kurs ger grundläggande kunskaper inom området datasäkerhet ( eng . " security " ) , dvs hur man skyddar sitt system mot avsiktliga intrång .
the purpose of intrusions can be made to change or delete resources ( data , programs , hardware , etc ) , to get unauthorized access to confidential information or unauthorized use of the system's services . ||| intrång kan göras med avsikt att ändra eller förstöra resurser ( data , programvara , maskinvara , osv .) , för att skaffa tillgång till konfidentiell information eller för att orättmätigt utnyttja systemet och dess tjänster .
the course covers threats and vulnerabilities in the computer systems and networks , as well as rules , methods and mechanisms for protection . ||| kursen behandlar de hot som finns , svagheter i datorsystemen och kommunikationsnäten samt de regelverk och mekanismer som kan användas för att skydda systemen .
modeling and assessment of security and dependability as well as metrication methods are covered . ||| kursen behandlar säkerhet som en del av det överordnade begreppet pålitlighet ( eng . dependability ) .
during a few lectures , a holistic security approach is taken and organizational , business-related , social , human , legal and ethical aspects are treated . ||| säkerhetstänkandet sätts även in i ett vidare sammanhang , genom att organisatoriska , affärsmässiga , sociala , juridiska , mänskliga och etiska aspekter berörs .
introduction to computer security : definitions , terminology , standards . ||| introduktion till datasäkerhet : definitioner , terminologi , standarder .
some practical examples . ||| några praktikfall .
relation to dependability , reliability , availability and safety . ||| koppling till tillförlitlighet , tillgänglighet och katastrofsäkerhet .
information hiding , steganography and covert channels . ||| steganografi och hemliga kanaler .
introduction to cryptography . ||| introduktion till kryptoteknik .
secure operating systems . ||| säkra operativsystem .
deception systems . ||| vilseledande system .
security models : bell-lapadula , biba , chinese wall etc. . ||| säkerhetsmodeller : bell-lapadula , biba , m . fl .
introduction to network security and firewalls . ||| introduktion till säkerhet i nätverk och brandväggar .
database security , defensive programming , injection attacks . ||| säkerhet för databaser , defensiv programmeringsteknik .
security metrics . ||| mätning av säkerhet .
security management and organisation . ||| säkerhetsplanering och organisation .
laws and ethics . ||| lagar och etik .
after completing the course the student shall have acquired the following knowledge goals . ||| efter fullgjord kurs skall studenten ha tillgodogjort sig följande lärandemål .
the student shall : ||| studenten skall :
* have an overall , fundamental understanding of computer security and realize the consequences of insecurity ||| * ha en övergripande och grundläggande förståelse för datasäkerhet och vad otillräcklig datasäkerhet innebär för de betraktade systemen
* have a general knowledge of protection mechanisms ||| * ha en generell förståelse för olika skyddsmekanismer
* be capable of making a security analysis of different types of systems and suggest ways to improve security ||| * kunna analysera olika typer av system ur datasäkerhetssynpunkt , samt kunna föreslå åtgärder för att säkra systemen
* be able to deal with a few methods for security modeling ||| * ha förståelse för några metoder för att modellera säkerhet
* understand common methods for security assessment , evaluation and metrication ||| * förstå vanliga metoder för säkerhetsbedömning , utvärdering och svårigheterna i hur säkerhet kan mätas
* have improved his or her skill in technical writing ||| * ha förbättrat sin förmåga att uttrycka sig skriftligt genom att författa en teknisk rapport
* be able to reason on the ethical and social aspects of computer security . ||| * föra ett välunderbyggt resonemang kring etiska och sociala aspekter av datasäkerhet .
the course consists of a series of lectures , a few exercises and laborative exercises . ||| kursen utgörs av en föreläsningsserie , vissa övningsmoment och laborationer .
computer security is one of the courses proposed in the security specialization at chalmers and göteborg university . ||| denna kurs är en grundkurs i datasäkerhet och är en del av den föreslagna säkerhetsfördjupningen på chalmers och göteborg universitet .
ethical and social aspects in relation to computer science are further developed in the course dat147 . ||| etiska och sociala aspekter utvecklas ytterligare i kursen dat147 .
general requirements from a bachelor's degree are required . ||| undervisningen förutsätter kunskaper motsvarande en kandidatexamen .
knowledge in a programming language , such as c , is also required . ||| dessutom krävs kunskaper i ett programmeringsspråk , till exempel c .
the course eda092 operating systems or equivalent is recommended . ||| kursen eda092 operativsystem eller motsvarande rekommenderas .
the course covers architectural techniques for designing parallel computers ( in particular , techniques supporting major programming paradigms like message passing , shared memory , data parallelism , explicit instruction-level parallelism [ vliw ] , and modern combinations of these , such as the combined thread-and-data parallelism supported by gpus ) . ||| kursen behandlar arkitekturtekniker för konstruktion av parallella datorer ( särskilt tekniker som stödjer viktiga programmeringsmodeller såsom message passing , delat minne , dataparallellism , explicit instruktionsparallellism [ vliw ] och moderna kombinationer av dessa modeller , till exempel kombinerad tråd- och dataparallellism som används i gpuer ) .
the content is divided into several parts : ||| stoffet är indelat i flera tematiska delar .
these studies highlight the context in which each strategic approach was proposed and developed , and then in what contexts the ideas and design principles reappear today . ||| betoning ligger på de sammanhang där varje metod föreslogs och utvecklades , och därefter i vilka sammanhang dess idéer och principer tillämpas idag .
in order to motivate deeper discussions of different classes of parallel computers , the third part covers the canonical steps in designing efficient parallel software . ||| för att motivera djupare diskussioner om olika klasser av parallella datorsystem täcker den tredje delen de traditionella stegen vid konstruktion av paralllell mjukvara .
important concepts are decomposing a sequential program into parallel threads ( or parallel data ) , balancing the load across ( parallel ) architectural resources , reducing communication , and synchronizing parallel activity ( e.g. , parallel threads ) . ||| uppdelning av programmen i parallella trådar ( eller parallella data ) , lastbalansering över de tillgängliga resurserna , minimering av kommunikation mellan de olika delarna samt synkronisering av parallella aktiviteter ( exempelvis trådar ) , är viktiga principer .
lab assignments will specifically focus on shared-memory machines , highlighting ramifications of different memory coherence strategies for different kinds of workloads . ||| laborationsuppgifter rör specifikt arkitekturer med delat minne , med fokus på skilda strategier för minneskoherens och deras inverkan vid olika lastfall .
the fourth part focuses on design principles for ( shared memory ) small-scale parallel computers under shared memory , e.g. , design principles for multi-core microprocessors to support thread-level parallelism . ||| den fjärde delen behandlar designprinciper för mindre parallella datorer med delat minne , till exempel principer för moderna multicore-processorer med stöd för trådparallellism .
important concepts covered are cache coherence and consistency . ||| två viktiga koncept är cache-koherens och - konsistens .
we study bus-based snoopy-cache protocols , the inclusion property , and multi-phase protocols . ||| vi studerar buss-baserade cache-protokoll , inklusive flerfasprotokoll .
the fifth part deals with scalability of parallel computers , i.e. , architectural techniques for scaling the number of processors to a higher count , specifically with respect to cache coherence protocols . ||| den femte delen behandlar skalbarhet hos parallella datorer , det vill säga ariktetkurtekniker för att öka antalet processorer i ett parallellt system , speciellt med avseende på cache-koherensprotokollen .
the sixth part deals with interconnection networks , an essential component in chip multiprocessors and scalable parallel computer systems . ||| den sjätte delen handlar de kommunikationsnätverk som är en essentiell del av chip-multiprocessorer och skalbara parallella datorsystem .
concepts covered are routing , switching , and topology design for scalable interconnects . ||| vi behandlar routing , switching och val av topologi för skalbara nätverk .
a common thread running through all parts is a discussion of cost tradeoffs with respect to performance , power , energy , verifiability , programmability , and maintainability . ||| ett genomgående tema i kursens alla delar är avvägningar mellan prestanda , effektbehov , energibehov , verifierbarhet , programmerbarhet och underhåll .
a second unifying theme is the memory bottleneck , and the importance of efficient resource management . ||| ett andra sammanhållande tema är minnesflaskhalsen och vikten av effektiv resurshantering .
example project topics include multithreading , relaxed memory consistency models , prefetching , and memory access scheduling . ||| exempel på ämnen är multitrådshantering , svagare modeller för minneskonsistens , prefetching och schemaläggning av minnesåtkomster .
multi-week written project , rather than a conventional exam . ||| skriftligt projekt över flera veckor snarare än en konventionell tentamen .
students will master the terminology and key concepts of parallel computer architecture in order to follow the research advances in this field ; ||| studenterna kommer att behärska terminologi och nyckelbegrepp inom parallelldatorarkitektur för att kunna följa fältets utveckling ;
understand the principles behind parallel computer organization ( especially principles for the design of the communication substrate to support different programming models ) ; ||| förstå principerna bakom parallelldatororganisation ( särskilt de konstruktionsprinciper för kommunikationssubstratet som stödjer olika programmeringsmodeller ) ;
understand different models of parallelism from a historical perspective ; ||| förstå olika modeller för parallellism ur ett historiskt perspektiv ;
and exhibit basic skills in the design of software for parallel computers and understanding of the issues involved in designing efficient parallel software . ||| och uppvisa grundläggande färdigheter i konstruktion av mjukvara för parallella datorer samt förståelse för de överväganden som påverkar effektiviteten hos parallell programvara .
students will strengthen communication skills and demonstrate their learning through participating in lectures , labs , and smaller project-group meetings ; ||| specifikt kommer studenterna att förbättra sin kommunikativa förmåga och demonstrera sina insikter genom att delta i föreläsningar , laborationer och projektmöten ;
completing homework assignments ( to demonstrate breadth of learning ) ; ||| genom inlämningsuppgifter som visar breddförståelse ;
and writing a research survey in collaboration with students in their project groups and in cooperation with the instructor ( to demonstrate depth of learning on a parallel computer design subject of their choosing ) . ||| och genom att , i grupp och under ledning av instruktör , författa en rapport som sammanfattar forskningsläget inom ett valt delområde ( för att visa djupförståelse inom detta område ) .
from 1975 to 2005 , the computer industry accomplished a phenomenal mission : in 30 years , we put a personal computer on every desk and in every pocket . ||| under perioden 1975 till 2005 åstadkom datorindustrin en fenomenal bedrift : på trettio år placerade vi en en personlig dator på varje skrivbord och i varje ficka .
in 2005 , however , mainstream computing hit a wall , and the industry undertook a new mission : to put a personal parallel supercomputer on every desk , in every home , and in every pocket . ||| år 2005 hejdades den utvecklingen abrupt , varvid industrin satte nya mål : att placera en personlig parallell superdator på varje skrivbord , i varje hem och i varje ficka .
in 2011 , we completed the transition to parallel computing in all mainstream form factors , with the arrival of multicore tablets and smartphones . ||| år 2011 var övergången komplett genom att även surfplattor och mobiltelefoner fick multicore-processorer .
soon this " build out " of multicore will deliver mainstream quad- and eight-core tablets and even the last single-core gaming console will become multicore . ||| snart kommer denna process att leda till fyra- och åttakärniga processorer även i ordinära surfplattor , och de sista spelkonsolerna kommer att gå från en till flera kärnor .
for the first time in the history of computing , mainstream hardware is no longer a single-processor von neumann machine . ||| för första gången i historien kommer därmed vanliga datorplattformar inte längre att utgöras av von-neumann-maskiner med en processorkärna .
power and temperature have joined performance as first-class design goals . ||| effekt och temperatur är numera lika viktiga designmål som prestanda .
high-performance computing platforms now strive for the highest performance / watt . ||| högprestanda-datorer konstrueras nu för bästa prestanda per watt .
this course looks at the design of current multicore systems with an eye towards how those designs are likely to evolve over the next decade . ||| denna kurs behandlar hur dagens multicore-system är konstruerade , med blicken på hur framtida system kan komma att byggas under det närmaste decenniet .
we also cover the historical origins of many design strategies that have re-emerged in current systems in different forms and contexts ( e.g. , data parallelism , vliw parallelism , and thread-level parallelism ) . ||| vi går också igenom de historiska ursprungen till många designstrategier som har återuppstått i nutida system men i andra former och sammanhang ( till exempel dataparallellism , vliw-parallellism och parallellism på trådnivå ) .
the course covers architectural techniques for designing parallel computers ( in particular , techniques supporting major programming paradigms like message passing , shared memory , data parallelism , explicit instruction-level parallelism [ vliw ] , and modern combinations of these , such as the combined thread-and-data parallelism supported by gpus ) . ||| kursen behandlar arkitekturtekniker för konstruktion av parallella datorer ( särskilt tekniker som stödjer viktiga programmeringsmodeller såsom message passing , delat minne , dataparallellism , explicit instruktionsparallellism [ vliw ] och moderna kombinationer av dessa modeller , till exempel kombinerad tråd- och dataparallellism som används i gpuer ) .
the content is divided into several parts : ||| stoffet är indelat i flera tematiska delar .
these studies highlight the context in which each strategic approach was proposed and developed , and then in what contexts the ideas and design principles reappear today . ||| betoning ligger på de sammanhang där varje metod föreslogs och utvecklades , och därefter i vilka sammanhang dess idéer och principer tillämpas idag .
in order to motivate deeper discussions of different classes of parallel computers , the third part covers the canonical steps in designing efficient parallel software . ||| för att motivera djupare diskussioner om olika klasser av parallella datorsystem täcker den tredje delen de traditionella stegen vid konstruktion av paralllell mjukvara .
important concepts are decomposing a sequential program into parallel threads ( or parallel data ) , balancing the load across ( parallel ) architectural resources , reducing communication , and synchronizing parallel activity ( e.g. , parallel threads ) . ||| uppdelning av programmen i parallella trådar ( eller parallella data ) , lastbalansering över de tillgängliga resurserna , minimering av kommunikation mellan de olika delarna samt synkronisering av parallella aktiviteter ( exempelvis trådar ) , är viktiga principer .
lab assignments will specifically focus on shared-memory machines , highlighting ramifications of different memory coherence strategies for different kinds of workloads . ||| laborationsuppgifter rör specifikt arkitekturer med delat minne , med fokus på skilda strategier för minneskoherens och deras inverkan vid olika lastfall .
the fourth part focuses on design principles for ( shared memory ) small-scale parallel computers under shared memory , e.g. , design principles for multi-core microprocessors to support thread-level parallelism . ||| den fjärde delen behandlar designprinciper för mindre parallella datorer med delat minne , till exempel principer för moderna multicore-processorer med stöd för trådparallellism .
important concepts covered are cache coherence and consistency . ||| två viktiga koncept är cache-koherens och - konsistens .
we study bus-based snoopy-cache protocols , the inclusion property , and multi-phase protocols . ||| vi studerar buss-baserade cache-protokoll , inklusive flerfasprotokoll .
the fifth part deals with scalability of parallel computers , i.e. , architectural techniques for scaling the number of processors to a higher count , specifically with respect to cache coherence protocols . ||| den femte delen behandlar skalbarhet hos parallella datorer , det vill säga ariktetkurtekniker för att öka antalet processorer i ett parallellt system , speciellt med avseende på cache-koherensprotokollen .
the sixth part deals with interconnection networks , an essential component in chip multiprocessors and scalable parallel computer systems . ||| den sjätte delen handlar de kommunikationsnätverk som är en essentiell del av chip-multiprocessorer och skalbara parallella datorsystem .
concepts covered are routing , switching , and topology design for scalable interconnects . ||| vi behandlar routing , switching och val av topologi för skalbara nätverk .
a common thread running through all parts is a discussion of cost tradeoffs with respect to performance , power , energy , verifiability , programmability , and maintainability . ||| ett genomgående tema i kursens alla delar är avvägningar mellan prestanda , effektbehov , energibehov , verifierbarhet , programmerbarhet och underhåll .
a second unifying theme is the memory bottleneck , and the importance of efficient resource management . ||| ett andra sammanhållande tema är minnesflaskhalsen och vikten av effektiv resurshantering .
example project topics include multithreading , relaxed memory consistency models , prefetching , and memory access scheduling . ||| exempel på ämnen är multitrådshantering , svagare modeller för minneskonsistens , prefetching och schemaläggning av minnesåtkomster .
multi-week written project , rather than a conventional exam . ||| skriftligt projekt över flera veckor snarare än en konventionell tentamen .
students will master the terminology and key concepts of parallel computer architecture in order to follow the research advances in this field ; ||| studenterna kommer att behärska terminologi och nyckelbegrepp inom parallelldatorarkitektur för att kunna följa fältets utveckling ;
understand the principles behind parallel computer organization ( especially principles for the design of the communication substrate to support different programming models ) ; ||| förstå principerna bakom parallelldatororganisation ( särskilt de konstruktionsprinciper för kommunikationssubstratet som stödjer olika programmeringsmodeller ) ;
understand different models of parallelism from a historical perspective ; ||| förstå olika modeller för parallellism ur ett historiskt perspektiv ;
and exhibit basic skills in the design of software for parallel computers and understanding of the issues involved in designing efficient parallel software . ||| och uppvisa grundläggande färdigheter i konstruktion av mjukvara för parallella datorer samt förståelse för de överväganden som påverkar effektiviteten hos parallell programvara .
students will strengthen communication skills and demonstrate their learning through participating in lectures , labs , and smaller project-group meetings ; ||| specifikt kommer studenterna att förbättra sin kommunikativa förmåga och demonstrera sina insikter genom att delta i föreläsningar , laborationer och projektmöten ;
completing homework assignments ( to demonstrate breadth of learning ) ; ||| genom inlämningsuppgifter som visar breddförståelse ;
and writing a research survey in collaboration with students in their project groups and in cooperation with the instructor ( to demonstrate depth of learning on a parallel computer design subject of their choosing ) . ||| och genom att , i grupp och under ledning av instruktör , författa en rapport som sammanfattar forskningsläget inom ett valt delområde ( för att visa djupförståelse inom detta område ) .
the course dat105 computer architecture or equivalent is required . ||| kursen dat105 datorarkitektur eller motsvarande krävs .
the course tda383 concurrent programming is recommended . ||| kursen tda383 parallell programmering rekommenderas .
the course is intended to give fundamental knowledge about analysis , synthesis and optimization of combinatorial and sequential digital circuits . ||| kursen avser att ge grundläggande kunskaper i analys , syntes och optimering av digitala kombinatoriska nät och sekvensnät .
the course also presents the technologies used for implementing such circuits . ||| kursen ger också en inblick i de teknologier som sådana nät implementeras med .
as part of the course , the student will be introduced to a modern computer-based design tool ( cad ) , and learn the basics of hardware description language . ||| i kursen får studenten bekanta sig med ett modernt datorbaserat konstruktionsverktyg ( cad ) , samt lära sig grunderna för maskinvarubeskrivande språk .
boolean algebra and logic minimization ||| boolesk algebra och logikminimering
arithmetic units ||| kretsar för digital aritmetik
memory ||| minneselement
combinational circuits ||| kombinatoriska kretsar
sequential circuits and finite state machines ||| sekventiella kretsar och tillståndsmaskiner
technologies of digital circuits ( asic , fpga ) ||| teknologierna asic och fpga för realisering av digitala konstruktioner
asynchronous circuits ||| asynkrona kretsar
timing and power consumption of digital circuits ||| snabbhet och effektförbrukning i digitala kretsar
testing and design for testing ||| test , och konstruktion för test , av digitala kretsar
hardware description languages ( vhdl ) for digital circuits ||| det hårdvarubeskrivande språket vhdl för konstruktion av digitala kretsar
hardware design , test and evaluation of a simple processor ||| hårdvarukonstruktion , test , och utvärdering av en enkel digital processor
the laboratory work is carried out in groups of normally 2 students . ||| laborationerna utföres normalt i 2-mannagrupper .
1. knowledge and understanding ||| 1. kunskap och förståelse
recognize the function and uses of reconfigurable and asic technologies . ||| översiktligt beskriva funktion och användning av rekonfigurerbar logik samt asic teknologi
list the factors that affect the timing , power and area of a digital circuit . ||| ange faktorer som påverkar snabbhet , effektförbrukning , och erforderlig chipyta vid implementation av digital logik .
2. skills and abilities ||| 2. färdighet och förmåga
minimize a boolean function or derive its canonical form . ||| minimera en boolesk funktion och kunna uttrycka den på kanonisk form
measure the critical path delay of a digital circuit . ||| beräkna den kritiska vägen i en digital krets
use vhdl to describe combinatorial and sequential circuits . ||| använda vhdl som ett verktyg vid konstruktion av digitala kretsar ( såväl kombinatoriska såsom sekventiella )
use modern tools to perform simulation , synthesis and implementation of a digital circuit described in vhdl . ||| använda moderna datorbaserade kontruktionsverktyg för simulering , syntes , och implementering av en digital krets beskriven m . hj av vhdl
use fpga technology to implement a digital hardware design . ||| använda fpga teknologi för att implementera en digital hårdvarukonstruktion minimera antalet nödvändiga tillstånd i en digital tillståndsmaskin via tillståndskodning .
3. judgment and approach ||| 3. värderingsförmåga och förhållningssätt
lectures and labs . ||| föreläsningar och laborationer .
the course aims to convey how a modern computer system is constructed and how its hardware modules interact with eachother and with low - level software . ||| kursen har som syfte att förmedla hur ett modernt datorsystem är uppbyggt och hur dess hårdvarudelar samverkar med varandra och med mjukvaran ( på låg nivå ) .
the main focus is on performance and on interaction with low-level software . ||| stor vikt läggs vid prestandaaspekter och vid samverkan med mjukvara .
demonstration of a working solution to the hand-in task . ||| demonstration av inlämningsuppgift .
written exam . ||| tentamen .
read and write simple assembly programs for a typical three-address register machine . ||| läsa och skriva enkla assemblerprogram för en typisk tre-adress register maskin .
identify the basic types of conflicts that occur as a result of pipelining the datapath of a processor . ||| identifiera de grundläggande typer av konflikter som uppkommer till följd av pipelining av en processors dataväg .
identify and describe simple methods to avoid and work around these conflicts , describe limitations of these simple methods , and estimate their influence on performance . ||| peka ut och beskriva enkla metoder för att hantera dessa konflikter , identifiera begränsningar i dessa metoder , samt uppskatta prestandainverkan .
use arithmetic instructions ( integer and floating-point ) in a correct way . ||| på korrekt sätt använda sig av instruktioner som utför aritmetiska operationer , såväl för flyttal som heltal .
describe the function and performance influence of a memory hierarchy , including caches , main memory and virtual memory , including different parameters for size , block size , and associativity . ||| redogöra för funktionen hos och uppskatta prestandapåverkan av en minneshierarki , som kan omfatta cacheminnen , huvudminne och virtuellt minne , och som använder olika parameterar ( total storlek , blockstorlek , associativitet , etc ) för de olika minnesnivåerna .
compute the performance ( for simple load cases ) of an i/o system , particularly one consisting of processors , buses , and hard disks . ||| beräkna prestanda ( i enkla lastfall ) hos ett i/o-system , speciellt i system som består av processorer , bussar och skivminnen .
identify performance bottlenecks in such a system . ||| identifiera prestandamässiga flaskhalsar i ett sådant system .
explain how computer system performance is defined and measured . ||| förklara hur ett datorsystems prestanda kan definieras och mätas .
estimate the influence of parameter changes on system performance above . ||| uppskatta parameterändringars inverkan på systemets prestanda enligt ovan .
give an overview of the architecture of a multicore processor . ||| översiktligt beskriva de komponenter och principer som används vid konstruktion av fler-kärniga processorer .
present the carried out work in a brief written report . ||| genomföra en enklare samoptimering av mjukvara ( på assemblernivå ) med hårdvaruparametrar för att uppnå bästa möjliga prestanda / kostnadsförhållande för en viss funktion , samt redovisa detta i en kortare skriftlig rapport .
the laborative part ends with a hand-in task . ||| den laborativa delen avslutas med en inlämningsuppgift .
computer networks are becoming an inherent and increasingly important part of many technical areas today . ||| nätverk av datorer blir en alltmer naturlig och viktigare beståndsdel inom många teknikområden .
this course focuses on the parts of data communication that practicing engineers normally will encounter in their daily work . ||| kursen inriktar sig på de aspekter av datakommunkation som en verksam ingenjör kommer i kontakt med i sitt yrkesarbete .
it is a basic course which offers an introductory presentation of data communication and computer networks . ||| detta är en grundkurs med bred inriktning mot området datakommunikation .
to pass the whole course , all the assignments and the written exam must be passed . ||| för godkänd kurs krävs godkänd skriftlig tentamen samt att studenten fått godkänt på alla obligatoriska laborationer och inlämningsuppgift .
the final grade with scale u/3 -5 is based on exam results . ||| slutbetyget i skalan u / 3-5 ges baserat på tentamens resultat .
01. have basic knowledge and skills in the field of data communications and computer networks . ||| 01. ha grundlägggande kunskaper och färdigheter inom området datakommunikation och datornätverk .
02. have good knowledge of reference models for computer communication in terms of function , services and protocols . ||| 02. ha god kännedom om referensmodeller för datakommunikation och deras lager med avseende på funktion , tjänster och protokoll .
05. have good knowledge of the principles , protocols and standards that tcp/ip-based networks and their applications are based on . ||| 04. ha god kännedom om de principer , protokoll och standarder som tcp / ip-baserade nätverk bygger på .
07. have a good understanding of the internet's limitations with respect to service warranties in connection with newly developed services . ||| 07. ha god förståelse för internets begränsningar med avseende på servicegarantier i samband med nyutvecklade tjänster .
08. explain how different types of computer networks are constructed relative to the transmission medium's characteristics , bandwidth requirements , coding methods and functions for error and flow control . ||| 08. redogöra för hur olika typer av datornätverk är uppbyggda i förhållande till transmissionsmediets egenskaper , kraven på bandbredden , kodningsmetoder och funktioner för fel- och flödeskontroll .
09. be able to seek deeper knowledge of the individual standards and protocols in the data communication field . ||| 09. söka djupare kunskap om enskilda standarder och protokoll inom datakommunikationsområdet .
10. be able to implement a simple application-layer protocol starting from its specification and applying communication through sockets . ||| 10. använda nätverksanalysprogram för att analysera datatrafik i ett lokalt nätverk med anslutning till internet .
11. have basic practical skills in the configuration of local networks . ||| 11. ha grundläggande praktiska färdigheter i konfiguration av lokala nätverk .
practical laborations are included to help students understand protocols and to practically use network equipment . ||| i kursen ingår även ett frivilligt moment med webb-baserade självstudier .
the student should have good understanding of computer organization ( course eda451 `` fundamentals of digital systems and computers '' or equivalent ) . ||| studenten ska ha god förståelse för datorers uppbyggnad ( kursen eda451 digital- och datorteknik eller motsvarande .
a course in programming ( e.g. java or c ) is a prerequisite . ||| en programmeringskurs ( t ex java eller c ) är ett krav .
knowledge of basic probability theory ( random variables ) and elementary graph theory ( shortest paths ) can be an advantage , but can also be acquired during the course via complementary reading . ||| kunskaper om grundläggande sannolikhetsteori ( stokastiska variabler ) och elementär grafteori kan vara en fördel , men kan också förvärvas under kursen via kompletterande studier .
computer networks are becoming an inherent and increasingly important part of many technical areas today . ||| nätverk av datorer blir en alltmer naturlig och viktigare beståndsdel inom många teknikområden .
this course focuses on the parts of data communication that practicing engineers normally will encounter in their daily work . ||| kursen inriktar sig på de aspekter av datakommunkation som en verksam ingenjör kommer i kontakt med i sitt yrkesarbete .
it is a basic course which offers an introductory presentation of data communication and computer networks . ||| detta är en grundkurs med bred inriktning mot området datakommunikation .
to pass the whole course , all the assignments and the written exam must be passed . ||| för godkänd kurs krävs godkänd skriftlig tentamen samt att studenten fått godkänt på alla obligatoriska laborationer och inlämningsuppgift .
the final grade with scale u/3 -5 is based on exam results . ||| slutbetyget i skalan u / 3-5 ges baserat på tentamens resultat .
01. have basic knowledge and skills in the field of data communications and computer networks , ||| 01. ha grundlägggande kunskaper och färdigheter inom området datakommunikation och datornätverk .
02. have good knowledge of reference models for computer communication in terms of function , services and protocols . ||| 02. ha god kännedom om referensmodeller för datakommunikation och deras lager med avseende på funktion , tjänster och protokoll .
04. have good knowledge of the tcp / ip model and the internet's structure and architecture ||| 06. ha god kännedom om tcp / ip-modellen om internets uppbyggnad och arkitektur samt bearbeta en grundläggande ip-adresseringsplan för ett intranät .
07. have a good understanding of the internet's limitations with respect to service warranties in connection with newly developed services . ||| 07. ha god förståelse för internets begränsningar med avseende på servicegarantier i samband med nyutvecklade tjänster .
08. explain how different types of computer networks are constructed relative to the transmission medium's characteristics , bandwidth requirements , coding methods and functions for error and flow control . ||| 08. redogöra för hur olika typer av datanätverk är uppbyggda i förhållande till transmissionsmediets egenskaper , kraven på bandbredden , kodningsmetoder och funktioner för fel- och flödeskontroll .
09. be able to seek deeper knowledge of the individual standards and protocols in the data communication field . ||| 09. söka djupare kunskap om enskilda standarder och protokoll inom datakommunikationsområdet .
10. be able to implement a simple application-layer protocol starting from its specification and applying communication through sockets . ||| 10. använda nätverksanalysprogram för att analysera datatrafik i ett lokalt nätverk med anslutning till internet .
11. have basic practical skills in the configuration of local networks . ||| 11. ha grundläggande praktiska färdigheter i konfiguration av lokala nätverk .
the student should have good understanding of computer organization ( course eda451 `` fundamentals of digital systems and computers '' or equivalent ) . ||| studenten ska ha god förståelse för datorers uppbyggnad ( kursen eda451 digital- och datorteknik eller motsvarande .
a course in programming ( e.g. java or c ) is a prerequisite . ||| en programmeringskurs ( t ex java eller c ) är ett krav .
knowledge of basic probability theory ( random variables ) and elementary graph theory ( shortest paths ) can be an advantage , but can also be acquired during the course via complementary reading . ||| kunskaper om grundläggande sannolikhetsteori ( stokastiska variabler ) och elementär grafteori kan vara en fördel , men kan också förvärvas under kursen via kompletterande studier .
computer networks cover a range of sub-specialties including : computer communication network concepts and protocols , network security , bsd socket api , and distributed fault-tolerance methods . ||| datornätverk täcker en rad underliggande områden så som : datorkommunikation nätverkskoncept och nätverksprotokoll , nätverkssäkerhet , bsd socket api och distribuerade feltolerans metoder .
mastery of computer network involves both theory and practice in the design , implementation and use of network protocols and services . ||| för att kunna bemästra datornätverk krävs både teoretiska och praktiska kunskaper om utformning , genomförande och användande av nätverksprotokoll och tjänster .
the aim of this course is to learn to design and analyze network protocols and to gain knowledge in existing communication networks including supporting systems and protocols fundamental tasks and methods in data communication networks . ||| syftet med kursen är att lära sig att utforma och analysera nätverksprotokoll och att inhämta kunskap om befintliga kommunikationsnät inklusive stödsystem och protokoll grundläggande funktioner och metoder i datakommunikationsnät .
experience with network oriented programming is part of the course . ||| erfarenhet av nätverksorienterad programmering ges som en väsentlig del av kursen .
this course offers learning experiences that involve hands-on experimentation and analysis as they reinforce student understanding of concepts and their application to real-world problems . ||| kursen innehåller praktiska experiment med analyser som avser att öka studentens förståelse för centrala begrepp och dessas återspeglingar i verkliga problem .
several laboratory experiments are given and involve api programming for fault-tolerance network systems , and internet interconnections and services from a practical perspective , and protocols ' design and analysis with a strong emphasis on self-stabilizing algorithms . ||| under laborationer tränas api programmering för feltoleranta nätverk , internet konfigurationer med tjänster ur praktiska perspektiv , samt protokoll med stark betoning på självstabiliserande algoritmer .
this course provides the students the ability to understand fundamental issues in the design of methods for computer network protocols . ||| kursens innehåll ger därför förståelse för grundläggande frågor som uppkommer under utformning av datornätverk och olika datornätverksprotokoll .
skills and abilities ||| färdighet och förmåga du kan visa förmåga att systematiskt definiera och analysera ett datornätverk i form av kommunikationsgrafer och som ett distribuerat system .
you should be able to design and develop your own network-oriented program and then test and demonstrate it in the lab . ||| du måste därför kunna konstruera och utveckla ett eget nätverk och därefter testa och demonstrera det i laboratoriet .
you are also expected to design distributed algorithms for computer networks and to show why they work . ||| du kan också utforma distribuerade algoritmer för datornätverk och att visa varför de fungerar .
lectures , exercises , home assignments , and laboratory assignments . ||| föreläsningar , övningar , hemuppgifter och laborationer .
you should have taken at least one course in computer programming . ||| du ska ha klarat av minst en kurs i programmeringsteknik .
this course aims to learn about software design and development using these approaches and principles , in both theory and practice . ||| kursen syftar till att lära sig om mjukvara design och utveckling med hjälp av dessa metoder och principer , i både teori och praktik
the course covers the extreme programing process and its project management . ||| kursen behandlar processen för xp ( extreme programming ) och dess projektledning .
written exam with maximum 60 points . ||| skriftlig tentamen med maximalt 60 poäng .
for pass , a minimum of 24 points and passed projects are required . ||| för godkänt krävs minst 24 poäng och ett godkänt projekt .
lead an agile project ||| leda ett agilt projekt
form an organic team ||| bilda ett organiskt team
work without a detail schedule ||| arbeta utan en detalj schema
be a part of a programming pair ||| vara en del av ett programmeringspar
understand consequences of collective ownership of the code ||| förklara konsekvenserna av ett kollektivt ägande av koden
master a code centric case tool ( like eclipse ) ||| bemästra ett kod-centrerat case-verktyg ( som eclipse )
use test driven development ||| använda testdriven utveckling
refactor a program ||| refactor ett program
conduct incremental planning using user stories ||| genomföra inkrementell planering med hjälp av användarbeskrivningar
limit the assignments in order to have a sustainable pace ||| begränsa uppdragen för att få en hållbar arbetstakt
develop programs using small and frequent iterations ||| utveckla program med hjälp av små och frekventa iterationer
be a part of a xp team ||| vara en del av en xp-team
to be eligible for this course the student should ||| för behörighet till kursen krävs minst
1) have a bachelor degree in software engineering , computer science or equivalent , including a successfully completed course in programming ( e.g. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 ( ooexempel , även annan programmering ok ) or equivalent ) , and ||| 1) en kandidatexamen i software engineering , programvaruteknik , datavetenskap eller motsvarande , inklusive an godkänd kurs i programmering ( t.ex. dat042 , dat050 , dat055 , dat170 , tda545 , tda550 eller motsvarande ) , och
2) a successfully completed course in practical software development or software engineering project ( e.g. dat255 software engineering project ) . ||| 2) en godkänd kurs i praktisk mjukvaruutveckling eller programvaruteknik projektet ( t.ex. dat255 software engineering project ) .
real-time systems play a vital role in many application domains including drive-by-wire automotive systems , intelligent traffic control systems , banking systems , and autonomous robots . ||| realtidssystem spelar en viktig roll i många tillämpningar såsom drive-by-wire-system för fordon , intelligenta trafikstyrsystem , banksystem och autonoma robotar .
for many real-time applications , the system must be designed with multiple processors in order to meet imposed application constraints . ||| för många av dessa tillämpningar måste systemet konstrueras med flera processorer för att kunna möta de uppsatta prestandakraven .
the course covers the following topics : ||| kursen behandlar följande ämnen :
background : motivation for , and definition of , real-time computing systems . ||| bakgrund : behov och definition av realtidssystem .
characteristics of real-time systems : application constraints , design methods , task models , run-time mechanisms , architectures . ||| egenskaper hos realtidssystem : tillämpningskrav , konstruktionsmetoder , processmodeller , exekveringsmodeller , arkitekturer .
evaluation of real-time systems : performance measures , evaluation methodologies . ||| utvärdering av realtidssystem : prestandamått , metoder för utvärdering .
single and multiprocessor scheduling : problem definition , terminology , and algorithms . ||| schemaläggning av enkel- och multiprocessorsystem : problemformulering , terminologi , algoritmer .
complexity theory and np-completeness in the context of real-time scheduling . ||| komplexitetsteori och np-kompletta problem inom realtidsschemaläggning .
real-time communications : protocols and end-to-end delay guarantees . ||| realtidskommunikation : protokoll och fördröjningsgarantier .
fault-tolerance techniques for real-time systems : models , algorithms and architectures . ||| metoder för feltolerans i realtidssystem : modeller , algoritmer , arkitekturer .
distributed clock synchronization . ||| metoder för distribuerad klocksynkronisering .
estimation of worst-case task execution times . ||| härledning av värsta-fallets exekveringstid för ett program .
two homework assignments with report submission , oral exam , and voluntary sit-down exam . ||| två hemuppgifter med rapportinlämning , muntlig examen samt frivillig skriftlig tentamen .
the final grade is a weighted sum of these . ||| slutligt betyg vägs samman från dessa .
after the course the students shall be able to : ||| efter avslutad kurs skall studenten kunna :
formulate requirements for computer systems used in time - and safety critical applications . ||| formulera kraven för ett datorsystem för tids- och säkerhetskritiska tillämpningar .
master the terminology of scheduling and complexity theory . ||| behärska den terminologi som används inom teorin för schemaläggning och beräkningskomplexitet .
describe the principles and mechanisms used for scheduling of task execution and data communication in real-time systems . ||| redogöra för de principer och mekanismer som används vid schemaläggning av processexekvering och datakommunikation i ett realtidssystem .
derive performance for , and be familiar with the theoretical performance limitations of , a given real-time system . ||| härleda prestanda för , samt känna till de teoretiska prestandabegränsningarna hos , ett givet realtidssystem .
the course is organized as a series of lectures . ||| kursen utgörs av en föreläsningsserie .
a weekly consultation session offers assistance regarding questions and problems related to the homework assignments . ||| till hjälp för detta har eleverna tillgång till ett veckovis konsultationspass som erbjuder hjälp i frågor och problem relaterade till hemuppgifterna .
the preparatory course in real-time systems ( eda222 ) or equivalent is required . ||| förberedande kurs i realtidssystem ( eda222 ) , eller likvärdig kurs , krävs .
courses in algorithms and computer architecture are strongly recommended . ||| kurser i algoritmer och datorarkitektur rekommenderas starkt .
* the essential elements and concepts of digital technology and different number systems . ||| * digitalteknikens grundläggande element och begrepp och olika talsystem .
* using boolean algebra to construct combinatorial networks and synchronous sequential circuits . ||| * boolesk algebras användning för konstruktion av kombinatoriska nät och synkrona sekvensnät .
* the computer's digital building blocks ( alu , data path , controller , memory , input and output devices ) . ||| * datorns digitala byggblock ( alu , dataväg , styrenhet , minne , in- och ut- enheter ) .
* the traditional processor architecture ( data-path and control unit and its instruction set ) as a synchronously operating digital machine . ||| * den traditionsenliga processorns uppbyggnad ( dataväg och styrenhet med instruktionsuppsättning ) som en synkront arbetande digitalmaskin .
* coding in machine language and assembly language . ||| * kodning i maskinspråk och assemblerspråk .
to pass the course the student must pass a written examination and the laboratory work . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
based on the written examination the final grade is either u , 3 , 4 or 5 . ||| baserat på tentamensresultatet ges betygen u , 3 , 4 eller 5 .
describe the computer structures and organisation ||| * beskriva datorns uppbyggnad och funktion .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- give a block-level description of how the data-path , register file , and arithmetic logic unit ( alu ) are connected , and ||| - beskriva på blocknivå hur styrenhet , dataväg , registerfil , aritmetik- och logikenhet ( alu ) kopplas samman i en centralenhet .
- explain architectural concepts such as accumulator architectures , risc , cisc , stack architectures , and pipelines . ||| - förklara begreppen ackumulatorarkitektur , risc , cisc , stackarkitektur och pipeline .
* describe and analyze/design the central processing unit's basic parts . ||| * beskriva och analysera / konstruera centralenhetens grundläggande delar .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- analyze / design a single alu and design control signal sequences for basic alu operations , and ||| - analysera / konstruera en enkel alu och utforma styrsignalsekvenser för grundläggande alu-operationer .
- analyze a single data path and construct and design control signal sequences for transfers between registers , alu , and memory . ||| - analysera en enkel dataväg , samt konstruera och utforma styrsignalsekvenser för överföringar mellan register , alu och minne .
* explain how the instructions created the control signal sequences . ||| * förklara hur instruktioner byggs upp av styrsekvenser .
the student should be able to use examples to explain and describe instruction formats , instruction decoding , and instruction execution . ||| detta betyder att man till exempel ska kunna förklara och med exempel beskriva instruktionsformat , instruktionsavkodning och instruktionsutförande
* describe and analyze the control unit ||| * beskriva och analysera den automatiska styrenhetens funktion och uppbyggnad .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe how the control signal sequences can be realized with either hard-wired logic or micro-programmed logic , and ||| - beskriva hur styrsignalsekvenser kan realiseras med fast kopplad logik såväl som mikroprogrammerad logik .
- analyze and design control signal sequences from instruction semantics . ||| - analysera och konstruera styrsignalsekvenser utgående från instruktioners semantik .
* explain the primary memory's core functions and describe , analyze , and design realize the main memory's connection to the cpu . ||| * förklara primärminnets grundläggande funktioner samt beskriva , analysera och konstruera primärminnets anslutning till centralenheten .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe different types of primary memory such as rom , prom , flash , sram , and dram , and explain the usefulness of each type for different purposes ; ||| - beskriva olika typer av primärminnen såsom rom , prom , flash , statiskt ram och dynamiskt ram , samt förklara respektive minnestyps användbarhet för olika ändamål .
- explain the concept of memory hierarchies ; ||| - förklara begreppet minneshierarki .
- describe , analyze , and realize address decoding logic for the primary memory ; ||| - beskriva , analysera och konstruera avkodningslogik för primärminne med digitala komponenter .
- describe , analyze and realize simple memory addressed ios with digital components ; and ||| - beskriva , analysera och konstruera enkel minnesadresserad io med digitala komponenter .
- explain/describe how the bus links the cpu and memory . ||| - förklara / beskriva hur centralenhet och minne kopplas samman med hjälp av datorns bussystem .
the student should be able to describe synchronous and asynchronous bus protocols and multiplexing . ||| detta betyder att man till exempel ska kunna beskriva synkrona och asynkrona bussprotokoll samt multiplexteknik .
* describe basic exception handling in computer systems . ||| * beskriva elementär undantagshantering i datorsystem .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- explain various hardware and software exception handling , such as restart , software-initiated exceptions , and externally generated exceptions ( interrupts ) , ||| - förklara undantagstyper såsom återstart , programvaruinitierade undantag samt externt genererade undantag ( avbrott ) .
- describe how the restart and software-initiated exception are performed in the controller , and ||| - beskriva hur återstart och programvaruinitierade undantag utförs i styrenheten .
- describe how interrupts are handled in the cpu . ||| - beskriva hur avbrott hanteras i centralenheten .
within digital technology * describe and use binary codes . ||| om digitalteknik * beskriva och använda binära koder .
the student should be able to ||| detta betyder att man till exempel ska kunna
- convert numbers between decimal , binary , and hexadecimal representation , and ||| - utföra omvandling av tal mellan decimal , binär och hexadecimal representation .
- perform addition , subtraction , multiplication , and division of binary integers . ||| - utföra addition och subtraktion med binära heltal .
* describe and analyze the computer's structure as a programmable digital system . ||| * beskriva och analysera datorns uppbyggnad som programmerbart digitalt system .
the combinatorial circuits considered here consist ( mainly ) of simple circuits such as multiplexers , de-multiplexers , full adders , bit shifters , etc. . ||| de kombinatoriska nät som här avses utgörs ( huvudsakligen ) av enklare nät såsom väljare , fördelare , heladderare , bitskiftare etc.
the sequential circuits considered here consist of memory elements and counters . ||| de sekvensnät som här avses utgörs av minneselement och räknare .
program in assembler ||| om assemblerprogrammering
* explain the stored program principle . ||| * förklara det lagrade programmets princip .
the student should be able to describe how a sequence of machine instructions stored in memory is executed . ||| detta betyder att man till exempel ska kunna beskriva hur en sekvens maskininstruktioner,som ordnats sekvensiellt i minnet , utförs .
* describe the programmer's model of the machine . ||| * beskriva programmerarens bild av maskinen , dvs instruktionsuppsättning och adresseringssätt .
the student should be able to describe the processor register set , explain the various types of instruction groups and addressing modes and describe them with examples . ||| detta betyder att man till exempel ska kunna förklara olika allmängiltiga typer av instruktionsgrupper och adresseringssätt samt beskriva dessa med exempel .
* describe , analyze , and design simple assembly language programs organized into subroutines . ||| * beskriva , analysera och konstruera enkla assemblerprogram , organiserade i subrutiner .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- structure programs using subroutines and stack management , and ||| - strukturera program med hjälp av subrutiner och stackhantering .
- write small routines including software-controlled and interrupt-driven input and output and delays . ||| - skriva små rutiner innefattande programstyrd och avbrottsstyrd in- och utmatning samt fördröjningar .
scheduled teaching consists of lectures , demonstrations , and supervised coding and simulation exercises . ||| schemalagd undervisning består av föreläsningar , demonstrationer och handledda simulerings- och kodningsövningar .
there are also supervised laboratory sessions for which students are required to prepare beforehand . ||| dessutom utförs handledda obligatoriska laborationer där förkunskapskontroll genomförs inför varje laboration .
throughout the course , the student will design increasingly complex digital building blocks of digital and computer systems . ||| under kursen konstruerar studenten genomgående större och större digitala byggblock ingående i digitala system och datorsystem .
the theory is presented in lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
students construct their building blocks and test their designs with the help of simulators during exercises . ||| studenten konstruerar sina byggblock och testar sin konstruktion med hjälp av simulatorer under simuleringsövningar .
the building blocks are subsequently realized in hardware during the lab sessions . ||| därefter implementerar studenten sina byggblock i hårdvara under laboration .
the realization is completed by linking the building blocks into a computer and programming it . ||| konstruktionsarbetet avslutas med att sammankoppla byggblocken till en dator och programmera denna .
* the essential elements and concepts of digital technology and different number systems . ||| * digitalteknikens grundläggande element och begrepp och olika talsystem .
* using boolean algebra to construct combinatorial networks and synchronous sequential circuits . ||| * boolesk algebras användning för konstruktion av kombinatoriska nät och synkrona sekvensnät .
* the computer's digital building blocks ( alu , data path , controller , memory , input and output devices ) . ||| * datorns digitala byggblock ( alu , dataväg , styrenhet , minne , in- och ut- enheter ) .
* the traditional processor architecture ( data-path and control unit and its instruction set ) as a synchronously operating digital machine . ||| * den traditionsenliga processorns uppbyggnad ( dataväg och styrenhet med instruktionsuppsättning ) som en synkront arbetande digitalmaskin .
* coding in machine language and assembly language . ||| * kodning i maskinspråk och assemblerspråk .
to pass the course the student must pass a written examination and the laboratory work . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
based on the written examination the final grade is either u , 3 , 4 or 5 . ||| baserat på tentamensresultatet ges betygen u,3,4 eller 5 .
describe the computer structures and organisation ||| om datorns uppbyggnad och funktion * beskriva datorns uppbyggnad och funktion .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- give a block-level description of how the data-path , register file , and arithmetic logic unit ( alu ) are connected , and ||| - beskriva på blocknivå hur styrenhet , dataväg , registerfil , aritmetik- och logikenhet ( alu ) kopplas samman i en centralenhet .
- explain architectural concepts such as accumulator architectures , risc , cisc , stack architectures , and pipelines . ||| - förklara begreppen ackumulatorarkitektur , risc , cisc , stackarkitektur och pipeline .
* describe and analyze / design the central processing unit's basic parts . ||| * beskriva och analysera / konstruera centralenhetens grundläggande delar .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- analyze / design a single alu and design control signal sequences for basic alu operations , and ||| - analysera / konstruera en enkel alu och utforma styrsignalsekvenser för grundläggande alu-operationer .
- analyze a single data path and construct and design control signal sequences for transfers between registers , alu , and memory . ||| - analysera en enkel dataväg , samt konstruera och utforma styrsignalsekvenser för överföringar mellan register , alu och minne .
* explain how the instructions created the control signal sequences . ||| * förklara hur instruktioner byggs upp av styrsekvenser .
the student should be able to use examples to explain and describe instruction formats , instruction decoding , and instruction execution . ||| detta betyder att man till exempel ska kunna förklara och med exempel beskriva instruktionsformat , instruktionsavkodning och instruktionsutförande
* describe and analyze the control unit ||| * beskriva och analysera den automatiska styrenhetens funktion och uppbyggnad .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe how the control signal sequences can be realized with either hard-wired logic or micro-programmed logic , and ||| - beskriva hur styrsignalsekvenser kan realiseras med fast kopplad logik såväl som mikroprogrammerad logik .
- analyze and design control signal sequences from instruction semantics . ||| - analysera och konstruera styrsignalsekvenser utgående från instruktioners semantik .
* explain the primary memory's core functions and describe , analyze , and design realize the main memory's connection to the cpu . ||| * förklara primärminnets grundläggande funktioner samt beskriva , analysera och konstruera primärminnets anslutning till centralenheten .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- describe different types of primary memory such as rom , prom , flash , sram , and dram , and explain the usefulness of each type for different purposes ; ||| - beskriva olika typer av primärminnen såsom rom , prom , flash , statiskt ram och dynamiskt ram , samt förklara respektive minnestyps användbarhet för olika ändamål .
- explain the concept of memory hierarchies ; ||| - förklara begreppet minneshierarki .
- describe , analyze , and realize address decoding logic for the primary memory ; ||| - beskriva , analysera och konstruera avkodningslogik för primärminne med digitala komponenter .
- describe , analyze and realize simple memory addressed ios with digital components ; and ||| - beskriva , analysera och konstruera enkel minnesadresserad io med digitala komponenter .
- explain / describe how the bus links the cpu and memory . ||| - förklara / beskriva hur centralenhet och minne kopplas samman med hjälp av datorns bussystem .
the student should be able to describe synchronous and asynchronous bus protocols and multiplexing . ||| detta betyder att man till exempel ska kunna beskriva synkrona och asynkrona bussprotokoll samt multiplexteknik .
* describe basic exception handling in computer systems . ||| * beskriva elementär undantagshantering i datorsystem .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- explain various hardware and software exception handling , such as restart , software-initiated exceptions , and externally generated exceptions ( interrupts ) , ||| * förklara undantagstyper såsom återstart , programvaruinitierade undantag samt externt genererade undantag ( avbrott ) .
- describe how the restart and software-initiated exception are performed in the controller , and ||| * beskriva hur återstart och programvaruinitierade undantag utförs i styrenheten .
- describe how interrupts are handled in the cpu . ||| * beskriva hur avbrott hanteras i centralenheten .
within digital technology ||| om digitalteknik
* describe and use binary codes . ||| * beskriva och använda binära koder .
* describe and analyze the computer's structure as a programmable digital system . ||| * beskriva och analysera datorns uppbyggnad som programmerbart digitalt system .
the student should be able to describe , analyze and construct the combinatorial and sequential circuits used to build a cpu . ||| detta betyder att man till exempel ska kunna beskriva , analysera och konstruera sådana kombinatoriska nät och sekvensnät som typiskt används för att bygga en dators centralenhet .
the combinatorial circuits considered here consist ( mainly ) of simple circuits such as multiplexers , de-multiplexers , full adders , bit shifters , etc. . ||| de kombinatoriska nät som här avses utgörs ( huvudsakligen ) av enklare nät såsom väljare,fördelare , heladderare , bitskiftare etc.
the sequential circuits considered here consist of memory elements and counters . ||| de sekvensnät som här avses utgörs av minneselement och räknare .
program in assembler ||| om assemblerprogrammering
* explain the stored program principle . ||| * förklara det lagrade programmets princip .
the student should be able to describe how a sequence of machine instructions stored in memory is executed . ||| detta betyder att man till exempel ska kunna beskriva hur en sekvens maskininstruktioner,som ordnats sekvensiellt i minnet , utförs .
* describe the programmer's model of the machine . ||| * beskriva programmerarens bild av maskinen , dvs instruktionsuppsättning och adresseringssätt .
the student should be able to describe the processor register set , explain the various types of instruction groups and addressing modes and describe them with examples . ||| detta betyder att man till exempel ska kunna förklara olika allmängiltiga typer av instruktionsgrupper och adresseringssätt samt beskriva dessa med exempel .
* describe , analyze , and design simple assembly language programs organized into subroutines . ||| * beskriva , analysera och konstruera enkla assemblerprogram , organiserade i subrutiner .
the student should be able to : ||| detta betyder att man till exempel ska kunna
- structure programs using subroutines and stack management , and ||| - strukturera program med hjälp av subrutiner och stackhantering .
- write small routines including software-controlled and interrupt-driven input and output and delays . ||| - skriva små rutiner innefattande programstyrd och avbrottsstyrd in- och utmatning samt fördröjningar .
scheduled teaching consists of lectures , demonstrations , and supervised coding and simulation exercises . ||| schemalagd undervisning består av föreläsningar , demonstrationer och handledda simulerings- kodnings- övningar .
there are also supervised laboratory sessions for which students are required to prepare beforehand . ||| dessutom utförs handledda obligatoriska laborationer där förkunskapskontroll genomförs inför varje laboration .
throughout the course , the student will design increasingly complex digital building blocks of digital and computer systems . ||| under kursen konstruerar studenten genomgående större och större digitala byggblock ingående i digitala system och datorsystem .
the theory is presented in lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
students construct their building blocks and test their designs with the help of simulators during exercises . ||| studenten konstruerar sina byggblock och testar sin konstruktion med hjälp av simulatorer under simuleringsövningar .
the building blocks are subsequently realized in hardware during the lab sessions . ||| därefter implementerar studenten sina byggblock i hårdvara under laboration .
the realization is completed by linking the building blocks into a computer and programming it . ||| konstruktionsarbetet avslutas med att sammankoppla byggblocken till en dator och programmera denna .
software development in c and assembly language , testing and troubleshooting . ||| programutveckling i c och assemblerspråk , test och felsökning .
structured assembler , basic code generation . ||| strukturerad assemblerprogrammering , grunder för kodgenerering .
first level system programming , ie how the computer is programmed to boot from power on , and handling of different types of exceptions such as internal errors , events and interrupts . ||| första nivåns systemprogrammering , dvs. hur datorn programmeras för start från spänningstillslag och hantering av olika typer av undantag så som interna fel , händelser och avbrott .
programming devices for parallel input and output , time management and programming of timers . ||| programmering av kretsar för parallell in- och utmatning , tidshantering och programmering av räknarkretsar .
basics of computer communications and programming devices for serial communications . ||| grunderna för datorkommunikation och programmering av kretsar för seriekommunikation .
moreover , a simple time-sharing systems ( in c and assembly language ) with special emphasis on the use of peripheral circuits , is implemented . ||| dessutom implementeras ett enkelt tidsdelningssystem ( i c och assemblerspråk ) med speciell tonvikt på användning av periferikretsar .
examination is based on a written exam and approved laboratory exercises . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
based on the exam result , the grade f , 3 , 4 , or 5 are given . ||| baserat på tentamensresultatet ges betygen u , 3 , 4 eller 5 .
write simple assembly language programs using the selected architecture's instruction set . ||| skriva enkla assemblerprogram med användande av den valda arkitekturens instruktionsuppsättning .
write simple machine oriented c programs using the programming language's data types and control structures . ||| skriva enkla maskinorienterade c-program med användande av programspråkets datatyper och styrstrukturer .
describe the assembler equivalent of typical programming structures in c . ||| beskriva motsvarigheten i assembler till typiska programstrukturer i c .
apply tools from the course to develop programs ||| utnyttja de i kursen använda verktygen för programutveckling på ett adekvat sätt .
contribute to the construction and programming of simple embedded systems with given components ||| medverka vid konstruktion och programmering av enkla inbyggda system med givna komponenter .
construct systems generating various types of exceptional events ( internal exceptions , interrupts , restarts ) ||| konstruera system innefattande olika typer av undantag ( interna undantag , avbrott , återstart ) .
describe and illustrate a few basic types of peripherals and their use . ||| beskriva och exemplifiera några olika typer av digitala kringkomponenter och deras användning .
during the course , the student designs progressively bigger and bigger building blocks of software in c and assembler . ||| under kursen konstruerar eleven större och större programblock i assembler och c .
the theory is acquired through lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
the student designs the blocks then carries out tests with the aid of simulators during simulation exercises . ||| eleven konstruerar sina programoch testar dessa med hjälp av simulatorer under simuleringsövningar och självstudier .
in preparation for laboratory exercises the student will finally adapt the software in order to enable hardware verification of the function . ||| inför laborationer anpassar eleven sina program så att funktionen dessutom kan verifieras i hårdvara .
software development in c and assembly language , testing and troubleshooting . ||| programutveckling i c och assemblerspråk , test och felsökning .
structured assembler , basic code generation . ||| strukturerad assemblerprogrammering , grunder för kodgenerering .
first level system programming , ie how the computer is programmed to boot from power on , and handling of different types of exceptions such as internal errors , events and interrupts . ||| första nivåns systemprogrammering , dvs. hur datorn programmeras för start från spänningstillslag och hantering av olika typer av undantag så som interna fel , händelser och avbrott .
programming devices for parallel input and output , time management and programming of timers . ||| programmering av kretsar för parallell in- och utmatning , tidshantering och programmering av räknarkretsar .
basics of computer communications and programming devices for serial communications . ||| grunderna för datorkommunikation och programmering av kretsar för seriekommunikation .
moreover , a simple time-sharing systems ( in c and assembly language ) with special emphasis on the use of peripheral circuits , is implemented . ||| dessutom implementeras ett enkelt tidsdelningssystem ( i c och assemblerspråk ) med speciell tonvikt på användning av periferikretsar .
examination is based on a written exam and approved laboratory exercises . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
write simple assembly language programs using the selected architecture's instruction set . ||| skriva enkla assemblerprogram med användande av den valda arkitekturens instruktionsuppsättning .
write simple machine oriented c programs using the programming language's data types and control structures . ||| skriva enkla maskinorienterade c-program med användande av programspråkets datatyper och styrstrukturer .
describe the assembler equivalent of typical programming structures in c . ||| beskriva motsvarigheten i assembler till typiska programstrukturer i c .
apply tools from the course to develop programs ||| utnyttja de i kursen använda verktygen för programutveckling på ett adekvat sätt .
contribute to the construction and programming of simple embedded systems with given components ||| medverka vid konstruktion och programmering av enkla inbyggda system med givna komponenter .
construct systems generating various types of exceptional events ( internal exceptions , interrupts , restarts ) ||| konstruera system innefattande olika typer av undantag ( interna undantag , avbrott , återstart ) .
describe and illustrate a few basic types of peripherals and their use . ||| beskriva och exemplifiera några olika typer av digitala kringkomponenter och deras användning .
during the course , the student designs progressively bigger and bigger building blocks of software in c and assembler . ||| under kursen konstruerar eleven större och större programblock i assembler och c .
the theory is acquired through lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
the student designs the blocks then carries out tests with the aid of simulators during simulation exercises . ||| eleven konstruerar sina programoch testar dessa med hjälp av simulatorer under simuleringsövningar och självstudier .
in preparation for laboratory exercises the student will finally adapt the software in order to enable hardware verification of the function . ||| inför laborationer anpassar eleven sina program så att funktionen dessutom kan verifieras i hårdvara .
this course covers the underlying principles and techniques for network and communication security . ||| kursen täcker de underliggande principerna och teknikerna för nätverks- och kommuniktionssäkerhet och en god förkunskap i datakommunikation är därför ett krav .
the course covers many topics related to communications and network security : ||| kursen täcker många olika ämnen och tekniker för att säkra system :
network attacks , encryption and random number generation ||| nätverksattacker , kryptering och vikten av bra slumptalsgenerering
analysis of weaknesses and attacks against common protocols such as tcp , udp , ip , and icmp ||| analys av svagheter och attacker mot vanliga protokoll såsom tcp , udp , ip , och icmp
denial of service ( dos ) attacks , host and network scanning and operating system fingerprinting ||| denial of service ( dos ) attacks , host- och nätverksscanning , " operating system fingerprinting "
access control , authentication mechanisms , passwords , radius , aaa , pki , key distribution , kerberos ||| accesskontroll , autentiseringsmekaniser , lösenord , radius , aaa , pki , nyckeldistribution , kerberos
identity management , certificates , x. 509 , certificate revocation , ldap ||| " identity management " , certifikat , x.509 , ldap
security protocols such as ipsec , ssl and ssh ||| genomgång av protokoll designade för säkerhet : ipsec , ssl och ssh
security in wireless networks , wep , wpa , wpa2 , ieee 802.1 x , eap ||| säkerhet i trådlösa nätverk : wep , wpa , wpa2 , ieee 802.1x , eap
network design , firewalls , proxies , nat , ingress and egress filtering ||| nätverksdesign , brandväggar , proxies , nat , ingress and egress filtering ,
virtual private networks ( vpn ) , tunnelling protocols , network segmentation and remote access ||| virtuella privata nätverk ( vpn ) , tunnling , nätverkssegmentering och remote access
link level security , vlan technology , security in arp , dhcp and dns ||| link level security : vlan , arp , säkerhet i dhcp och dns
written exam and passed laboratory exercises . ||| skriftlig examen och godkända laborationer .
have detailed knowledge and the ability to critically analyse and design secure networks , applications and systems ||| ha god kunskap i hur man kritiskt granskar och designar säkra nätverk , applikationer och system
have a fundamental understanding of what makes systems vulnerable and be able to predict new attack methods before they become a reality ||| ha grundläggande förståelse av vilka svagheter kommunicerande system har och kunna förutse potentiella problem i olika protokoll
have enough knowledge to evaluate protocols and ability to draw conclusions about the level of security they can offer ||| ha grundläggande kunskap i hur protokoll kan utvärderas och kunna utvärdera vilken säkerhet protokoll kan förväntas erbjuda
understand what impact the selection of different protocols and security architectures can have to an application or a system ||| ha förståelse för vilken betydelse nätverkssäkerhetsproblem kan ha för applikationer och för hela systems säkerhet
have an understanding of research work in the field by reading conference and research reports in related areas ||| ha kommit i kontakt med forskningsaktiviteter inom området genom att läsa aktuella konferens- och forskningsrapporter inom området
the course consists of a series of lectures and laborative exercises . ||| kursen består av föreläsningar och laborationer .
algorithms and data structures comprises fundamental components in most modern software products . ||| algoritmer och datastrukturer utgör fundamentala byggstenar i de flesta moderna programvaror .
knowledge and skill in techniques for the construction and analysis of algorithms are important tools in the construction of correct and efficient programs . ||| kunskaper och färdigheter i tekniker för konstruktion och analys av algoritmer är viktiga verktyg vid produktion av korrekta och effektiva program .
knowledge of data abstraction and data structures is important in the construction of , use , and maintenance of adaptable and reusable program components . ||| förtrogenhet med begreppen dataabstraktion och datastruktur är nödvändig vid konstruktion , användning och underhåll av förändringsbara och återanvändbara programkomponenter .
the course shall give knowledge and skill in the construction and use of algorithms and data structures , and an introduction to various techniques for the analysis of algorithms together with insights in the advantages of using data abstraction in program development . ||| kursen skall ge kunskaper och färdigheter i konstruktion och användning av algoritmer och datastrukturer , introduktion till olika tekniker för analys av algoritmer , samt insikter i fördelarna med dataabstraktion vid programutveckling .
java is used for coding . ||| i kursen används java som programmeringsspråk .
algorithm techniques : iterative and recursive algorithms , proof by induction , divide and conquer , backtracking , dynamic programming . ||| algoritmtekniker : iterativa och rekursiva algoritmer , induktionsbevis , divide and conquer , backtracking , dynamisk programmering .
analysis of the resource demands of algorithms and data structures with respect to computation timed and memory consumption . ||| analys av algoritmers och datastrukturers resurskrav med avseende på beräkningstid och minnesbehov .
asymptotic complexity , average complexity and worst case complexity . ||| asymptotisk komplexitet , genomsnittlig komplexitet och värsta-fall-komplexitet .
linear and binary search . ||| linjär- och binärsökning .
sorting algorithms and their properties . ||| olika sorteringsalgoritmer och deras egenskaper .
the concepts abstract data type and data structure . ||| begreppen abstrakt datatyp och datastruktur .
data structures : vectors , strings , stacks , queues , lists , trees , binary search trees , hash tables , priority queues , graphs , sets . ||| datastrukturer : vektorer , strängar , stackar , köer , listor , träd , binära sökträd , hashtabeller , prioritetsköer , grafer , mängder .
common applications . ||| vanliga användningsområden .
typical properties and time complexity for the operations in the various structures . ||| typiska egenskaper och tidskomplexitet för strukturernas operationer .
standardised algorithms and classes for data structures . ||| standardiserade algoritmer och klasser för datastrukturer .
implementation of data structures . ||| implementering av datastrukturer .
mandatory assignments and written exam . ||| obligatoriska inlämningsuppgifter och skriftlig tentamen .
final grade is obtained after passed assignments and is based on the grade of the written exam . ||| slutbetyg i skala 3-5 ges efter godkända inlämningsuppgifter och baseras på tentamen .
use various algorithm techniques as tools for problem solving in program construction . ||| använda olika algoritmtekniker som problemlösningsverktyg vid programkonstruktion .
perform analysis of the resource demands of algorithms and data structures . ||| göra enkla analyser av algoritmers och datastrukturers resurskrav .
use various data structures and gain basic knowledge about important applications . ||| använda olika datastrukturer och känna till viktiga tillämpningar .
use standard software libraries for data structures and algorithms . ||| använda standardbibliotek för datastrukturer och algoritmer .
implement data structures in an object oriented language . ||| implementera egna datastrukturer i ett objektorienterat språk .
elementary skills in discrete mathematics . ||| elementära kunskaper i diskret matematik .
the following concepts will be described in different levels in the course : process , process communications , critical regions , semaphores , mutual exclusion and synchronizations , deadlock , memory management , timing constraints ( " soft/hard " systems ) , scheduling , time- and event trigged systems , schedulability analysis for systems with static and dynamic process priorities , distributed real-time systems and data communications for small embedded real-time embedded systems . ||| i kursen tas följande begrepp upp i olika fördjupningsgrad : process , processkommunikation , semaforer , ömsesidig uteslutning och synkronisering , låsning , minneshantering , tidshantering , schemaläggning , tidskrav ( " mjuka / hårda " system ) , tidsstyrda och händelsestyrda system , schemaläggningsanalys för system med statiska och dynamiska processprioriteter , distribuerade realtidssystem samt datakommunikation för små inbyggda realtidssystem .
the course describes the implementation of a small real-time kernel for a microcomputer system . ||| kursen beskriver implementering av en liten realtidskärna för ett mikrodatorsystem .
the course also includes use of arrays and stacks in c-programs in connection with exercises and studies of a real time kernel . ||| kursen tar även upp hantering av listor och stackar i c-program i samband med övningar och studier av en realtidskärna .
a large laboratory assignment and a final laboratory report gives experience of software development for embedded systems . ||| en större laborationsuppgift och en avslutande laborationsrapport ger erfarenheter av programutveckling för inbyggda system .
the course ends with a written exam . ||| kursen avslutas med en skriftlig examen .
- describe and understand the concepts of embedded system , process , parallel processes , shared resourced and distributed systems . ||| - beskriva och förstå begreppen inbyggda system , process , parallella processer , delade resurser samt distribuerade system .
- explain the concepts of critical regions , mutual exclusion , starvation , deadlock and synchronizing of processes . ||| - förklara begreppen kritisk region , ömsesidig uteslutning , svält , deadlock samt synkronisering av processer .
- describe and understand the general structure of , and the function of , a real-time kernel for small embedded system . ||| - beskriva och förstå den allmänna uppbyggnaden av , och funktionen hos , en realtidskärna för små inbyggda system .
- develop programs composed of multiple processes , for small systems with support of a real-time kernel . ||| - utveckla program bestående av flera processer för små applikationer med stöd av en realtidskärna .
- use pointers and dynamic memory allocation in connection with development of c-programs for managing arrays and stacks . ||| - kunna använda pekare och dynamisk minneshantering i samband med utveckling av c-program för hantering av listor och stackar mm .
- explain the meaning of , and the differences between , the concepts of static respective dynamic scheduling . ||| - förklara innebörden av och skillnaden mellan begreppen statisk respektive dynamisk schemaläggning .
- apply schedulability analysis on small systems composed of several well-specified processes with timing constraints ( period and deadline ) . ||| - tillämpa schemaläggningsanalys på enklare system bestående av flertalet specificerade processer med tidskrav ( period och deadline ) .
- describe the general structure and characteristics of the can protocol . ||| - beskriva grundläggande struktur och egenskaper hos can-protokollet .
- develop programs for a distributed real-time system consisting of nodes connected to a can-bus . ||| - utveckla enklare program för ett distribuerat realtidssystem baserat på en gemensam can-buss .
the course is organized into lectures , exercises , and a laboratory assignment . ||| undervisningen sker i form av föreläsningar , övningar och en laborationsuppgift .
circuit-switching and packet-switching methods used for data networks . ||| kretskoppling respektive paketkoppling för datornätverk .
reference models for data communications . ||| referensmodeller för datakommunikation .
distributed applications and application protocols , the www , dns , e-mail . ||| distribuerade applikationer och applikationsprotokoll , www , dns och e-post .
the socket api . ||| sockets .
principles of relieble and unreliable data transfer , the tcp and udp transport protocols . ||| principer för tillförlitlig respektive datagram dataöverföring , tcp och udp .
biterror , flow and congestion control . ||| bitfel- , flödes- och stockningskontroll .
internet protocols , ipv4 and ipv6 . ||| internets protokoll och addressering , ipv4 och ipv6 .
autonomous systems and internet routing . ||| routing på internet och autonoma system .
mac algorithms . ||| mac-algoritmer .
link protocols and error detection codes . ||| länkprotokollen och felupptäckande koder .
local area networks lans . ||| lokala nätverk lan .
ethernet . ||| ethernet .
wireless lan . ||| trådlöst lan .
multimedia applications . ||| multimedia applikationer .
security in computer networks . ||| säkerhet i datornätverk .
firewalls and packet filtering , securing wlans . ||| brandvägg och paketfiltrering , skydd för wlan .
common to most of the outcomes is that they are assessed through written exam . ||| gemensamt för de flesta lärandemålen är att de examineras genom skriftlig tentamen .
the course includes compulsory assignments which consist of three laboratory assignments and one home assignment . ||| i kursen ingår obligatoriskt moment som består av tre laborationer samt en inlämningsuppgift .
to pass the entire course it is required that all laboratory work and home assignments are approved pass . ||| för att bli godkänd i hela kursen krävs det att samtliga laborationer och inlämningsuppgiften är godkända .
laboratory work and home assignments will be done in groups of two students . ||| laborationer och inlämningsuppgiften görs i grupper om två studenter .
but since the outcome 9 is about trying to look for deeper knowledge in data communications field , the group will be required a mandatory home assignment containing a number of sub-tasks which include the task of obtaining deeper knowledge . ||| men eftersom målet 9 handlar om att söka djupare kunskap inom datakommunikationsområdet kommer gruppen att få obligatorisk inlämningsuppgift innehållande antal deluppgifter som bl.a. handlar om att inhämta djupare kunskaper .
the assignment will be reported and it must be approved after review by examining teacher or teaching assistant , otherwise it will be returned with feedback for the completion and final approval . ||| inlämningsuppgiften redovisas i en rapport och måste bli godkänd efter granskning av examinerande läraren eller lärarassistent , annars blir det retur med feedback för komplettering och slutgiltigt godkännande .
outcomes 10 and 11 have a practical nature and are examined by the teacher or teaching assistant who supervises and observes students in a laboratory work in ca 12h divided into three labs . ||| målen 10 och 11 har en praktisk karaktär och examineras genom att examinerande lärare eller lärarassistent handleder och iakttar kursdeltagarna i laboratoriemiljö ca 12h uppdelat i tre laborationer .
common to outcomes 10 and 11 is that the sudents have to record the results and answers to questions in the lab-pm when they work in practice with the lab tasks . ||| gemensamt för målen 10 och 11 är att det krävs att sudenterna antecknar resultaten och svar på frågorna i lab-pm när de arbetar praktiskt med uppgifterna .
in addition and in order to finally examine the outcome 10 a written report of the results is required . ||| dessutom för att slutgiltigt examinera mål 10 krävs det skriftlig rapport på resultaten vid arbetet med laboration 1 .
the report must be approved after review in the same manner as the assignment . ||| rapporten måste godkännas efter granskning på samma sätt som inlämningeuppgiften .
for laboratory work 2 and 3 it is required a successful work including well-filled lab-pm which will be approved by the supervisor on site at the end of each lab session . ||| för laborationer 2 och 3 godkänns lyckat arbete inklusive väl-ifylld lab-pm av handledaren på plats i slutet av varje labbtillfälle .
the final grade with scale u / 3-5 is based on the exam results . ||| slutbetyget ges i skalan u / 3-5 ges baserat på tentamens resultat .
show basic knowledge and skills in the field of data communications and computer networks . ||| redovisa grundlägggande kunskaper och färdigheter inom området datakommunikation och datornätverk .
show good knowledge of layered reference models for data communications in terms of function , services and protocols . ||| redovisa god kännedom om referensmodeller för datakommunikation och deras lager med avseende på funktion , tjänster och protokoll .
make use of layered reference models to create understanding on the design and usage of various computer networks . ||| tillämpa referensmodellerna för att skapa förståelse om uppbyggnaden och användning av olika datornätverk .
show good knowledge of the principles , protocols , and standards used for tcp/ip-based networks . ||| redovisa god kännedom om de principer , protokoll och standarder som tcp / ip-baserade nätverk bygger på .
show basic knowledge of the most important application protocols . ||| redovisa grundläggande kunskaper om de viktigaste applikationsprotokollen .
show good knowledge of the tcp / ip model on the internet's structure and architecture , and work out a basic ip addressing plan for an intranet . ||| redovisa god kännedom om tcp / ip-modellen om internets uppbyggnad och arkitektur samt bearbeta en grundläggande ip-adresseringsplan för ett intranät .
show good understanding of the limitations of the internet on the provided services as well as the impact on the newly developed applications and services . ||| redovisa god förståelse för internets begränsningar med avseende på servicegarantier i samband med nyutvecklade tjänster .
describe how different types of computer networks are constructed in relation to the transmission medium's characteristics , the requirements for bandwidth , coding methods and functions for error and flow control . ||| redogöra för hur olika typer av datornätverk är uppbyggda i förhållande till transmissionsmediets egenskaper , kraven på bandbredden , kodningsmetoder och funktioner för fel- och flödeskontroll .
seek deeper knowledge of specific standards and protocols in data communications field . ||| söka djupare kunskap om enskilda standarder och protokoll inom datakommunikationsområdet .
use network analysis software to analyze data traffic on a local network with internet access . ||| använda nätverksanalysprogram för att analysera datatrafik i ett lokalt nätverk med anslutning till internet .
show basic practical skills in the configuration of local networks . ||| redovisa grundläggande praktiska färdigheter i konfiguration av lokala nätverk .
lectures , home assignments , and laboratory assignments . ||| undervisningen omfattar föreläsningar , hemuppgift och laborationer .
the course comprises also self-study of a web-based course material . ||| i kursen ingår även ett frivilligt moment med självstudier av webbaserat kursmaterial .
the course covers of the following items ||| kursen innehåller följande moment :
- general microcontroller technology ||| - allmän mikrokontrollerteknologi
- microcontroller architecture , hardware oriented description of a commercial microcontroller ||| - mikrodatorarkitektur , hårdvarumässig beskrivning av en kommersiell mikrokontroller
- the different working modes of a microscontroller ||| - mikrokontrollerns olika arbetssätt
- programming structure , addressing modes , instruction set ||| - programmeringsmodell , adresseringssätt , instruktionsuppsättning
- assembler programming , stack handling , subroutines , exceptions and restart ||| - assemblerprogrammering , stackhantering , subrutiner , avbrott och återstart
- machine oriented c programming , addressing , subroutines with parameter transfer and exception handling ||| - maskinnära c-programmering , adressering , subrutiner med tillhörande parameteröverföring samt avbrottshantering
- in and out ports , handshaking , time sequences ||| - in- och utportar , handskakning , tidsförlopp
- counter and timer circuits ||| - räknar- och timerkretsar
- asynchronous serial interface ( sci ) and synchronous serial interface ( spi ) ||| - asynkrona seriella gränssnitt ( sci ) och synkrona seriella gränssnitt ( spi )
- controller area network ( can ) ||| - controller area network ( can )
- pulse width modulation ( pwm ) , analog/digital conversion ( adc ) and digital/analog conversion ( dac ) ||| - pulsbreddsmodulering ( pwm ) , analog / digitalomvandling ( a / d ) samt digital / analogomvandling ( d / a )
the examination will be carried out through continous , individual accounts for the different parts of the course . ||| examination sker genom kontinuerlig , individuell redovisning av ingående kursmoment .
acceptment of these accounts will give the grade three ( 3 ) . ||| godkännande av dessa element ger betyget tre ( 3 ) .
for higher grades ( 4 or 5 ) a volontary examination will be arranged ||| för överbetyg ( 4 och 5 ) anordnas en frivillig tentamen
understand , make out and formulate problems from different aspects : architecture , construction and implementation ||| förstå , urskilja och formulera problem ur olika aspekter : arkitektur , konstruktion och implementering .
build a functional microcontroller system consisting of a microprocessor and commonly used interfaces ||| bygga ett funktionsdugligt mikrodatorsystem bestående av processor med vanligt förekommande gränssnitt .
understand and use development systems for the development and debugging of microprocessor code and develop programs that efficiently use the resourses of the microcontroller used ||| förstå och använda utvecklingssystem för utveckling av samt felsökning av program samt att utveckla program som effektivt använder befintliga resurser hos den använda mikrodatorn .
document and present the results and analyse and reflect on difficulties , problems and shortages together with more positive experiences ||| dokumentera och presentera resultatet samt analysera och reflektera kring svårigheter , problem och brister samt positiva erfarenheter .
the course is divided into three parts ||| kursen omfattar tre delar :
1 a theoretical part with lectures and seminars ||| 1. teoridel med föreläsningar och seminarier
2 an introductory laboration assignment with the intention to introduce the main funcions of a microcontroller ||| 2. en inledande laboration vars avsikt är att introducera en mikrokontrollers huvudfunktioner
3 additional more profound laboration assignments where the student gets to use the microcontoller in larger systems together with interfaces to internal and external devices ||| 3. ytterligare mer omfattande laborationer där eleven övar sig i att använda mikrokontrollern i större system tillsammans med gränssnitt mot interna och externa periferienheter
the course comprises basic skills and knowledge of the internet technology and tcp/ip protocol suite , in particular the internet access and routing protocols . ||| kursen omfattar huvudmoment som handlar om grundläggande internetteknik och tcp / ip-protokollen för internetanslutning och routingteknik .
the course is mainly focusing on the operation and engineering of ip routers and ethernet switches . ||| arbetssättet för ip-routrar och lan-switchar ligger i centrum för denna kurs .
the practical skills gained during the course , which correspond to the cisco certification in ccna routing and switching , will be carried out in a reality-like laboratory environment . ||| under kursens gång genomförs en gedigen tillämpning för de färdigheter som motsvarar cisco-certifiering ccna routing och switching i en praktisk labbmiljö .
the course contains the following parts : ||| kursen innehåller följande huvuddelar :
introduction to networks ( review ) : the osi refernce model for data communications . ||| grundläggande nätverksteknik : osi-modellen för datakommunikation .
tcp/ip-architecture for the internet . ||| tcp / ip-arkitektur för internet .
application and transport layer protocols . ||| applikations- och transportprotokollen .
internet protocol ip addressing and subnetting . ||| internetprotokollet ip , adressering och subnetting .
local area networks ( lan ) and ethernet technology . ||| lokala nätverk ( lan ) och ethernet-standarder .
routing and switching essentials : managing the router as a core internetworking device , basic router configuration , routing , path determination algorithms , routing protocol rip as distance-vector routing protocol . ||| grundläggande routing- och switchingteknik : routersuppbyggnad och grundläggande konfiguration , principer för routing , vägvalsalgoritmer och protokollet rip som " distance-vector " routingprotokoll .
ip addressing with variable subnet mask ( vlsm ) beside some addressing methods like dynamic ip configuration ( dhcp ) och address translation ( nat ) . ||| ip-adressering med variabel nätmask ( vlsm ) och adresseringsmetoder som dynamisk ip-konfiguration ( dhcp ) och adressöversättning ( nat ) .
routing within an autonomous system ( as ) . ||| routing inom autonomt system ( as ) .
routing protocols with vlsm subnetting : ripv2 , eigrp and the standard link-state routing protocol ospf . ||| routingprotokoll med vlsm : ripv2 , eigrp och standardprotokollet ospf som " link-state " routingprotokoll .
switching basics . ||| grundläggande switchkonfiguration .
spanning tree protocol ( stp ) . ||| spanning tree protocol ( stp ) .
virtual lans and frame-tagging . ||| virtuella lan och ram-taggning .
routing between vlans . ||| routing mellan vlans .
scaling networks : configuring routers and switches for advanced functionality considering the architecture , components , and operations of larger and more complex networks . ||| routing och switching i komplexa nätverk : konfigurering av routrar och switchar för avancerade funktioner med avseende på arkitektur , komponenter och drift av större och mer komplexa nätverk .
troubleshooting routers and switches and resolve common issues with using single-area ospf , multiarea ospf , enhanced interior gateway routing protocol ( eigrp ) , and stp in both ipv4 and ipv6 networks . ||| felsökning av routrar och switchar och lösa vanliga problem med ; enkelarea ospf , multiarea ospf , enhanced interior gateway routing protocol ( eigrp ) , och stp i både ipv4- och ipv6-nätverk .
acquiring the knowledge and skills needed to install a wireless lan ( wlan ) in a small or medium-sized networks . ||| att skaffa sig de kunskaper och färdigheter som behövs för att installera ett trådlöst nätverk ( wlan ) i ett litet eller medelstort nätverk .
implementing vlans , rapid spanning tree protocol ( rstp ) , per vlan spanning tree plus protocol ( pvst + ) , and etherchannel . ||| implementering av vlans , rapid spanning tree protocol ( rstp ) , per-vlan spanning tree plus protocol ( pvst+ ) , och etherchannel .
connecting networks : wan technologies and network services required by converged applications in a complex network . ||| teknologier för globala nätverk ( wan ) : wan-teknlogier och nätverkstjänster som krävs av konvergerade applikationer i ett komplext nätverk .
link protocols in wans e.g. hdlc , point-to-point ( ppp ) protocols and frame relay . ||| länkprotokoll i wan t.ex. hdlc , punkt-till-punkt protokoll ( ppp ) , och frame relay .
broadband and serial connections . ||| bredband och seriella anslutningar .
knowledge and skills needed to implement virtual private network ( vpn ) . ||| kunskaper och färdigheter som behövs för att etablera virtuella privata nätverk ( vpn ) .
network monitoring and troubleshooting using syslog , snmp , and netflow . ||| nätverksövervakning och felsökning med hjälp av syslog , snmp , och netflow .
borderless networks , data centers and virtualization . ||| moderna nätverk , datacenter och virtualisering .
the course is divided into three parts ; basic routing and switching , routing och switching in complex networks , and wan access . ||| kursen är uppdelad i tre delar , grundläggande routing och switching , routing och switching i komplexa nätverk , och wan-access .
each part is graded by same examination methods . ||| varje del betygsätts på samma examinationsformer .
the intended outcomes are examined in three ways . ||| de tilltänkta lärandemålen examineras på tre sätt .
the first is direct supervision by the examiner and assistants during the lab sessions and then assesing the laboratoriework by lab-skills exam in laboratory at the end of each part . ||| det första är direkt överinsyn av examinatorn och assistenterna under laborationer och sedan bedöma labbarbetet med hjälp av labbtest i labbsalen i slutet av varje del .
the second is evaluating the results of the case study that will be worked out in relation to each part . ||| det andra är att utvärdera resultaten av projektarbete som kommer att utarbetas i samband med varje del .
the work of the case study is done electronically using network simulator and by delivering the results as uploaded files ; simulation , diagram , tables and report . ||| arbetet med projektet sker elektroniskt med hjälp av nätverkssimulator och genom att leverera resultaten i form av uppladdade filer ; simulering , diagram , tabeller och rapport .
the third is by evaluating an oral presentation with opponents of a selected topic during a seminar with active attention of the whole class . ||| det tredje är genom att utvärdera en muntlig presentation och rollen som opponent för ett valt ämne under ett seminarium med aktivt deltagande av hela klassen .
the examination is obviously a continous process during the course . ||| examinationen är naturligtvis en kontinuerlig process under kursens gång .
the mandatory activities and tasks will be evaluated and awarded due to demonstrating the results in a suitable form ; mainly reports and presentations . ||| det är ett antal obligatoriska aktiviteter och uppgifter som kommer att bedömas och poängssättas efter att demonstrera resultaten i en lämplig form , främst rapporter och presentationer .
the activities are labs , case studies , seminars , lab-skills exams and homeworks . ||| aktiviteterna är laborationer , projektarbete , seminarier , labbtest och hemuppgifter .
the grading with grades th is based on the sum of the results gained from all activities and tasks ( more details are available at the homepage of the course ) . ||| slutbetyg i skalan u / 3-5 ges baserad på summan av resultaten från alla samtliga aktiviteter och uppgifter ( mer detaljer om detta finns på hemsidan för kursen ) .
1. design and implement effective and efficient ip addressing and subnetting based on combinations of the techniques ; variable length subnet mask ( vlsm ) , network address translation ( nat ) and dynamic host configuration protocol ( dhcp ) . ||| 1. planera , och bearbeta en effektiv ip-adresseringsplan med tillämpning av tekniker som variable length subnet mask ( vlsm ) , network address translation ( nat ) och dynamic host configuration protocol ( dhcp ) .
2. work out a basic configuration of an ip router connecting a local network to the internet . ||| 2. sätta upp en router med grundläggande konfiguration för att ansluta ett lokalt nätverk till internet .
3. analyze , configure , implement , and verify access control lists within a router configuration to filter packets in accordance with a predefined local policy for internet access . ||| 3. analysera , konfigurera och verifiera tillämpningen av grundläggande accesskontroll på en router för att filtrera ip-paket baserat på en förbestämd policy om accessen från och till internet .
4. configure and evaluate the major characteristics of the most used routing protocols within an autonomous system ; routing information protocol ( rip ) and the open shortest path first ( ospf ) . ||| 4. konfigurera och utvärdera egenskaperna för de mest använda routingprotokollen inom ett autonomt system ; routing information protocol ( rip ) och the open shortest path first ( ospf ) i små och medelstora nät .
5. use tcp/ip utilities and tools to troubleshoot the network configuration and connectivity issues of the network equipment . ||| 5. felsöka en befintlig nätverkskonfiguration samt verifiera funktionalitet av nätverksutrustning med hjälp av tcp/ip-verktyg och nyttigt program .
6. configure and administer a switch in switched ethernet lan with redundant cabling and possibly with functional groupings based on virtual lans ( vlans ) . ||| 6. konfigurera och administrera switchat ethernet-baserat lokalt nätverk ( lan ) med möjlighet för redundans och gruppering av datorerna i ett antal s.k. virtuella lans ( vlans ) .
7. configure and administer inter-switch vlans on ethernet switches and activate inter-vlan routing on router . ||| 7. konfigurera och administrera inter-switchade vlans samt konfigurera en router för inter-vlan routing .
8. identify the key characteristics of common wide area networking ( wan ) configurations and technologies like frame relay and point to point protocol ( ppp ) . ||| 8. redogöra för de vanligaste teknikerna för globala nätverk ( wan ) samt bearbeta grund konfiguration av router ansluten till , exempelvis frame relay och point to point protocol ( ppp ) ..
there is also a moment of self-studying a web-based course material . ||| i kursen ingår även ett moment med webbaserade självstudier .
knowledge in data communication corresponding to the course leu 061 data communication . ||| grundläggande kunskaper i datakommunikation motsvarande kursen leu 061 datakommunikation
* the essential elements and concepts of digital technology and different number systems . ||| * digitalteknikens grundläggande element och begrepp och olika talsystem .
* using boolean algebra to construct combinatorial networks and synchronous sequential circuits . ||| * boolesk algebras användning för konstruktion av kombinatoriska nät och synkrona sekvensnät .
* the computer's digital building blocks ( alu , data path , controller , memory , input and output devices ) . ||| * datorns digitala byggblock ( alu , dataväg , styrenhet , minne , in- och ut- enheter ) .
* the traditional processor architecture ( data-path and control unit and its instruction set ) as a synchronously operating digital machine . ||| * den traditionsenliga processorns uppbyggnad ( dataväg och styrenhet med instruktionsuppsättning ) som en synkront arbetande digitalmaskin .
* coding in machine language and assembly language . ||| * kodning i maskinspråk och assemblerspråk .
to pass the course the student must pass a written examination and the laboratory work . ||| för att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer .
based on the written examination the final grade is either u , 3 , 4 or 5 . ||| baserat på tentamensresultatet ges betygen u,3,4 eller 5 .
about the computer : ||| om datorn :
describe the computer structures and organization . ||| beskriva datorns uppbyggnad och funktion .
the student should be able to ||| detta betyder att man till exempel ska kunna
give a block-level description of how the data-path , register file , and arithmetic logic unit ( alu ) are connected , and ||| beskriva på blocknivå hur styrenhet , dataväg , registerfil , aritmetik- och logikenhet ( alu ) kopplas samman i en centralenhet .
explain architectural concepts such as accumulator architectures , risc , cisc , stack architectures , and pipelines . ||| förklara begreppen ackumulatorarkitektur , risc , cisc , stackarkitektur och pipeline .
describe and analyze / design the basic parts of the central processing unit . ||| beskriva och analysera / konstruera centralenhetens grundläggande delar .
the student should be able to ||| detta betyder att man till exempel ska kunna
analyze / design a single alu and design control signal sequences for basic alu operations , and ||| analysera / konstruera en enkel alu och utforma styrsignalsekvenser för grundläggande alu-operationer .
analyze a single data path and construct and design control signal sequences for transfers between registers , alu , and memory . ||| analysera en enkel dataväg , samt konstruera och utforma styrsignalsekvenser för överföringar mellan register , alu och minne .
explain how the instructions are created using control signal sequences . ||| förklara hur instruktioner byggs upp av styrsekvenser .
the student should be able to use examples to explain and describe instruction formats , instruction decoding , and instruction execution . ||| detta betyder att man till exempel ska kunna förklara och med exempel beskriva instruktionsformat , instruktionsavkodning och instruktionsutförande
describe and analyze the control unit ||| beskriva och analysera den automatiska styrenhetens funktion och uppbyggnad .
the student should be able to ||| detta betyder att man till exempel ska kunna
describe how the control signal sequences can be realized with either hard-wired logic or micro-programmed logic , and ||| beskriva hur styrsignalsekvenser kan realiseras med fast kopplad logik såväl som mikroprogrammerad logik .
analyze and design control signal sequences from instruction semantics . ||| analysera och konstruera styrsignalsekvenser utgående från instruktioners semantik .
explain the core functions of the primary memory and describe , analyze , and realize the main memory's connection to the cpu . ||| förklara primärminnets grundläggande funktioner samt beskriva , analysera och konstruera primärminnets anslutning till centralenheten .
the student should be able to ||| detta betyder att man till exempel ska kunna
describe different types of primary memory such as rom , prom , flash , sram , and dram , and explain the usefulness of each type for different purposes ; ||| beskriva olika typer av primärminnen såsom rom , prom , flash , statiskt ram och dynamiskt ram , samt förklara respektive minnestyps användbarhet för olika ändamål .
explain the concept of memory hierarchies ; ||| förklara begreppet minneshierarki .
describe , analyze , and realize address decoding logic for the primary memory , and ||| beskriva , analysera och konstruera avkodningslogik för primärminne med digitala komponenter .
describe , analyze and realize simple memory addressed i/o with digital components . ||| beskriva , analysera och konstruera enkel minnesadresserad i/o med digitala komponenter .
explain/describe how the bus links the cpu and memory . ||| förklara / beskriva hur centralenhet och minne kopplas samman med hjälp av datorns bussystem
the student should be able to describe synchronous and asynchronous bus protocols and multiplexing . ||| detta betyder att man till exempel ska kunna beskriva synkrona och asynkrona bussprotokoll samt multiplexteknik .
describe basic exception handling in computer systems . ||| beskriva elementär undantagshantering i datorsystem .
the student should be able to : ||| detta betyder att man till exempel ska kunna
explain various hardware and software exception handling , such as restart , software-initiated exceptions , and externally generated exceptions ( interrupts ) , ||| förklara undantagstyper såsom återstart , programvaruinitierade undantag samt externt genererade undantag ( avbrott ) .
describe how the restart and software-initiated exception are performed in the controller , and ||| beskriva hur återstart och programvaruinitierade undantag utförs i styrenheten .
describe how interrupts are handled in the cpu . ||| beskriva hur avbrott hanteras i centralenheten .
about digital technology : ||| om digitalteknik :
describe and use binary codes . ||| beskriva och använda binära koder .
the student should be able to ||| detta betyder att man till exempel ska kunna
convert numbers between decimal , binary , and hexadecimal representation , and ||| utföra omvandling av tal mellan decimal , binär och hexadecimal representation .
perform addition , subtraction , multiplication , and division of binary integers . ||| utföra addition och subtraktion med binära heltal .
describe and analyze the computer's structure as a programmable digital system . ||| beskriva och analysera datorns uppbyggnad som programmerbart digitalt system .
the student should be able to describe , analyze and construct the combinatorial and sequential circuits used to build a cpu . ||| detta betyder att man till exempel ska kunna beskriva , analysera och konstruera sådana kombinatoriska nät och sekvensnät som typiskt används för att bygga en dators centralenhet .
the combinatorial circuits considered here consist ( mainly ) of simple circuits such as multiplexers , de-multiplexers , full adders , bit shifters , etc. . ||| de kombinatoriska nät som här avses utgörs ( huvudsakligen ) av enklare nät såsom väljare , fördelare , heladderare , bitskiftare etc.
the sequential circuits considered here consist of memory elements and counters . ||| de sekvensnät som här avses utgörs av minneselement och räknare .
about programming in assembler : ||| om assemblerprogrammering :
explain the stored program principle . ||| förklara det lagrade programmets princip .
the student should be able to describe how a sequence of machine instructions stored in memory is executed . ||| detta betyder att man till exempel ska kunna beskriva hur en sekvens maskininstruktioner,som ordnats sekvensiellt i minnet , utförs .
describe the programmer's model of the machine . ||| beskriva programmerarens bild av maskinen , dvs instruktionsuppsättning och adresseringssätt .
the student should be able to describe the processor register set , explain the various types of instruction groups and addressing modes and describe them with examples . ||| detta betyder att man till exempel ska kunna förklara olika allmängiltiga typer av instruktionsgrupper och adresseringssätt samt beskriva dessa med exempel .
describe , analyze , and design simple assembly language programs organized into subroutines . ||| beskriva , analysera och konstruera enkla assemblerprogram , organiserade i subrutiner .
the student should be able to ||| detta betyder att man till exempel ska kunna
structure programs using subroutines and stack management , and ||| strukturera program med hjälp av subrutiner och stackhantering .
write small routines including software-controlled and interrupt-driven input and output and delays . ||| skriva små rutiner innefattande programstyrd och avbrottsstyrd in- och utmatning samt fördröjningar .
scheduled teaching consists of lectures , demonstrations , and supervised coding and simulation exercises . ||| schemalagd undervisning består av föreläsningar , demonstrationer och handledda simulerings- och kodnings-övningar .
there are also supervised laboratory sessions for which students are required to prepare beforehand . ||| dessutom utförs handledda obligatoriska laborationer där förkunskapskontroll genomförs inför varje laboration .
throughout the course , the student will design increasingly complex digital building blocks of digital and computer systems . ||| under kursen konstruerar studenten genomgående större och större digitala byggblock ingående i digitala system och datorsystem .
the theory is presented in lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
students construct their building blocks and test their designs with the help of simulators during exercises . ||| studenten konstruerar sina byggblock och testar sin konstruktion med hjälp av simulatorer under simuleringsövningar .
the building blocks are subsequently realized in hardware during the lab sessions . ||| därefter implementerar studenten sina byggblock i hårdvara under laboration .
the realization is completed by linking the building blocks into a computer and programming it . ||| konstruktionsarbetet avslutas med att sammankoppla byggblocken till en dator och programmera denna .
admitted to the bachelor program ||| antagen till högskoleingenjörsutbildningen .
the course is an introduction to software development in the language c . ||| kursen är en introduktion till programutveckling i språket c .
the course teaches how to implement a solution , in the form of a computer program in c language , to a defined problem . ||| i kursen lär man sig implementera en lösning , i form av ett datorprogram i språket c , till ett definierat problem .
the course covers ; identifiers , variables , types , expressions , operators , statements , functions and program structure , characters and strings , pointers and arrays , dynamic memory management , lists , file management and some of the standard library . ||| kursen omfattar ; identifierare , variabler , typer , uttryck , operatorer , satser , funktioner och programstruktur , tecken och strängar , pekare och fält , sammansatta typer,dynamisk minneshantering , listor , filhantering och lite om standardbibliotek .
the course begins with an introduction to a development environment . ||| kursen inleds med en introduktion till en utvecklingsmiljö .
written exam ( 6 credit points ) and a compulsory assignment ( 1.5 credit points ) . ||| skriftlig tentamen ( 6 hp ) samt en obligatorisk inlämningsuppgift ( 1,5 hp ) .
the final grade is based solely on exam results , including any bonus points ||| slutbetyget baseras enbart på tentamensresultat inklusive eventuella bonuspoäng .
- analyze and propose the structure of a software-based solution for a textually described problem . ||| - analysera samt föreslå struktur till en programbaserad lösning av ett textuellt beskrivet problem .
- implement a solution in c language to the problem . ||| - implementera en lösning i språket c till problemet .
( range up to 500 lines of c code ) . ||| ( omfattning upp till ca 500 rader c-kod ) .
- describe and use the following concepts when implementing a solution in c for the problem . ||| - beskriva samt använda följande begrepp vid implementering av en lösning i c till problemet .
variables , values and types ||| variabler , värden och typer
expressions and statements ||| uttryck och satser
control structures ||| styrande satser
functions ||| funktioner
characters - and string usages ||| tecken- och stränghantering
arrays , pointers and records ||| fält , pekare och poster
dynamic memory management and lists ||| dynamisk minneshantering och listor
io-handling and streams ( basic level ) ||| io-hantering och strömmar ( på grundläggande nivå )
file management ( basic level ) ||| filhantering ( på grundläggande nivå )
standard library ||| standardbibliotek
- use a general development environment ( ide ) ||| - använda en generell utvecklingsmiljö ( ide )
- describe and use the iterative software development methodology ||| - beskriva och använda iterativ programutvecklingsmetodik
- follow a given code standard ||| - följa en given kodningsstandard
- use a functional abstraction and fundamental data abstraction ||| - använda en funktionell abstraktion och grundläggande dataabstraktion
software development in c and assembly language , testing and troubleshooting . ||| programutveckling i c och assemblerspråk , test och felsökning .
structured assembler , basic code generation . ||| strukturerad assemblerprogrammering , grunder för kodgenerering .
first level system programming , ie how the computer is programmed to boot from power on , and handling of different types of exceptions such as internal errors , events and interrupts . ||| första nivåns systemprogrammering , dvs. hur datorn programmeras för start från spänningstillslag och hantering av olika typer av undantag så som interna fel , händelser och avbrott .
programming devices for parallel input and output , time management and programming of timers . ||| programmering av kretsar för parallell in- och utmatning , tidshantering och programmering av räknarkretsar .
basics of computer communications and programming devices for serial communications . ||| grunderna för datorkommunikation och programmering av kretsar för seriekommunikation .
moreover , a simple time-sharing systems ( in c and assembly language ) with special emphasis on the use of peripheral circuits , is implemented . ||| dessutom implementeras ett enkelt tidsdelningssystem ( i c och assemblerspråk ) med speciell tonvikt på användning av periferikretsar .
write simple assembly language programs using the selected architecture's instruction set . ||| skriva enkla assemblerprogram med användande av den valda arkitekturens instruktionsuppsättning .
write simple machine oriented c programs using the programming language's data types and control structures . ||| skriva enkla maskinorienterade c-program med användande av programspråkets datatyper och styrstrukturer .
describe the assembler equivalent of typical programming structures in c . ||| beskriva motsvarigheten i assembler till typiska programstrukturer i c .
apply tools from the course to develop programs ||| utnyttja de i kursen använda verktygen för programutveckling på ett adekvat sätt .
contribute to the construction and programming of simple embedded systems with given components ||| medverka vid konstruktion och programmering av enkla inbyggda system med givna komponenter .
construct systems generating various types of exceptional events ( internal exceptions , interrupts , restarts ) ||| konstruera system innefattande olika typer av undantag ( interna undantag , avbrott , återstart ) .
describe and illustrate a few basic types of peripherals and their use . ||| beskriva och exemplifiera några olika typer av digitala kringkomponenter och deras användning .
scheduled teaching comprises lectures , demonstrations , and supervised simulation and coding exercises ; ||| schemalagd undervisning består av föreläsningar , demonstrationer och handledda simulerings- och kodningsövningar .
and also supervised mandatory laboratory . ||| dessutom utförs handledda obligatoriska laborationer .
during the course , the student designs progressively bigger and bigger building blocks of software in c and assembler . ||| under kursen konstruerar eleven större och större programblock i assembler och c .
the theory is acquired through lectures and demonstrations . ||| teorin inhämtas genom föreläsningar och demonstrationer .
the student designs the blocks then carries out tests with the aid of simulators during simulation exercises . ||| eleven konstruerar sina program och testar dessa med hjälp av simulatorer under simuleringsövningar och självstudier .
in preparation for laboratory exercises the student will finally adapt the software in order to enable hardware verification of the function . ||| inför laborationer anpassar eleven sina program så att funktionen dessutom kan verifieras i hårdvara .
- approved planning report ||| - godkänd planeringsrapport
- project report ||| - godkänd projektrapport
- approved presentation and defense of the thesis ||| - godkänd presentation och försvar av examensarbetet vid examensarbetsredovisningen
grading : pass/fail ||| betygsskala : g / u
- acquire and apply advanced knowledge within the field of the engineering program , including deeper insight into current development , ||| - inhämta och tillämpa fördjupade kunskaper inom utbildningsprogrammets teknikområde inkluderande fördjupad insikt i aktuellt utvecklingsarbete ,
- with a comprehensive view , independently and creatively , formulate and handle issues and analyze and evaluate different technical solutions , ||| - med helhetssyn självständigt och kreativt identifiera , formulera och hantera frågeställningar samt analysera och utvärdera olika tekniska lösningar ,
- plan and use appropriate methods to perform tasks within given constraints , ||| - planera och med adekvata metoder genomföra uppgifter inom givna ramar ,
- critically and systematically use knowledge to model , simulate , predict and evaluate events on the basis of relevant information , ||| - kritiskt och systematiskt använda kunskap samt att modellera , simulera , förutsäga och utvärdera skeenden med utgångspunkt i relevant information ,
- within the framework of the project be able to identify issues regarding the role of technology in society , such as environmental and ethical aspects and ||| - inom ramen för det specifika examensarbetet kunna identifiera frågeställningar avseende teknikens roll i samhället såsom miljömässiga och etiska aspekter samt
- orally and in writing explain and discuss information , problems and solutions . ||| - muntligt och skriftligt redogöra för och diskutera information , problem och lösningar .
the learning objectives for a degree project are based on the objectives for a bachelor of science formulated in chalmers local guidelines for examinations ( dnr c2007/723 ) ||| lärandemålen för examensarbetet utgår från de mål för högskoleingenjörsexamen som formulerats i chalmers lokala examensordning ( dnr c2007/723 ) .
the overall goal of the degree project is that the student shall demonstrate the knowledge and ability that is required to work independently as an engineer . ||| det övergripande målet för examensarbetet är att studenten skall visa sådan kunskap och förmåga som krävs för att självständigt arbeta som högskoleingenjör .
the work is preferably carried out in groups of two students but it can also be performed individually . ||| examensarbetet genomförs företrädesvis i grupp om två studenter , men kan även genomföras enskilt .
for further information , see " föreskrifter för examensarbete vid högskoleingenjörsprogram vid chalmers tekniska högskola " ( dnr c2010/743 ) ||| se även " föreskrifter för examensarbete vid högskoleingenjörsprogram vid chalmers tekniska högskola " ( dnr c2010/743 ) .
the degree project shall be approved by the examiner before the work begins . ||| examensarbetet ska godkännas av handledare innan arbetet påbörjas .
technology node independent performance models for power and speed are presented , giving the student generic tools to estimate cost and performance properties in circuits of present and future cmos technologies . ||| teknologioberoende modeller för effektförbrukning och signalfördröjning presenteras , vilket ger studenten generiska verktyg för att beräkna sådana prestandaegenskaper hos kretsar i såväl dagens och morgondagens cmos-teknologier .
introduction to cmos integrated circuit design ; basic building blocks , technology platforms and design tools . ||| introduktion till cmos integrerad kretskonstruktion ; grundläggande byggblock , teknologiplattformar och konstruktionsverktyg .
introduction to the circuit design flow : schematic capture , circuit simulation , layout , rule checking , and layout-vs-schematic verification . ||| introduktion till kretskonstruktionsflödet : schemainmatning , kretssimulering , layout , regelkontroller , verifiering av layout-vs-schema .
hands-on design skill training using industrial electronic design automation ( eda ) tools . ||| praktisk färdighetsträning i användandet av electronic design automation ( eda ) verktyg av industriellt snitt .
the mosfet as a digital switch . ||| mos-transistorn som digital switch .
the two-port as a static and dynamic model . ||| tvåporten som statisk och dynamisk modell
the inverter as the basic digital building block ||| inverteraren - det grundläggande digitala byggblocket .
static properties - the voltage transfer characteristics , switching voltage , noise margins . ||| statiska egenskaper - överföringskarakteristiken , omslagsspänning , störmarginaler .
dynamic properties - the rc delay model , buffer sizing , process corners . ||| dynamiska egenskaper : rc-fördröjningsmodellen , buffertdimensionering , processhörn .
dynamic switching power and static leakage power . ||| dynamisk effektförbrukning vid omslag och statiska läckströmmar .
static cmos logic gates . ||| cmos-logik .
designing logic gates with pull-up and pull-down networks . ||| konstruktion av logiska grindar med pull-up och pull-down block .
the two-port as a dynamic switching model . ||| tvåporten som dynamisk switchmodell .
input load capacitances and output driving capability . ||| ingångskapacitans och drivförmåga .
technology independent delay measures . ||| teknologioberoende fördröjningsmått .
definition of logical effort , parasitic delay and electrical effort ( fanout ) . ||| definition av logical effort , parasitfördröjning och electrical effort ( fanout ) .
critical path delays . ||| kritiska vägar .
sizing gates for minimum path delay . ||| optimering av grindars drivförmåga för minimal vägfördröjning .
basic layout using standard-cell layout templates . ||| grundläggande kretslayout med standardcellmallar .
the adder as a design demonstrator . ||| adderaren som demonstrator .
ripple carry , carry look-ahead , and prefix-tree adders . ||| ripple carry , carry look-ahead , och prefixträdsadderare .
interconnect and wire delay . ||| ledningar och ledningsfördröjningar .
the rc two-port wire model . ||| rc-tvåporten som ledningsmodell .
elmore's delay model . ||| elmore's fördröjningsmodell .
repeaters . ||| repeterare .
latches and flip-flops . ||| latchar och vippor .
set-up and hold time requirements . ||| setup- och hålltidskrav .
metastability . ||| metastabilitet .
static and dynamic power consumption . ||| statisk och dynamisk effektförbrukning .
power and clock distribution . ||| kraftförsörjning och klockdistribution .
power gating . ||| klockstyrning .
clock gating . ||| effektstyrning .
compulsory laboratory exercises and compulsory weekly home assignment hand-in problems , and final written examination . ||| obligatoriska laborationer , obligatoriska inlämningsuppgifter ( ca en per vecka ) och skriftlig tentamen .
to pass the course , 50 % of the points in the written examination is required . ||| för godkänt krävs 50 % på den skriftliga tentamen .
hand-in problems can give bonus points that can be used to reach grade four or five . ||| inlämningsuppgifterna kan ge bonuspoäng som kan användas för att uppnå betyg fyra eller fem .
bonus points can not be used to pass the course ( that achieve grade three ) . ||| bonuspoäng kan inte användas för att uppnå godkänt ( betyg tre ) .
design static cmos logic gates ( pull-up and pull-down networks ) and implement these as standard cells . ||| konstruera statiska cmos-grindar ( pull-up-nät och pull-down-nät ) och implementera dessa som standardceller .
from simple mos transistor models , estimate static and dynamic properties of cmos inverters and use these properties to model more complex gates . ||| från enkla mos-transistor-modeller , uppskatta statiska och dynamiska egenskaper hos cmos inverterare och använda dessa egenskaper för att modellera komplexa grindar .
derive logical-effort normalized-delay parameters from circuit diagrams or layout , and use these parameters to estimate and trade off performance measures such as critical-path delays and power dissipation in present and future cmos technologies . ||| härleda parametrar för normaliserad fördröjning med " logical effort " från kretsdiagram eller layout , och använda dessa parametrar för att uppskatta och avväga prestandamått såsom fördröjning för kritiska vägar och effektförbrukning i nutida och framtida cmos-teknologier .
find critical paths in more complex combinatorial circuits , such as adders , and determine and minimise their delays . ||| finna kritiska vägar i mer komplexa kombinatoriska kretsar , såsom adderare , och bestämma och minimera dessas fördröjningar .
analyse wire-delay-dominated cases such as clock distribution and global interconnect , and suggest suitable buffering schemes to minimize delay or delay spread . ||| analysera ledningsfördröjningsdominerade fall såsom klockdistribution och global ledningdragning och föreslå lämpliga buffringsmetodier för att minimera fördröjning och fördröjningsskillnader .
design simple sequential systems that meet set-up and hold time constraints for timing circuits , including the effect of metastability in synchronisation . , ||| designa enkla sekventiella system som uppfyller set-up- och hålltidskrav för klockade kretsar , inklusive effekten af metastabilitet vid synkronisering .
use industrial-type design automation tools to design , implement and verify basic cmos circuit elements following the design flow supported by such tools . ||| använda automatiserade konstruktionsverktyg av industriellt snitt för att konstruera grundläggande kretselement i enlighet med det konstruktionsflöde som sådana verktyg stöder .
the course is organized as a " bottom-up " sister course to the " top-down " organized " introduction to electronic system design " . ||| kursen är organiserad som en " bottom-up " systerkurs till den " top-down " - organiserade parallella kursen " introduktion till elektroniksystemkonstruktion " .
each laboratory session is associated with a pre-lab home assignment and a concluding discussion . ||| varje laborationspass är förknippat med en förstudieuppgift och en avslutande diskussion .
basic knowledge about electric circuit theory , analog and digital electronics , logic design , and computer organization . ||| grundläggande kunskaper om elektrisk kretsteori , analog och digital elektronik , samt digitalteknik och datorteknik .
ability to perform engineering calculations . ||| förmåga att utföra ingenjörsmässiga beräkningar .
genetic information is stored in the dna molecule as a linear sequence of bases . ||| genetisk information lagras i dna-molekylen som en linjär sekvens av baser .
in the course of gene expression this sequence is translated into a sequence of amino acids in a protein . ||| när en gen uttrycks översätts denna gensekvens till en sekvens av aminosyror i ett protein .
the sequence of amino acids in turn determines the three-dimensional shape and biological function of the protein . ||| sekvensen av aminosyror bestämmer i sin tur proteinets tredimensionella form och biologiska funktion .
as dna sequencing technology has been dramatically improved recently we are facing a vast amount of data in basic science as well as in areas such as clinical medicine . ||| eftersom teknik för dna-sekvenserings har förbättrats dramatiskt måste vi kunna hantera stora datamängder i grundforskning och inom områden som klinisk medicin .
analysis of dna , rna and protein sequences will therefore play an essential role in coming years . ||| analys av dna- , rna- och proteinsekvenser kommer därför att spela en viktig roll under de kommande åren .
the aims for such analysis include genome analysis , structural and functional prediction , elucidation of the molecular basis for human disease , understanding fundamental biological systems and reconstruction of evolutionary history . ||| målen för sådan analys omfattar genomanalys , strukturella och funktionella förutsägelser , klarläggande av den molekylära grunden för mänskliga sjukdomar , förståelse av grundläggande biologiska system och rekonstruktion av evolutionär historia .
the course illustrates how bioinformatics solutions are applied in addressing biological problems , and the theoretical principles behind these solutions are discussed . ||| kursen belyser hur bioinformatiklösningar tillämpas i biologiska problem , och de teoretiska principerna bakom dessa lösningar diskuteras .
the course covers basic methods used in sequence analysis such as pairwise and multiple alignment , searching databases for sequence similarity , profiles , pattern matching , hidden markov models , rna bioinformatics , gene prediction methods and principles for molecular phylogeny . ||| kursen behandlar grundläggande metoder som används i sekvensanalys , t.ex. parvis och multipel anpassning , sökning i databaser för sekvenslikhet , profiler , mönstermatchning , dolda markov-modeller , rna-bioinformatik , genprognosmetoder och principer för molekylär fylogeni .
the course includes modern high-throughput sequencing techniques and their applications , as well as molecular biology databases and different systems to query such databases . ||| kursen innehåller moderna high-throughput sekvenseringstekniker och deras tillämpningar samt molekylärbiologiska databaser och olika system för att söka sådana databaser .
the course considers theoretical principles as well as how existing programs are being used by bioinformaticians . ||| kursen behandlar teoretiska principer samt befintliga program som används av bioinformatiker .
after completing the course , the student is expected to be able to ||| efter slutförd kurs förväntas studenten kunna
implement solutions to basic bioinformatics problems ||| implementera lösningar på grundläggande bioinformatiska problem
discuss the use of bioinformatics in addressing a range of biological questions ||| diskutera användningen av bioinformatik i samband med en rad biologiska frågeställningar
describe how bioinformatics methods can be used to relate sequence , structure and function ||| beskriva hur bioinformatiska metoder kan användas för att relatera sekvens , struktur och funktion
discuss the technologies for modern high-throughput dna sequencing and their applications ||| diskutera teknik för modern high-throughput dna-sekvensering och dess tillämpningar
use and describe some central bioinformatics data and information resources ||| använda och beskriva några centrala bioinformatikdata och informationsresurser
describe principles and algorithms of pairwise and multiple alignments , and sequence database searching ||| beskriva principer och algoritmer för parvis och multipel sekvensanpassning och sekvensdatabassökning
perform pattern matching in biomolecular sequences ||| utföra mönstermatchning i biomolekylära sekvenser
describe how evolutionary relationships can be inferred from sequences ( phylogenetics ) ||| beskriva hur evolutionära relationer kan utläsas av sekvenser ( fylogeni )
describe the most important principles in gene prediction methods ||| beskriva de viktigaste principerna i genprediktionsmetoder
describe basic principles of hidden markov models and their application in sequence analysis ||| beskriva grundläggande principer för dolda markov-modeller och deras tillämpning i sekvensanalys
lectures and computer exercises . ||| föreläsningar och datorövningar .
basic courses in molecular biology and statistics . ||| grundläggande kurs i molekylärbiologi och statistik .
none ||| inga speciella förkunskaper krävs , men det är en fördel om studenten har en viss datorvana och t.ex. kan använda ordbehandlingsprogram .
to avoid unnecessary complexity one often chooses to study computation via simplified , but powerful , models . ||| för att undvika onödiga komplikationer väljer man ofta att studera beräkningar via förenklade , men kraftfulla , modeller .
in the course several such models will be studied , both " imperative " and " functional " . ||| kursen behandlar flera sådana modeller , både " imperativa " och " funktionella " .
one or more models will be used to explore the limits of computation : problems that can not be solved ( within the confines of a given model ) , and programs that can run arbitrary programs ( modelled in a certain way ) . ||| en eller flera modeller kommer att användas för att utforska gränserna för vad som kan beräknas : problem som inte kan lösas ( inom en viss modells ramar ) , och program som kan köra godtyckliga program ( modellerade på ett visst sätt ) .
the course also includes a discussion of the church-turing thesis , a hypothesis which states , roughly , that a function is computable in a certain intuitive sense only if it can be defined within one of several models of computation . ||| kursen innehåller också en diskussion av church-turings hypotes , en förmodan om att en funktion är beräkningsbar på ett visst intuitivt sätt endast om den kan definieras i en av flera beräkningsmodeller .
after completion of the course , the student should be able to ||| efter godkänd kurs ska studenten kunna
define the notion of computable function , ||| definiera begreppet beräkningsbar funktion ,
explain the church-turing thesis , ||| förklara church-turings hypotes ,
explain the relationship between inductively defined sets , primitive recursion , and proofs by structural induction , ||| förklara sambandet mellan induktivt definierade mängder , primitiv rekursion , och bevismetoden strukturell induktion ,
prove that sets are countable or uncountable , for instance by using diagonalisation , ||| bevisa att mängder är uppräkneliga eller ouppräkneliga , till exempel genom att använda diagonalisering ,
encode inductively defined sets in such a way that members of these sets can be used as inputs or outputs for programs in one or more models of computation , ||| koda induktivt definierade mängder på ett sådant sätt att element i dessa mängder kan användas som indata eller utdata för program i en eller flera beräkningsmodeller ,
implement programs — in particular , interpreters — correctly in one or more models of computation , ||| implementera program , i synnerhet interpretatorer , korrekt i en eller flera beräkningsmodeller ,
prove that functions are ( not ) computable in some models of computation , ||| bevisa att funktioner ( inte ) är beräkningsbara i några beräkningsmodeller ,
analyse programs from some models of computation , and ||| analysera program från några beräkningsmodeller , och
manipulate and analyse models of computation . ||| manipulera och analysera beräkningsmodeller .
lectures and exercise sessions . ||| föreläsningar och övningar .
7.5 hec discrete mathematics ( for instance tmv200 or tmv210 ) . ||| 7,5 hp diskret matematik ( till exempel tmv200 eller tmv210 ) .
7.5 hec functional programming ( for instance tda452 or tda555 ) . ||| 7,5 hp funktionell programmering ( till exempel tda452 eller tda555 ) .
dat151 programming language technology ( or equivalent ) . ||| dat151 programspråk ( eller motsvarande ) .
the topic of the course is the theory and practice of optimization problems over discrete structures . ||| kursen behandlar optimeringsproblem i diskreta strukturer såväl i teori som praktik .
it has strong connections to optimization theory ( linear programming ) , computer science ( algorithms and complexity ) , and operational research . ||| det finns starka kopplingar till optimeringsteori ( linjär optimering ) , datavetenskap ( algoritmer och komplexitet ) , och operationsanalys .
problems of this kind arise in many different contexts including transportation , telecommunications , industrial planning , finance , bioinformatics , hardware design and cryptology . ||| optimeringsproblem uppstår i många olika sammanhang , exempelvis transportlogistik , telekommunikation , industriell planering , ekonomi , bioinformatik , hårdvarudesign och kryptologi .
a characteristic property of these problems are that they are difficult to solve . ||| en karaktäristisk egenskap hos sådana problem är att de är svåra att lösa .
the course intends to develop the skill of modelling real problems and to use mathematical and algorithmic tools to solve them , optimally or heuristically . ||| kursen syftar till att utveckla förmågan att modellera verkliga problem och att använda matematiska och algoritmiska verktyg för att lösa dem , optimalt eller heuristiskt .
- identify optimization problems in various application domains , ||| - identifiera optimeringsproblem inom olika tillämpningsområden ,
- formulate them in exact mathematical models that capture the essentials of the real problems but are still manageable by computational methods , ||| - formulera dem i exakta matematiska modeller som representerar det väsentliga av de verkliga problemen , men fortfarande hanterbarbara genom beräkningsmetoder ,
- assess which problem class a given problem belongs to , ||| - bedöma vilka problemklass ett givet problem tillhör ,
- apply linear programming , related generic methods , and additional heuristics , to computational problems , ||| - tillämpa linjär optimering , relaterade generiska metoder , och ytterligare heuristik , till beräkningsproblem ,
- explain the geometry of linear programming , ||| - förklara geometriska egenskaper av linjär optimering ,
- dualize optimization problems and use the dual forms to obtain bounds , ||| - duala optimeringsproblem och användning av duala former för att bestämma gränser ,
- work with the scientific literature in the field . ||| - arbeta med den vetenskapliga litteraturen inom området .
lectures and homework assignments . ||| föreläsningar och inlämningsuppgifter .
this course will discuss the theory and application of algorithms for machine learning and inference , from an ai perspective . ||| i kursen diskuteras teori och tillämpning av algoritmer för maskininlärning och slutledning , utifrån ett ai perspektiv .
in this context , we consider as learning to draw conclusions from given data or experience which results in some model that generalises these data . ||| i detta sammanhang betraktar vi lärande som slutledning från givna data eller erfarenheter som resulterar i en viss modell som generaliserar dessa uppgifter .
inference is to compute the desired answers or actions based on the model . ||| slutledning är att bestämma de önskade svaren eller åtgärder baserade på modellen .
algorithms of this kind are commonly used in for example classification tasks ( character recognition , or to predict if a new customer is creditworthy etc. ) and in expert systems ( for example for medical diagnosis ) . ||| algoritmer av detta slag används vanligen i till exempel klassificeringsuppgifter ( teckenigenkänning , eller att förutsäga om en ny kund är kreditvärdig etc. ) och i expertsystem ( till exempel för medicinsk diagnostik ) .
a new and commercially important area of application is data mining , where the algorithms are used to automatically detect interesting information and relations in large commercial or scientific databases . ||| ett nytt och kommersiellt viktig område är data mining , där algoritmer används för att automatiskt identifiera speciellt intressant information och speciella relationer i stora kommersiella eller vetenskapliga databaser .
the course intends to give a good understanding of this crossdisciplinary area , with a sufficient depth to use and evaluate the available methods , and to understand the scientific literature . ||| kursen avser att ge en god förståelse för detta tvärvetenskapliga område , med tillräckligt djup för att använda och utvärdera tillgängliga metoder , och för att kunna följa aktuell vetenskaplig litteratur inom området .
supervised learning : bayes classifier , fisher discriminant , perceptron , support vector machines , regression , boosting ; ||| övervakat lärande : bayes-klassificerare , fisher-diskriminantanalys , perceptron-baserade metoder , support-vektormaskiner , regression , boosting .
unsupervised learning : clustering algorithms , em algorithm , mixture models , kernel methods ; ||| oövervakad inlärning : algoritmer för klustring , em-algoritmen , mixture-modeller , kernel-metoder .
graphical models : hidden markov models , belief propagation . ||| grafiska modeller : dolda markov-modeller , metoder för att propagera antaganden ( belief propagation ) .
apply sound mathematical foundations to the inference of hypotheses from empirical data and models on scientific grounds ; ||| tillämpa sunda matematiska principer för att på vetenskaplig grund dra slutsatser och forma hypoteser från empiriska data och modeller ,
explain a representative set of available machine learning approaches ; ||| förklara en representativ uppsättning av tillgängliga metoder maskininlärning ,
evaluate the methods qualitatively and quantitatively , and to recognize both their strengths and limitations . ||| utvärdera metoderna kvalitativt och kvantitativt , och att identifiera såväl styrka som svagheter .
the course provides advanced techniques in the design and analysis of algorithms . ||| kursen handlar om avancerade metoder för design och analys av algoritmer .
- approximation algorithms and their analysis , approximation schemes , ||| - approximationsalgoritmer och deras analys ,
- use of linear programming , in particular for approximation , ||| - användning av linjär optimering , i synnerhet för approximation ,
- network flow with some complex applications , ||| - nätverksflöde med vissa tillämpningar
- randomized algorithms and their analysis by appropriate random variables , ||| - randomiserade algoritmer och deras analys med hjälp av lämpliga stokastiska variabler ,
- helpful input structures like tree structures and input parameters ||| - snabba algoritmer som använder trädstrukturer och små parametrar
- know in more depth some important design and analysis techniques for algorithms , in particular , ways to approach np-complete problems ||| - ha fördjupade kunskaper om några viktiga konstruktions- och analysmetoder för algoritmer , i synnerhet om metoder för att lösa np-komplexa problem
- to some extent be able to apply such techniques to solve new problems that may arise in various applications ||| - i viss mån kunna tillämpa dessa metoder för att lösa nya problem som kan uppstå i olika tillämpningar
- have some practice in recognizing connections between algorithmic problems and reducing them to each other ||| - kunna upptäcka samband mellan olika algoritmiska problem och reducera ( återföra ) dem till varandra
- be able to explain more complex algorithms and proofs in written form ||| - kunna förklara komplexa algoritmer och bevis i skriftlig form
- know selected topics of current research on algorithms ||| - vara medveten om utvalda ämnen av aktuell forskning i algoritmer
lectures and hand-in exercises . ||| föreläsningar och inlämningsuppgifter .
the course tin092 algorithms or equivalent is required . ||| kurs tin092 algorithms eller motsvarande .
as the course laboration , the students build a complete compiler for a simple imperative language . ||| laborationen i kursen består i att skriva en komplett kompilator för ett litet imperativt språk .
compiler project and oral presentation . ||| programmeringsprojekt och muntlig redovisning .
grading scale f , 3 , 4 , 5 . ||| betygsskala u , 3 , 4 , 5 .
know the basic principles of run-time organization , parameter passing , and memory management , and implement them as a part of the compiler ; ||| känna till grundläggande principer for runtime-miljöer , parameterskickande och minneshantering , och att implementera dessa i en kompilator ;
design and implement compilation schemes that generate intermediate or assembly code from a source program ; ||| designa och implementera kompilatorscheman för att generera intermediärkod eller assembler från ett källprogram ;
design and implement extensions of a simple imperative language , and know the main issues of compiling object-oriented languages . ||| designa och implementera utökningar för ett litet imperativs programmeringsspråk och känna till de viktigaste aspekterna av att kompilera objektorienterade programmeringsspråk .
the teaching consists of lectures and a project , as well as individual supervision in connection with the project . ||| undervisningen består av föreläsningar , ett programmeringsprojekt och individuell handledning i samband med projektet .
the project is the central part ; it involves implementing a complete compiler for a small imperative programming language . ||| projektet är huvuddelen i kursen och består i att implementera en komplett kompilator för ett litet imperativt programmeringsspråk .
the lectures provide knowledge that is needed in the laboration , as well as an overview of the theoretical foundations and possible extensions of the compiler . ||| föreläsningarna ger den kunskap som krävs för att genomföra projektetet , men äver en översikt över de teoretiska grunderna och möjliga utökningar till kompilatorn .
general programming skills ( c , c++ , haskell , or java ) . ||| allmän programmeringskunskap ( c , c++ , haskell , java )
data structures . ||| datastrukturer
formal languages and automata . ||| formella språk and ändliga automater .
the course dat151 programming language technology or equivalent is required . ||| kursen dat151 programming language technology eller någon motsvarande .
formal methods is a generic term for system design , analysis , and implementation methods that are described and used with mathematical rigor . ||| formella metoder är ett samlingsnamn för matematiska metoder inom systemdesign , analys och implementation av datorsystem .
the purpose is to construct , with high confidence , systems that behave according to their specification . ||| syftet är att konstruera system som fungerar i enighet med en given specifikation .
the course introduces practically and theoretically the two most important styles of formal methods for reasoning about software : model checking and deductive verification . ||| den här kursen introducerar , både praktiskt och teoretiskt , de två viktigaste teknikerna inom formella metoder som används för att resonera om mjukvara : modellkontroll ( model checking ) och deduktiv verifikation .
accordingly , we concentrate on the verification of safety properties . ||| därför koncentrerar vi oss i denna kurs på säkerhetsegenskaper .
the lectures cover the following topics : ||| föreläsningarna tar upp följande ämnen :
theoretical foundations of model checking . ||| teoretiska grunder för modellkontroll .
property languages and their usage . ||| språk för att uttrycka systemegenskaper och dessas användning .
performing automated verification with a software model checking tool . ||| användning av ett verktyg för modellkontroll av mjukvarusystem .
for the deductive verification side , we use key , an integrated tool for the formal specification and verification of java programs . ||| för deduktiv verifikation används key , ett verktyg som integrerar formell specifikation och verifikation av javaprogram .
the tool , which is partly developed at chalmers and university of gothenburg , supports formal specification in the java modeling language ( jml ) , and translation from jml into logic . ||| key har delvis utvecklats på chalmers och göteborgs universitet och stödjer formell specifikation i jml ( java modelling language ) samt översättning från jml till logik .
an interactive theorem prover is used to formally verify statements about specifications and programs . ||| en interaktiv teorembevisare används för att formellt verifiera uttryck om specifikationer och program .
the lectures cover the following topics : ||| föreläsningarna tar upp följande ämnen :
java modeling language ( jml ) ||| java modelling language ( jml )
formal semantics of systems ||| formell semantik för system .
predicate logic for specification of java programs ||| predikatlogik för specifikation av javaprogram .
translating jml into dynamic logic ||| översättning från jml till dynamisk logik .
verifying proof obligations ||| verifikation av beviskrav .
judge the potential and limitations of using logic based verification methods for assessing and improving software correctness , ||| bedöma potential och begränsningar hos logikbaserade verifikationstekniker för att bedöma och förbättra mjukvarukvalitet .
judge what can and what can not be expressed by certain specification/modelling formalisms , ||| avgöra vad som kan och inte kan uttryckas i en given formalism för specifikation eller modellering .
judge what can and can not be analysed with certain logics and proof methods , ||| avgöra vad som kan och inte kan analyseras med en given logik och bevismetod .
express safety properties of ( concurrent ) programs in a formal way , ||| formellt uttrycka säkerhetsegenskaper hos ( parallella ) program .
describe the basics of verifying safety properties via model checking , ||| beskriva grunderna i verifikation av säkerhetsegenskaper med hjälp av modellkontroll ( model checking ) .
use tools which integrate and automate the model checking of safety properties , ||| använda verktyg som integrerar och automatiserar modellkontroll av säkerhetsegenskaper .
write formal specifications of object-oriented system units , using the concepts of method contracts and class invariants , ||| skriva formella specifikationer för enheter i objekt-orienterade program med hjälp av kontrakt och klassinvarianter .
describe how the connection between programs and formal specifications can be represented in a program logic , ||| beskriva hur relationen mellan program och formell specifikation kan representeras i en programlogik .
verify functional properties of simple java programs with a verification tool , ||| verifiera funktionella egenskaper hos enkla javaprogram med ett verifikationsverktyg .
acknowledge the socio-economical costs caused by faulty software , ||| känna till de socio-ekonomiska konsekvenserna av felaktig mjukvara .
judge and communicate the significance of correctness for software development , ||| bedöma och kommunicera betydelsen och vikten av korrekthet i mjukvaruutveckling .
approach the issue of correctly functioning software by means of abstraction , modeling , and rigorous reasoning . ||| lösa problem relaterade till utveckling av välfungerande mjukvara genom abstraktion , modellering och rigorösa resonemang .
there are two lectures each week , introducing formal methods in general , and the technical and theoretical concepts behind the presented methods and tools . ||| kursen omfattar två föreläsningar per vecka , vilka introducerar formella metoder generellt samt de bakomliggande tekniska och teoretiska begreppen för metoder och verktyg .
some lectures contain hands-on exercises . ||| vissa föreläsningar innefattar även övningar .
the students perform practical case studies using the tools in lab assignments . ||| studenterna genomför praktiska övningar med verktygen som labuppgifter .
there is one exercise class per week . ||| kursen omfattar utöver föreläsningarna även ett praktiskt övningstillfälle per vecka .
additionally , study of concurrency control methods without locking . ||| feltolerans och återställning : metoder för checkpointing , optimistisk och pessimistisk återställning .
resource allocation . ||| resursallokering .
distributed algorithms : how to design and analyze distributed algorithms ? ||| distribuerade algoritmer : design och analys av distribuerade algoritmer .
sensor networks and energy efficient distributed designs . ||| sensornätverk och energieffektiva distribuerade lösningar .
denial of service attacks . ||| denial of service attacker .
get a good understanding on the advances in technologies , system architectures and communication architectures that propelled the growth of distributed computing systems . ||| få en god förståelse om de framsteg i teknologi , system- och kommunikationsarkitektur som har drivit på användningen av distribuerade system .
understand and appreciate the challenges and opportunities faced by distributed systems , and sensor networks application designers . ||| redogöra för och förklara de utmaningar och möjligheter som applikationsutvecklare ställs inför vid utveckling av ett distribuerat system eller sensornätverk .
design , program and evaluate representative distributed systems and applications . ||| designa , implementera och utvärdera distribuerade system och applikationer .
the aim of the course is to explore the powerful mechanisms that functional programming languages offer to solve real problems and structure larger programs . ||| kursens mål är att utforska de kraftfulla mekanismer som funktionella programspråk erbjuder när det gäller att lösa verkliga problem och strukturera större program .
the focus lies on library design and the concept of embedded languages . ||| fokus ligger på design av programbibliotek och inbäddade språk .
the big advantage with functional languages is that language constructions can be given names and thereby reused , using higher order functions . ||| en stor fördel med funktionella programspråk är att de flesta språkkonstruktionerna kan namnges och därmed återanvändas som högre ordningens funktioner .
functional programs can therefore often be constructed by composing constructions from a library . ||| funktionella program kan därför ofta konstrueras genom att kombinera konstruktioner från ett funktionsbibliotek .
this method enables a way to construct programs quickly and with a high degree of correctness . ||| den här metoden gör det möjligt att snabbt konstruera program med en hög grad av korrekthet .
this is the central idea in this course . ||| detta är den centrala idén i kursen .
we can learn a lot from studying the standard library of list functions such as map , fold and so on . ||| vi kan lära oss en hel del genom att studera standardbibliotekens list-funktioner som map , fold osv .
these functions can be generalised to operate on other datatypes . ||| dessa funktioner kan generaliseras så att de fungerar för andra datatyper .
realistic functional programs must also handle changes in state , exceptions , backtracking and other " non-functional " behaviours . ||| realistiska funktionella program måste också hantera tillståndsförändringar , avbrott , " backtracking " och andra " icke-funktionella " beteenden .
we will look at how these can be modelled in a purely functional manner . ||| vi kommer att jobba med hur dessa kan modelleras rent funktionellt .
the concept of " monads " will help us here . ||| det matematiska begreppet " monad " hjälper oss med detta .
armed with this knowledge we will construct domain specific libraries , designed to construct programs in a certain application domain . ||| med hjälp av dessa kunskaper kommer vi att konstruera domänspecifika programbibliotek ämnade att lösa problem inom ett ett visst tillämpningsområde .
this type of library can be said to define a domain specific language , since the constructions the programmer uses to construct larger programs mainly consists of library functions . ||| den här sortens bibliotek kan sägas definiera ett domänspecifikt språk eftersom konstruktionerna som programmeraren använder huvudsakligen består av biblioteksfunktioner .
we will study libraries for parsing , pretty printing , graphics , pseudo-parallel programming and interaction . ||| vi kommer att studera bibliotek för inläsning ( parsning ) , utskrift ( pretty printing ) , grafik , webbprogrammering och interaktion .
the course will also present some recent research which can make the contents of the course vary to some degree . ||| kursen kommer också att presentera en del aktuell forskning vilket kan göra att innehållet varierar en del mellan åren .
the programming language used in the course is haskell . ||| kursen använder sig huvudsakligen av programmeringsspråket haskell .
design embedded domain specific languages ( edsls ) ||| designa inbäddade domänspecifika språk ( edsl )
explain and exemplify ( abstract ) syntax , semantics ||| förklara och ge exempel på ( abstrakt ) syntax , semantik , etc.
implement edsls in haskell ( as combinator libraries ) ||| implementera edsl i haskell ( som kombinatorbibliotek )
read , understand and extend haskell programs which use advanced type system features ||| läsa , förstå och utöka haskellprogram som använder sig av avancerade typsystemegenskaper :
type classes ||| typklasser
( generalized ) algebraic datatypes ||| ( generaliserade ) algebraiska datatyper
functors , monads and monad transformers ||| funktorer , monader och monadtransformerare
use specification based development techniques ||| använda specifikationsbaserade utvecklingstekniker
formulate and test properties about the program ||| formulera och testa egenskaper som programmet ska uppfylla
reason about correctness of functional programs ||| resonera om funktionella programs korrekthet
transform programs on the basis of such reasoning ||| transformera program baserat på sådana resonemang
explain and discuss the above topics ||| förklara och diskutera de ämnen som beskrivs ovan
there are 2 two-hour lectures every week . ||| det är två 2-timmars förelåsningar varje vecka .
lots of help is provided . ||| mycket hjälp erbjuds också .
to be eligible for the course , students should have successfully completed two years of an education aimed at a degree within computer science or equivalent . ||| för att vara behöriga för kursen skall studenterna ha klarat av två år av en utbildning på väg mot en högskoleexamen inom datateknik eller motsvarande .
the courses tda452 functional programming , tmv210 introduction to discrete mathematics and at least one of the courses dat151 programming language technology or dat121 programming paradigms or equivalent are required . ||| mer specifikt krävs kurserna tda452 funktionell programmering , tmv210 introduktion till diskret matematik och minst en av kurserna dat151 programming language technology eller dat121 programming paradigms eller motsvarande .
notions : abstract syntax tree , semantics , interpreter , compiler . ||| koncept : abstrakt syntaxträd , semantik , interpretator , kompilator .
algorithms , complexity , divide-and-conquer . ||| algoritm , komplexitet , " divide-and-conquer " .
induction proofs and simple logic , equality reasoning . ||| induktionsbevis , logik , likhetsbevis ( equality reasoning ) .
it is recommended , but not required , to read the following courses beforehand : algorithms and ( `` logic in computer science '' or `` finite automata theory and formal languages '' ) . ||| det är rekommenderat , men inte ett krav , att läsa följande kurser i förväg : algorithms och ( " logic in computer science " eller " finite automata theory and formal languages " ) .
the course aims to provide an overview of cryptographic concepts , primitives , protocols and applications . ||| kursens syfte är att ge en översikt över kryptografiska begrepp , primitiver , protokoll och applikationer .
basic goals of cryptography ( confidentiality , authentication , non-repudiation ) . ||| kursen innehåller grundläggande begrepp inom kryptografi ( sekretess , autentisering , oavvislighet ) .
symmetric key cryptography : block and stream ciphers , design principles and examples , modes of operation , message authentication codes . ||| kryptering med symmetrisk nyckel : block- och strömchiffer , konstruktionsprinciper , exempel , och meddelandeautentiseringskoder .
public key cryptography : asymmetric ciphers , signatures . ||| kryptering med öppen nyckel : asymmetriska chiffer , signaturer .
attack models and security notions . ||| attackmodeller och säkerhetskoncept .
protocols for key management , authentication and other services . ||| protokoll för nyckelhantering , autentisering och andra tjänster .
summarize the main goals of cryptography and illustrate this with a number of examples of how cryptographic services are integrated in current applications , both in software and hardware ||| sammanfatta de viktigaste målen för kryptografi och illustrera dessa med ett antal exempel på hur kryptografiska tjänster är integrerade i aktuella tillämpningar , både i mjukvara och hårdvara
describe goals and design principles for and common structures of secret key primitives such as block and stream ciphers and message authentication codes ||| beskriva mål , konstruktionsprinciper och gemensamma strukturer för att skapa hemliga nycklar , t.ex. block- och ström-chiffer och meddelandeautentiseringskoder .
identify , analyse and explain various forms of attacks based on improper usage of primitives , modes or protocols ||| identifiera , analysera och förklara olika former av attacker som baserats på felaktig användning av primitiver , tillstånd eller protokoll .
explain how basic public key primitives can be defined based on the difficulty of mathematical problems such as the discrete logarithm problem or factoring and analyse variants of these systems ||| förklara hur grundläggande primitiver för öppna nyckar kan definieras utifrån svårlösliga matematiska problem som t.ex. diskreta logaritmer eller faktorisering , samt analysera varianter av dessa system .
explain the various roles of hash functions as parts of other cryptographic primitives and protocols and the requirements this places on hash functions ||| förklara hashfunktioners olika användningsområden i andra kryptografiska primitiver och protokoll , samt de krav detta ställer på hashfunktioner .
exemplify when various notions of security , such as information - theoretic , computational , provable and practical security , are applicable and describe the security guarantees provided ||| exemplifiera när olika säkerhetskoncept , såsom informationsteoretiska , beräkningsbara , bevisbara och praktisk säkerhet , är tillämpliga samt beskriva de säkerhetsgarantier som de erbjuder .
explain basic key management techniques in both secret key and public key cryptography ||| förklara grundläggande tekniker för kryptering med såväl hemlig som öppen nyckel .
data structures . ||| för att kunna följa kursen krävs kunskaper om datastrukturer och diskret matematik , motsvarande inledande kurser i ämnena samt programmeringskunskaper ( exempelvis c , java eller haskell ) .
the course aims to provide an overview of cryptographic concepts , primitives , protocols and applications . ||| kursens syfte är att ge en översikt över kryptografiska begrepp , primitiver , protokoll och applikationer .
basic goals of cryptography ( confidentiality , authentication , non-repudiation ) . ||| kursen innehåller grundläggande begrepp inom kryptografi ( sekretess , autentisering , oavvislighet ) .
symmetric key cryptography : block and stream ciphers , design principles and examples , modes of operation , message authentication codes . ||| kryptering med symmetrisk nyckel : block- och strömchiffer , konstruktionsprinciper , exempel , och meddelandeautentiseringskoder .
public key cryptography : asymmetric ciphers , signatures . ||| kryptering med öppen nyckel : asymmetriska chiffer , signaturer .
attack models and security notions . ||| attackmodeller och säkerhetskoncept .
protocols for key management , authentication and other services . ||| protokoll för nyckelhantering , autentisering och andra tjänster .
summarize the main goals of cryptography and illustrate this with a number of examples of how cryptographic services are integrated in current applications , both in software and hardware ||| sammanfatta de viktigaste målen för kryptografi och illustrera dessa med ett antal exempel på hur kryptografiska tjänster är integrerade i aktuella tillämpningar , både i mjukvara och hårdvara
describe goals and design principles for and common structures of secret key primitives such as block and stream ciphers and message authentication codes ||| beskriva mål , konstruktionsprinciper och gemensamma strukturer för att skapa hemliga nycklar , t.ex. block- och ström-chiffer och meddelandeautentiseringskoder .
identify , analyse and explain various forms of attacks based on improper usage of primitives , modes or protocols ||| identifiera , analysera och förklara olika former av attacker som baserats på felaktig användning av primitiver , tillstånd eller protokoll .
explain how basic public key primitives can be defined based on the difficulty of mathematical problems such as the discrete logarithm problem or factoring and analyse variants of these systems ||| förklara hur grundläggande primitiver för öppna nyckar kan definieras utifrån svårlösliga matematiska problem som t.ex. diskreta logaritmer eller faktorisering , samt analysera varianter av dessa system .
explain the various roles of hash functions as parts of other cryptographic primitives and protocols and the requirements this places on hash functions ||| förklara hashfunktioners olika användningsområden i andra kryptografiska primitiver och protokoll , samt de krav detta ställer på hashfunktioner .
exemplify when various notions of security , such as information - theoretic , computational , provable and practical security , are applicable and describe the security guarantees provided ||| exemplifiera när olika säkerhetskoncept , såsom informationsteoretiska , beräkningsbara , bevisbara och praktisk säkerhet , är tillämpliga samt beskriva de säkerhetsgarantier som de erbjuder .
explain basic key management techniques in both secret key and public key cryptography ||| förklara grundläggande tekniker för kryptering med såväl hemlig som öppen nyckel .
data structures . ||| för att kunna följa kursen krävs kunskaper om datastrukturer och diskret matematik , motsvarande inledande kurser i ämnena samt programmeringskunskaper ( exempelvis c , java eller haskell ) .
the course provides knowledge of the principles used to create images through computer algorithms . ||| kursen är en grundkurs i ämnet datorgrafik och ger kunskap om de algoritmer , tekniker och principer som används för att skapa datorgenererde bilder .
the primary focus is on real-time rendering and photo realistic rendering . ||| primärt fokus ligger på realtidsrendering samt fotorealistisk rendering .
the course is organized into lectures and exercises . ||| kursen är organiserad i föreläsningar och övningar .
no strict requirements . however , the lectures and tutorials assume the student has ||| inga strikta krav , men nivån på föreläsningar och laborationer utgår från att eleven har
1) knowledge corresponding to a course in algorithms and data structures , ||| 1) kunskaper motsvarande en kurs i algoritmer och datastrukturer ,
2) programming skills in an imperative high-level language ( e.g. , c , c++ or java ) , and ||| 2) färdigheter i programmering i ett imperativt högnivåspråk ( t ex c , c++ eller java ) , samt
3) some understanding of vector analysis in three dimensions ( the dot product , cross product , and matrix multiplication ) . ||| 3) viss förståelse av vektoranalys i tre dimensioner ( dotprodukt , kryssprodukt , matrismultiplikation ) .
typically , the student has successfully completed an education comparable with a bachelor degree within computer science or equivalent . ||| den typiska studenten har en avslutad utbildning motsvarande kandidatexamen i computer science eller liknande .
the project course is designed to give knowledge and experience in professional development of software . ||| projektkursen avser att ge kunskap om och övning i professionell utveckling av mjukvara .
the course aims to : ||| kursen syftar till att :
* give knowledge about , and practice in , methodology in technical development projects , in particular software projects . ||| * ge kunskaper om , och träning i , arbetsmetodik i tekniska utvecklingsprojekt , speciellt mjukvaruprojekt .
* give experience of all phases of development ; including problem identification , problem formulation , information retrieval , usage analysis , system analysis , debriefing , evaluation etc. ||| * ge erfarenhet av alla faser i ett utvecklingsarbete ; bl.a. problemidentifiering , problemformulering , informationssökning , användaranalys , systemanalys , avrapportering , utvärdering etc.
* train problem solving skills . ||| * träna problemlösningsförmågan .
* train the ability for cooperation and communication . ||| * träna samarbets- och kommunikationsförmågan .
the course presents a simple test driven , object oriented process . ||| kursen presenterar en enkel , testdriven , objektorienterad process .
concepts as ; iterative development , object oriented analysis and design , domain - and designmodel , " domain driven design " are introduced . ||| begrepp som iterativ utveckling , objektorienterad analys och design , domän- och designmodell , " domain driven design " introduceras .
aspects of design are discussed : testability , dependencies , partitioning , layering and more . ||| olika aspekter på design gås igenom : testbarhet , beroenden , partitionering , skiktning , m.fl.
the examination consists of the oral presentation and the delivering och the source code and other artifacts . ||| examination sker genom muntlig presentation av projektet samt inlämning av källkod och övriga artifakter .
grade f , 3 , 4 , 5 . ||| betygsskala u , 3 , 4 , 5 .
- document the project in the form of a basic requirement specification and basic design documents ||| - dokumentera arbetet i ett sådant projekt i form av t.ex. en grundläggande kravspecifikation och ett enklare designdokument .
a few lectures , one obligatory seminar and a few workshops . ||| ett mindre antal föreläsningar , ett obligatoriskt seminarium och några " workshops " .
the project includes weekly obligatory supervisor meetings . ||| i projektet ingår obligatoriska veckovisa handledarmöten och en muntlig slutpresentation .
concurrent programming plays a vital role in systems where many events appear to occur simultaneously . ||| parallell programmering spelar en viktig roll i system där många händelser sker till synes samtidigt .
general concepts : parallelism , interference , synchronization , critical regions , mutual exclusion , deadlock , fairness , livelock . ||| allmänna begrepp : parallellism , interferens , synkronisering , kritiska regioner , ömsesidig uteslutning , " deadlock " , rättvisa , " livelock " .
synchronization using shared variables ; busy waiting . ||| synkronisering med hjälp av delade variabler ; " busy waiting " .
semaphores . ||| semaforer .
monitors . ||| monitorer .
synchronous message passing : extended rendezvous . ||| synkron meddelandeskickning : utökade rendezvous .
asynchronous message passing : erlang . ||| asynkron meddelandeskickning : erlang .
asynchronous coordination : linda . ||| asynkron koordinering : linda .
the grade for the course is then determined by considering the overall performance in the labs and the exam combined . ||| betyget på kursen bestäms sedan genom att betrakta övergripande resultat i labben och tentan tillsammans .
- demonstrate the critical knowledge of the issues and problems that arise in shared-memory and message-passing concurrent systems ||| - förstå frågor och problem som uppstår i parallella system med delat minne och meddelandeskickning
- identify concurrent ( synchronization ) problems , for example shared update , dining philosophers , producer-consumer , resource allocation , time-outs ||| - identifiera ( synkroniserings ) problem i parallella system som t.ex. shared update , dining philosophers , producer-consumer , resource allocation , time-outs
- adapt common patterns for solving those problems , for example locks , client-server , pipelines , replicated workers , barrier synchronization , passing the baton , alarms ||| - anpassa gemensamma mönster för att lösa dessa problem som t.ex. locks , client-server , pipelines , replicated workers , barrier synchronization , passing the baton , alarms
- design and argue for the correctness , clarity , and efficiency of solutions ||| - skapa lösningar och argumentera för deras korrekthet , tydlighet och effektivitet
- apply practical knowledge of the programming constructs and techniques offered by modern concurrent programming languages ||| - tillämpa praktiska kunskaper i programmerings konstruktioner och tekniker som finns tillgängliga i moderna parallella programmeringsspråk
- implement such solutions in expressive programming languages ||| - implementera sådana lösningar i uttrycksfulla programspråk
solid background in programming . ||| grundläggande programmeringskunskaper .
standard algorithms on these structures . ||| standardalgoritmer på dessa datastrukturer och deras resurskrav .
standard algorithms libraries . ||| standardbibliotek för datastrukturer och algoritmer .
laborations and written exam . ||| skriftlig examen och laborationer .
- make motivated choices between different data structures for different applications . ||| - kunna uppskatta resurskrav för olika implementationer av datatyper och därmed göra motiverade val mellan tillgängliga alternativ .
lectures , exercise classes , and laborations . ||| föreläsningar , övningar och laborationer .
this course introduces a functional programming language and related concept to students that already have some knowledge in programming . ||| den här kursen introducerar ett funktionellt programmeringsspråk och relaterade koncept för studenter som redan har en del kunskap inom programmering .
the primary goal is to enable students to write realistic ( small - to medium-size ) programs , while introducing some of the fundamental concepts of computer science . ||| det främsta målet är att göra det möjligt för studenterna att skriva realistiska ( små till mellanstora ) program , och att samtidigt introducera några grundläggande koncept inom datavetenskap .
in this course the student will learn about functional programming through the haskell programming language . ||| i den här kurser kommer studenten att lära sig om funktionell programmering genom programmeringsspråket haskell .
concrete topics encountered in the course include : ||| exempel på ämnen som bemöts i kursen är :
- functions as first-class values ||| - funktioner som förstaklass-värden
- algebraic and abstract data types ||| - algebraiska och abstrakta datatyper
- polymorphism and classes ||| - polymorfism och klasser
- testing functional programs ||| - testning av funktionella program
- lazy evaluations and infinite objects ||| - lat evaluering och oändliga objekt
- monads ||| - monader
written exam and compulsory laboratory exercises . ||| skriftlig examination och obligatoriska labbar .
- write small to medium-sized functional programs for a variety of applications ; ||| - skriva små till mellanstora funktionella program inom olika tillämpningar ,
- exploit a variety of programming techniques typical in functional programming , such as : ||| - utnyttja olika programmeringstekniker som är vanliga inom funktionell programmering såsom :
use of recursion , modelling with recursive datatypes , abstraction and reuse with the help of higher order functions and monads ; ||| användandet av rekursion , modellering med rekursiva datatyper , abstraktion och kodåteranvändning med hjälp av högre ordningens funktioner och monader ,
- appreciate the strengths and possible weaknesses of the functional programming paradigm . ||| - värdera styrkorna och möjliga svagheter inom det funktionella programmeringsparadigmet .
previous programming experience and basic knowledge of data structures and algorithms are also assumed . ||| kursen förutsätter tidigare programmeringserfarenhet och grundläggande kunskaper om datastrukturer och algoritmer .
reading research articles is valuable training for scientists and researchers . ||| att läsa vetenskapliga artiklar är värdefull utbildning för alla vetenskapsmän och forskare .
these demonstrate how to present ideas and methods , and how to critically evaluate them . ||| i denna kurs används därför forskningsartiklar som viktigaste referensmaterial , framför allt för att visa hur man presenterar idéer och metoder , och hur man kritiskt värdera dem .
the course is examined by individual programming assignments , written assignments and oral presentations . ||| kursen examineras genom individuella inlämningsuppgifter inom programmering , skriftliga inlämningsuppgifter och muntliga presentationer .
knowledge and understanding ||| kunskap och förståelse
describe bioinformatics problems and computational approaches to solving them . ||| beskriva bioinformatikproblem och beräkningsmetoder för att lösa dem
skills and abilities ||| färdighet och förmåga
implement computational solutions to problems in bioinformatics . ||| implementera beräkningsproblemlösningar inom bioinformatik
judgement and approach ||| värderingsförmåga och förhållningssätt
summarise problems and methods described in research articles ||| sammanfatta problem och bioinformatikmetoder beskrivna inom forskningslitteraturen
critically discuss different methods that address the same task ||| kritiskt diskutera olika bioinformatiska metoder som behandlar samma uppgift
identify situations where methods can be applied across different application areas ||| identifiera situationer där bioinformatiska metoder kan tillämpas inom olika områden
furthermore , the student should have successfully completed a course in programming and in discrete mathematics . ||| det krävs också en programmeringskurs och en kurs i diskret matematik .
today the object-oriented view has a very strong position in the area of program development . ||| det objektorienterade synsättet har idag en mycket stark ställning när det gäller programutveckling .
programs that are constructed according to this view , object-oriented programs , consist of a number of co-operating parts called objects . ||| program som är uppbyggda enligt detta synsätt , s.k. objektorienterade program , består av ett antal samverkande delar som kallas objekt .
the objects encapsulate data and offer methods to read and update the data . ||| objekten kapslar in data och erbjuder metoder för att bearbeta och / eller avläsa datan .
the objects are described by so called classes . ||| objekten beskrivs av s.k. klasser .
the aim of the course is to teach the principles of the object-oriented view and how object-oriented programs are constructed . ||| kursens syfte är att lära ut grundläggande principerna och tekniker för hur man konstruerar imperativa objektorienterade program .
the java programming language is used . ||| i kursen används programspråket java .
the following items are discussed : ||| följande moment behandlas :
- basic object-oriented concepts such as classes , objects , methods and instance vairables , ||| - grundläggande objektorienterade begrepp såsom klass , objekt , metod och instansvariabel .
- inheritance , polymorphism and dynamic binding , ||| - gränssnitt , polymorfism och dynamisk bindning .
written exam . ||| skriftlig salstentamen .
basic eligibility . ||| allmän behörighet .
the course discusses basic concepts of imperative and object-oriented languages , as realized in java . ||| kursen behandlar grundläggande begrepp i imperativ och objektorienterad programmering , så som de realiseras i java .
in addition to the basic language constructs and simple guidelines for programming , the course discusses and uses a number of classes from the java standard libraries . ||| förutom de grundläggande språkkonstruktionerna och enkla riktlinjer för programutformning diskuteras och används ett antal klasser i javas standardbibliotek .
the aim is to demonstrate how this library makes it possible to write programs which , for example , ||| syftet är därvid att visa på hur detta bibliotek ger möjlighet att skriva program , som bland annat
offer graphical user interfaces , ||| erbjuder grafiska användargränssnitt .
manipulate sound and images , as examples of signal and image processing . ||| manipulerar ljud och bilder , som exempel på signal- och bildbehandling .
fetch data over the web for further processing . ||| hämtar data från webben för vidare bearbetning .
handle large sets of data , through use of library classes with efficient data structures . ||| kan hantera stora datamängder genom att använda färdiga klasser med effektiva datastrukturer .
application development targets both desktop platforms and smartphones . ||| tillämpningar utvecklas för såväl desktop-miljö som mobiltelefoner .
written exam and compulsory programming assignments . ||| skriftlig tentamen samt obligatoriska laborationer .
explain basic concepts in imperative and object-oriented programming , in particular as they are realized in the chosen programming language . ||| förklara grundläggande begrepp inom imperativ och objektorienterad programmering , speciellt som de realiseras i det programspråk som används i kursen .
describe some standard algorithms , e.g. for searching and sorting , and know how to find these in the standard libraries . ||| beskriva några standardalgoritmer , för till exempel sortering och sökning , samt veta var dessa återfinns i språkets standardbibliotek .
define classes to model simple phenomena in object-oriented style , with encapsulated data which is read and updated using public methods . ||| definiera klasser som modellerar enkla fenomen i objektorienterad anda , med inkapslade data som avläses och uppdateras via publika metoder .
define simple subroutine libraries , using the data types and control structures of the chosen language . ||| definiera enkla subrutinbibliotek med utnyttjande av det använda programspråkets datatyper och styrstrukturer .
understand a given program , consisting of several classes , with the aim to debug , extend or improve the behaviour of the program , according to given specifications . ||| sätta sig in i ett givet program , bestående av flera klasser , i syfte att felsöka , utvidga eller förbättra programmets beteende enligt givna anvisningar .
write simple event-driven programs with a graphical user interface ( gui ) . ||| skriva enkla händelsestyrda program med grafiskt gränssnitt .
use and search in standard libraries for e.g. gui's and data structures . ||| använda och söka i programbibliotek för några standardändamål , som exempelvis grafiska gränssnitt och datastrukturer .
identify his or her need for further knowledge within programming and computer science . ||| identifiera sitt behov av ytterligare kunskaper inom området programmering och datavetenskap .
this course is an introduction to imperative programming and software development . ||| den här kursen är en introduktion till imperativ programmering och programvaruutveckling .
the course uses the java programming language . ||| i kursen används programspråket java .
the following items are discussed : ||| följande moment behandlas :
variables , expressions and statements , priorities , methods , parameter passing , recursion ||| variabler , uttryck och satser , prioritet , metoder , parameteröverföring , rekursion
arrays and reading of input from the user ||| fält och inläsning från en användare
simple types and reference types , type conversions ||| enkla typer och referenstyper , typomvandling
basic object-oriented concepts such as classes , objects , methods and instance variables ||| grundläggande objektorienterade begrepp såsom klasser , objekt , metoder och instansvariabler
different equality tests , canonical form for classes ||| olika tester på likhet , kanonisk form för klasser
basic inheritance and interfaces ||| grundläggande arv och gränssnitt ( interfaces )
standard classes for graphical user interfaces ||| standardklasser för grafiska användargränssnitt
how to construct simple graphic components ||| enkel konstruktion av egna grafiska komponenter
events and listeners ||| händelser och lyssnare
error handling using so called exceptions ||| felhantering med hjälp av s.k. exceptions
search for documentation of standard classes on the internet ||| sökning på internet efter dokumentation för standardklasser
some of the classes in javas api ||| några av klasserna i javas api
- be able to complete simple programming tasks . ||| - kunna slutföra enkla programmeringsuppgifter .
this means the students should know how to : ||| detta betyder att studenten ska veta hur man :
approach a programming task ||| läser programmeringuppgifter
break the top-level task into smaller more manageable tasks ||| bryter ner programmeringsuppgiften i mindre lättare deluppgifter
complete the top-level task by completing all the smaller tasks ||| konstruerar en lösning till den ursprungliga uppgiften med att lösa mindre deluppgifter
write simple tests that help find a solution and validate the final solution ||| skriver testprogram som hjälper med programmeringen och som kontrollerar kvaliteten av den färdiga lösningen
- explain and use basic concepts of imperative and object-oriented programming . ||| - förklara och använda sig av grundläggande begrepp inom imperativ och objektorienterad programmering .
this means the student should be able to explain and use : ||| detta betyder att studenten ska kunna förklara och använda sig av :
the difference between primitive and reference types , and illustrate this with sketches of memory cells with values and references ||| skillnaden mellan primitiva typer och referenstyper , och illustrera detta med principskisser över minnesceller med värden och referenser
how uni - and multidimensional arrays are declared , created and used ||| hur en- och flerdimensionella fält deklareras , skapas och används
the difference between static methods / variables and instance methods / variables ||| skillnaden mellan statiska metoder / variabler och instansmetoder / variabler
the difference between a method that returns a value and a method that has result type void ||| skillnaden mellan en metod som returnerar ett värde och en metod med resultattypen void
how parameter passing happens at method calls ||| hur parameteröverföring sker vid anrop av metoder
the difference between a class and an object ||| skillnaden mellan en klass och ett objekt
the concept of subclass and describe how such are declared ||| begreppet subklass och beskriva hur en sådan deklareras
what an interface is and what it means that a class implements an interface ||| vad ett interface är och vad som menas med att en klass implementerar ett interface
the concepts data encapsulation and information hiding ||| begreppen datainkapsling och informationsdöljande
- construct methods that make use of the programming language's datatypes and control structures . ||| - konstruera metoder med utnyttjande av programspråkets datatyper och styrstrukturer .
this means the students should know how to : ||| detta betyder att studenten ska kunna :
define static and instance meothds , using appropriate parameter and result types ||| definiera statiska metoder och instansmetoder , med lämpliga val av parametrar och resultattyp
use control structures such as for - , while - and if-statements in a structured manner ||| utnyttja styrstrukturer som for- , while- , och if - satser på ett strukturerat sätt
handle both uni - and multidimensional arrays ||| hantera såväl en- som flerdimensionella fält
use standard classes for construction of lists ||| använda standardklasser för att konstruera listor
read input that has been supplied by the user ||| läsa indata som matas in av en användare
present output for the user and make simple modifications to the output ||| presentera utdata för användaren och utföra enkel redigering av utdata
use exceptions to signal and deal with potential errors ||| utnyttja s.k. exceptions för att signalera och ta hand om eventuella fel
solve simple problems using recursion ||| lösa enkla problem med rekursion
- independently construct imperative and simple object-oriented programs that use both library classes and simple programmer-defined classes . ||| - självständigt konstruera imperativa och enkla objektorienterade program som använder färdiga standardklasser och enkla egenhändigt konstruerade klasser .
this means the students should know how to : ||| detta betyder att studenten ska kunna :
define classes that describe concrete concepts such as dice , bank accounts , etc. . ||| definiera enkla klasser som beskriver konkreta begrepp såsom tärningar , bankkonton , etc.
write programs that use standard classes such as integer , double , scanner , string , stringbuffer , arrays , color , system , arraylist etc. . ||| skriva program där man använder standardklasser som integer , double , scanner , string , stringbuilder , arrays , color , system , arraylist m.fl.
document the program using javadoc , coding standards , naming and commenting ||| dokumentera program med javadoc , kodningsstandard , namngivning och kommentering
test programs ||| testa sina program
* describe the principles of object-oriented programming , apply them in a programming context , and explain how they are realized by a particular object-oriented language . ||| * beskriva principerna för objektorienterad programmering , använda dem i programmeringsfasen och förklara hur de kan realiseras i ett specifikt objektorienterat programspråk .
software development is central to a software engineer . ||| programvaruutveckling är centralt för en civilingenjör inom informationsteknik .
* more in-depth treatment of the terms implementation inheritance , specification inheritance , abstract classes , dynamic binding , encapsulation and information hiding . ||| * fördjupning av begreppen implementationsarv , specifikationsarv , abstrakta klasser , polymorfism , dynamisk bindning , inkapsling och information hiding .
* introduction to uml . ||| * introduktion till uml .
* fundamental design principles , such as dependency inversion principle , open-closed principle , liskov substitution principle , single responsibility principle , separation of concern principle , law of demeter and interface segregation principle . ||| * fundamentala designprinciper , såsom dependency inversion principle , open-closed principle , liskov substitution principle , single responsibility principle , separation of concern principle , law of demeter och interface segregation principle .
* generic program components . ||| * generiska programenheter .
* canonical form for classes - equals ( ) , hashcode ( ) , clone ( ) , tostring ( ) and serialization . ||| * kanonisk form för klasser - equals ( ) , hashcode ( ) , clone ( ) , tostring ( ) och serialisering .
* contract based design - preconditions , postconditions , class invariants and assertions . ||| * kontraktbaserad design - förvillkor , eftervillkor , klassinvarianter och assertions .
* mutable and immutable objects . ||| * muterbara och icke-muterbara objekt .
representation exposure . ||| representationsexponering .
* inner classes and anonymous classes . ||| * inre klasser och anonyma klasser .
* exception handling . ||| * undantagshantering .
* common design patterns , such as singleton , factory method , template method , strategy , decorator , adapter , iterator , observer , state , façade and mvc . ||| * vanliga designmönster , såsom singleton , factory method , template method , strategy , decorator , adapter , iterator , observer , state , façade och mvc .
* refactoring . ||| * refactoring .
* java's collection framework and its constitution . ||| * java ' s collection-ramverk och dess uppbyggnad .
* java's i/o framework and its constitution . ||| * java ' s i / o-ramverk och dess uppbyggnad .
* threads and thread safety - race conditions , deadlocks , critical regions and sychronization . ||| * trådar och trådsäkerhet - race conditions , deadlock , kritiska regioner och synkronisering .
will be conducted in the form of a written examination , and laborations . ||| sker i form av godkänd skriftlig tentamen samt godkända laborationer .
* describe the principles of object-oriented programming , apply them in a programming context , and explain how they are realized by a particular object-oriented language . ||| * beskriva principerna för objektorienterad programmering , använda dem i programmeringsfasen och förklara hur de kan realiseras i ett specifikt objektorienterat programspråk .
* use uml class diagrams to plan and document design in an accessible way . ||| * använda uml ' s klassdiagram för att på ett överskådligt sätt planera och dokumentera eget programmeringsarbete .
* evaluate different features of programming in the large , assess their benefits and risks with respect to different design goals , and make proper choices . ||| * resonera om och utvärdera olika egenskaper för program , bedöma dess fördelar och nackdelar med avseende på olika utvecklingsmål - t ex underhåll , återanvändning och robusthet - och därpå göra lämpliga val .
* implement generic program components . ||| * implementera generiska programenheter .
* use and describe how an application framework can be constituted . ||| * använda och beskriva hur ett applikationsramverk kan vara uppbyggt .
* describe different criteria and principles for good program design . ||| * beskriva olika kriterier och principer för god programdesign .
* account for the meaning of synchronization and thread safety , and implement thread-safe objects . ||| * redogöra för innebörden av synkronisering och trådsäkerhet samt kunna implementera trådsäkra objekt .
this is an introductory course in programming , using the functional language haskell as the medium of instruction . ||| detta är en introduktionskurs i programmering som använder det funktionella programmeringsspråket haskell .
the primary goal is to enable students to write realistic ( small ) programs for real world applications , while introducing some of the fundamental concepts of computer science . ||| det primära syftet är att lära ut grundläggande datavetenskapliga begrepp , samtidigt som studenterna lär sig skriva realistiska ( små ) program .
secondary goals are to provide orientation regarding the courses to come ( particularly data structures , algorithms , digital circuits , formal methods and programming language courses ) , and to offer insight into careers in computing via invited speakers . ||| sekundära mål är att ge en grund för kommande kurser ( specifikt datastrukturer , algoritmer , digitala kretsar , formella metoder och kurser i programspråk ) , samt att ge en inblick i karriärsmöjligheter inom data genom inbjudna talare .
values , types , and functions . ||| värden , typer och funktioner .
compound data structures ( lists , tuples , user-defined types ) . ||| sammansatta datastrukturer ( listor , tupler , användardefinierade typer ) .
top-down program design . ||| top-down programdesign .
recursion and recursive types . ||| rekursion och rekursiva typer .
concept of time complexity , good and bad algorithms . ||| tidskomplexitet , bra och dåliga algoritmer .
input-output . ||| input-output .
modules , abstraction , interfaces and specifications . ||| moduler , abstraktion , interface och specifikationer .
verification by testing and proof . ||| verifiering mha. tesning och bevis .
higher-order functions and bulk data operations . ||| högre ordningens funktioner och data-centrisk programmering .
written exam and compulsory laboratory exercises . ||| skriftlig tentamen och obligatoriska laborationsuppgifter .
write small functional programs for various applications . ||| skriva små funktionella program för olika tillämpningar .
use a basic repertoire of programming techniques in a typed functional language , such as modelling with datatypes and use of recursion and higher order functions . ||| använda en grundläggande repertoar av programmeringstekniker i ett typat funktionellt språk , såsom modellering med datatyper , rekursion och användning av högre ordningens funktioner .
apply software testing techniques using appropriate tools . ||| genomföra testning av små program med hjälp av lämpliga verktyg .
reoccurring themes are a ) the identification of errors , b ) their analysis , and c ) their removal . ||| återkommande ämnen är a ) identifikation av programvarufel , b ) analys av dessa , och c ) att rätta dem .
contrasting formal and informal methods , testing ( terminology , coverage , unit tests , a unit test framework ) , debugging ( control , workflow , localisation , tools ) , formal specifications ( pre - / postconditions , invariants ) , formal verification ( logics , tool support ) . ||| kontrastera formella och informella metoder för testning ( terminologi , täckningsgrad , enhetstester , ramverk för enhetstester ) , felsökning ( kontroll , arbetsflöde , lokalisering , verktyg ) , formella specifikationer ( pre- / post conditions , invarianter ) , formell verifikation ( logik , verktyg ) .
throughout , the course is concerned with imperative programs in general , and object-oriented programs in particular . ||| kursen är genomgående fokuserad på imperativa program generellt , särskilt objektorienterade program .
the course is examined by a final individual written hall exam , 5.0 hec , and laboration ( practical hand-in assignments ) , 2.5 hec . ||| kursen examineras genom en individuell skriftlig salstenta ( 5p ) och inlämningsuppgifter ( 2.5p ) .
the laborations are usually done in groups of 2-3 students . ||| inlämninguppgifterna görs normalt i grupper om 2-3 studenter .
in case a practical hand-in assignment is not passed in the first attempt , the student is granted a second try . ||| om en inlämningsuppgift inte godkänns på första försöket kan studentet få ett andra försök .
the exam and the labs can be passed independently . ||| tentan och inlämningsuppgifterna kan godkännas oberoende av varandra .
after completion of the course the student is expected to be able to ||| efter genomgången kurs ska studenten kunna :
- describe the possibilities and limitations of both informal and formal techniques for the discovery , analysis , and resolving of program errors ||| beskriva omfattning och begränsningar av både informella och formella tekniker för att upptäcka , analysera och rätta programfel .
- characterise inputs on which a program fails ||| karakterisera indata för vilka ett program går fel .
- formally reason about simple programs for guaranteeing correctness ||| resonera formellt om enkla program för att garantera korrekthet .
to be eligible for the course students should have successfully completed : ||| för denna kurs krävs att studenterna har genomgått
one year of an education aiming at a bachelor degree within computer science , computer engineering , software engineering , or equivalent ||| minst ett års utbildning på något program med inriktning datavetenskap , software engineering , datateknik eller liknande .
a course in discrete mathematics ( such as tmv200 ) ||| en kurs i diskret matematik ( t.ex. tmv200 )
a course in object oriented programming ( such as tda545 ) ||| en kurs i objektorienterad programering ( t.ex. tda545 )
why are computing systems becoming increasingly distributed ? ||| varför blir datorsystem allt mer distribuerade ?
how can we build reliable and fault-tolerant distributed systems ? ||| hur kan vi bygga pålitliga och feltoleranta distribuerade system ?
why does the internet scale to billions of users ? ||| hur har internet kunnat skala till flera miljarder användare ?
how are modern distributed systems such as the cloud , the smart grid , or connected cars built ? ||| hur är moderna distribuerade system som t.ex. molntjänster , smarta elnät och kommunicerande bilar uppbyggda ?
these are a few questions that our course on distributed systems addresses . ||| detta är några frågor som kursen behandlar .
the goal of the courses is to understand the design of distributed systems and discuss the underlying principles and mechanisms that drive today's distributed systems . ||| målet med kursen är att få en förståelse för design av distribuerade system och de underliggande principer och mekanismer som dagens distribuerade system använder sig av .
our lectures provide you with the required fundamentals , and our labs give you a hands-on experience in developing distributed systems and exploring their real-world challenges . ||| föreläsningarna ger nödvändig fundamental kunskap och laborationerna ger praktisk erfarenhet av utveckling av distribuerade system och erfarenhet med att arbeta med verklighetsanknutna problem .
we begin the course with an introduction to the basic concepts of distributed systems and the challenges they pose . ||| kursen börjar med en introduktion av grundläggande koncept för distribuerade system och de utmaningar dessa står inför .
naming ||| namngivning
mutual exclusion and election ||| ömsesidig uteslutning ( mutual exclusion ) och val ( election )
clocks and time ||| klockor och tid
consistency and replication ||| konsistens och replikering
fault tolerance in distributed systems ||| feltolerans i distribuerade system
selected applications in distributed systems ||| utvalda representativa distribuerade applikationer
1. knowledge and understanding ||| 1. kunskap och förståelse :
describe applications of distributed systems and the mechanisms these use to provide their services . ||| kunna beskriva tillämpningar inom distribuerade system och de mekanismer dessa använder för att kunna utföra sina tjänster .
discuss and analyze the challenges and requirements that the different approaches have . ||| ha god kunskap i att kunna diskutera och analysera de problem och krav som olika designmetoder och lösningar står inför .
2. skills and abilities ||| 2. praktisk färdighet :
develop and evaluate small-scale distributed systems using fundamental mechanisms introduced in the lectures . ||| kunna utveckla , programmera och utvärdera småskaliga distribuerade system med hjälp av de fundamentala mekanismer som introducerats i kursen .
3. judgment and approach ||| 3. beskrivning- och analysförmåga :
describe and analyze existing and new methods for distributed systems design . ||| ha god förmåga att beskriva och analysera både existerande och nya metoder för design av distribuerade system , speciellt med avseende på systemens förmåga att skala och vara feltoleranta .
in addition , a course in operating systems or concurrent programming ( or equivalent ) is required . ||| dessutom krävs en kurs i operativsystem eller motsvarande .
this includes the ability ||| detta inkluderar färdighet att identifiera säkerhetsproblem på applikations- och språknivå , samt
you should be able to demonstrate the critical knowledge of : ||| studenten skall kunna demonstrera kunskap om :
you should gain experience in technical writing . ||| dessutom skall studenten öka sin förmåga att skriva tekniskt material .
the course consists of lectures , group meetings and project presentations . ||| kursen består av föreläsningar , gruppmöten och projektpresentationer .
the algorithms course revolves around three central questions that appears naturally when one wants to use a computer to compute a problem : ||| kursen kretsar kring tre naturliga frågeställningar man ställs inför då man vill använda en dator för att beräkna lösningen på ett problem :
is the problem computationally solvable at all ? ||| är problemet beräkningsmässigt lösningsbart ?
how can we do it ? ||| hur kan lösningen utformas ?
how fast can the solution be ? ||| hur snabbt kan problemet lösas ?
the course topics are as follows : ||| kursen ger kunskaper om :
introduction . ||| introduktion .
what is an efficient algorithm ? ||| vad är en effektiv algoritm ?
tools for analysis of algorithms . ||| verktyg för analys av algoritmer .
o-notation . ||| o-notation .
analyzing loops and recursive calls . ||| analysera loopar och rekursiva anrop .
solving recurrences . ||| lösa rekursionekvationer .
data structures and algorithms . ||| datastrukturer och algoritmer .
review of basic data structures . ||| granskning av grundläggande datastrukturer .
combining data structures . ||| kombinera datastrukturer .
merge-and-find . ||| merge-and-find .
greedy algorithms . ||| giriga algoritmer .
divide-and-conquer . ||| divide-and-conquer .
dynamic programming . ||| dynamisk programmering .
backtracking and implicit search trees . ||| backtracking och implicita sökträd .
branch-and-bound . ||| branch-and-bound .
short introduction to local search and approximation algorithms . ||| kort introduktion till lokala sök-och approximationsalgoritmer .
basic complexity theory . ||| grundläggande komplexitetsteori .
complexity classes p , np , and npc , reductions . ||| komplexitetsklasserna p , np och npc , reduktioner .
examples of np-complete problems . ||| exempel på np-fullständiga problem .
coping with hard problems . ||| att hantera svåra problem .
short introduction to other design techniques : local search , approximation algorithms , randomized algorithms , pre-processing , network flow . ||| kort introduktion till andra designtekniker : lokal sökning , approximationsalgoritmer , randomiserade algoritmer , förbehandling , nätverksflöde .
knowledge and understanding ||| kunskap och förståelse
describe your algorithms and their qualities : explain algorithms in writing , so that others can understand how they work , why they are correct and fast , and where they are useful . ||| beskriva dina algoritmer och deras egenskaper : förklara algoritmer skriftligen , så att andra kan förstå hur de fungerar , varför de är korrekta och snabba , och var de är användbara .
recognize that non-trivial computational problems , which need to be solved by algorithms , appear in various real-world computer applications and to formalize them . ||| inse att icke-triviala beräkningsproblem , som måste lösas med hjälp av algoritmer , dyker upp i olika verkliga datortillämpningar och att formalisera dem .
intractability : recognize intractable problems and other classes of problems like p , np , npc . ||| intractability : känna igen " intractable problems " och andra klasser av problem som p , np , npc .
prove the correctness of algorithms . ||| bevisa korrektheten av algoritmer .
skills and abilities ||| färdighet och förmåga
design : apply the main design techniques for efficient algorithms ( for instance greedy , dynamic programming , divide-and-conquer , backtracking , heuristics ) to problems which are similar to the textbook examples but new . ||| design : tillämpa de viktigaste designteknikerna för effektiva algoritmer ( t.ex. giriga , dynamisk programmering , söndra och härska , backtracking , heuristiska ) på problem som liknar läroboksexemplen men är nya .
perform the whole development cycle of algorithms : problem analysis , choosing , modifying and combining suitable techniques and data structures , analysis of correctness and complexity , filling in implementation details , looking for possible improvements , etc. . ||| utföra hela utvecklingscykeln av algoritmer : problemanalys , välja , modifiera och kombinera lämpliga tekniker och datastrukturer , analys av korrekthet och komplexitet , fylla i implementationsdetaljer , hitta möjliga förbättringar , etc.
perform simple reductions between problems , explain np completeness , recognize various computationally hard problems which tend to appear over and over again in different applications , cope , at least in principle , with computationally hard problems , using heuristics , refinements of exhaustive search , approximative solutions , etc. . ||| utföra enkla reduktioner mellan problem , förklara np fullständighet , känna igen olika beräkningssvåra problem som tenderar att dyka upp om och om igen i olika applikationer , klara , åtminstonei princip , beräkningsmässigt svåra problem med hjälp av heuristik förfiningar av uttömmande sökning , approximativa lösningar , etc.
implement algorithms properly and evaluate them in theory and experiment . ||| implementera algoritmer ordentligt och utvärdera dem i teori och experiment
judgement and approach ||| värderingsförmåga och förhållningssätt
critically assess algorithmic ideas and demonstrate the ability to resist the temptation to create obvious and seemingly plausible algorithms ( which often turn out to be incorrect ) . ||| kritiskt bedöma algoritmiska idéer och visa förmåga att motstå frestelsen att skapa uppenbara och till synes rimliga algoritmer ( som ofta visar sig vara felaktiga ) .
analyse : explain why the time efficiency of algorithms is crucial , express the time complexity in a rigorous and scientifically sound manner , analyze the time complexity of algorithms ( sum up operations in nested loops , solve standard recurrences , etc. ) i.e. perform an objective evaluation of the performance and be able to compare it to other algorithms performance . ||| analysera : förklara varför tidseffektivitet hos algoritmer är avgörande , uttrycka tidskomplexitet på ett rigoröst och vetenskapligt korrekt sätt , analysera tids komplexiteten hos algoritmer ( summera operationer i nästlade loopar , lösa vanliga rekursionsekvationer , etc. ) det vill säga göra en objektiv bedömning av prestanda för att kunna jämföra med andra algoritmer .
however , be aware that this is not a course in programming ! ||| var dock medveten om att detta inte är en kurs i programmering !
the main focus is on the design of algorithms from a given problem specification and the analysis of efficiency of these algorithms . ||| fokus ligger på design av algoritmer från en given problemformulering och analys av effektiviteten i dessa algoritmer .
this is , so to speak , the analytical work that has to be done before writing any line of code , if one wants to solve a new problem with the help of computers . ||| det är , så att säga , det analytiska arbete som måste göras innan du skriver någon kod , om man vill lösa ett nytt problem med hjälp av datorer .
artificial intelligence ( ai ) studies how computers can accomplish tasks that were traditionally thought to require human intelligence . ||| artificiell intelligens ( ai ) studerar hur datorer kan utföra uppgifter som traditionellt har ansetts kräva mänsklig intelligens .
the aim of this course is to give a deepened understanding of the possibilities and the limitations of ai methods . ||| syftet med kursen är att ge en fördjupad förståelse för möjligheter och begränsningar med ai-metoder .
the following topics are covered by the course : ||| följande ämnen ingår i kursen :
overview of ai ||| översikt över ai
introduction to ai ||| introduktion till ai
history , philosophical foundations and ethical issues of ai ||| historiska , filosofiska och etiska frågor inom ai
application areas where ai techniques are used , such as language technology , bioinformatics , robotics , etc. . ||| applikationsområden där ai-tekniker används , såsom språkteknologi , bioinformatik , robotik , etc.
ai technologies and methodologies ||| ai-tekniker och - metodologier
uninformed and informed search ||| oinformerad och informerad sökning
logic and deduction ||| logik och deduktion
probability theory ||| probabilistisk slutledning
automated planning ||| automatisk planering
the course is examined by an individual written examination ( 2.5 hec ) and a programming project ( 5.0 hec ) that is performed in groups . ||| kursen examineras genom en individuell skriftlig inlämningsuppgift ( 2,5 hp ) och ett ai-projekt ( 5,0 hp ) som genomförs i grupper .
the ai project consists of three parts : a programming project that covers some of the ai techniques that are presented in the lectures , a written report from the programming project , and a written essay that covers a historical , philosophical or ethical issue within ai and is presented at the end of the course . ||| ai-projektet består av tre delar : ett programmeringsprojekt som täcker några av de ai-tekniker som presenteras i föreläsningarna , en skriftlig rapport från programmeringsprojektet och en skriftlig essä som omfattar en historisk , filosofisk eller etisk frågeställning inom ai och som presenteras på slutet av kursen .
the final program , the written reports , participation during supervision , and the final presentation are all important for the assessment of the project . ||| det slutliga programmet , de skriftliga rapporterna , deltagande under handledning , och den slutliga presentationen är viktiga för bedömningen av projektet .
to be accepted on the course the student must furthermore participate actively during supervising , and read and comment on the reports of the other groups in the course . ||| för att bli godkänd på kursen måste studenten också delta aktivt under handledning och läsa och kommentera rapporterna till kursens andra grupper .
after completing the course the student is expected to : ||| efter avklarad kurs förväntas studenten ha förmåga att :
knowledge and understanding ||| kunskap och förståelse
exemplify and describe some chosen application areas that can benefit from using ai technologies and methodologies . ||| exemplifiera och beskriva några utvalda applikationsområden som kan tjäna på att använda ai-tekniker och - metoder .
state and describe the most important technologies and methodologies used in different subfields of ai , such as search , automatic reasoning and planning , natural language processing ; including the fundamental ai algorithms in these areas and how they are used . ||| redogöra för och beskriva de viktigaste teknikerna och metoderna som används inom olika ai-delområden , såsom maskininlärning , språkteknologi , automatisk slutledning och planering ; inklusive medvetenhet om grundläggande ai-algoritmer i dessa områden och hur de används .
define , explain and discuss the fundamental ai algorithms in at least one of the subareas of ai , gained by a supervised group project . ||| definiera , förklara och diskutera åtminstone ett ai-delområde , förvärvad genom ett handlett projektarbete i grupp .
design , program , document , and evaluate an ai-based software system so that it has acceptable performance . ||| designa , implementera , dokumentera och utvärdera en ai-baserad mjukvarutillämpning så att den har acceptabel prestanda .
skills and abilities ||| färdighet och förmåga
interpret and analyze research literature , and apply it for solving ai-related problems . ||| tolka och analysera forskningslitteratur , och tillämpa den för att lösa ai-relaterade problem .
apply the knowledge gained from this course to new problems in the ai domain . ||| tillämpa de kunskaper som förvärvats i denna kurs till nya problem inom ai-domänen .
write scientific reports . ||| skriva vetenskapliga rapporter .
judgement and approach ||| värderingsförmåga och förhållningssätt
judge what can be achieved by ai technology and what is not possible . ||| bedöma vad som kan uppnås med ai-tekniker och vad som inte är möjligt .
judge when it is feasible to use ai technology , and when it is not useful . ||| bedöma när det är möjligt att använda ai-tekniker , och när det inte är meningsfullt .
summarize and relate different ethical arguments in favor of or against ai . ||| sammanfatta och relatera olika etiska argument för eller mot ai .
the course is project-oriented and divided into two parts . ||| kursen är projektinriktad och uppdelad i två delar .
the smaller part is theoretical and consists of lectures and exercises that cover the most important ai topics . ||| den minsta delen är teoretisk och består av föreläsningar och uppgifter som täcker de viktigaste ai-ämnena .
the larger part of the course consists of project work in groups to complete a programming project , to write one essay , and to read and comment on the work of the other groups in the course . ||| den större delen av kursen består av arbete i projektgrupper för att slutföra ett programmeringsprojekt , att skriva en essä och läsa och kommentera arbetet till dom andra grupperna på kursen .
the students form project groups , and the groups are assigned supervisors , programming projects and essay subjects . ||| studenterna bildar projektgrupper , och grupperna tilldelas handledare , programmeringsprojekt och essä-ämnen .
tobe eligible for the course students should have successfully completed 1 year ( 60 hecr ) of studies within the subject computer science , or equivalent . ||| för tillträde till kursen ska studenten ha avklarat 1 års ( 60 hp ) studier inom ämnet datavetenskap eller motsvarande .
furthermore , students should have successfully completed the following courses : ||| dessutom ska studenten ha fått godkänt i följande kurser :
advanced programming ( dit950 , tda550 , dit260 , tda342 , dat121 , or equivalent ) , ||| advanced programming ( dit950 , tda550 , dit260 , tda342 , dat121 , eller liknande ) ,
data structures ( dit960 , dat036 , tda416 , or equivalent ) , ||| data structures ( dit960 , dat036 , tda416 , eller liknande ) ,
algorithms ( dit600 , tin092 , or equivalent ) . ||| algorithms ( dit600 , tin092 , eller liknande ) .
this is an advanced course : we assume academic maturity and a willingness to explore independently . ||| detta är en avancerad kurs : vi förutsätter att studenten har akademisk mognad och en vilja att utforska självständigt .
automata theory ( e.g. , dit321 , tmv027 ) , ||| automatteori ( t.ex. dit321 , tmv027 ) ,
logic in computer science ( e.g. , dat060 ) , ||| logik i datavetenskap ( t.ex. dat060 ) ,
machine learning ( e.g. , dit380 , tda231 ) , ||| maskininlärning ( t.ex. dit380 , tda231 ) ,
programming language technology , ( e.g. , dat151 , dit230 ) ||| programspråksteknik ( t.ex. , dat151 , dit230 ) .
courses of the program during the first study period . ||| programmets kurser under läsperiod 1
this course presents both the theory of finite automata , regular expressions and context-free grammars . ||| kursen presenterar teorin för ändliga automater , reguljära uttryck och kontext-fria språk .
it also includes a short introduction to turing machines . ||| kursen ger också en kort introduktion till turing-maskiner .
their mathematical theory is quite elegant and simple . ||| deras teori är elegant och enkel .
context-free grammars have important applications in parsing and analysis of both programming and natural language . ||| kontext-fria grammatiker har viktiga tillämpningar inom parsning och analys av både konstgjorda språk ( t.ex. programmeringsspråk ) och naturliga språk .
the first 8 chapters of " introduction to automata theory , languages , and computation " by hopcroft , motwani and ullman . ||| de första 8 kapitlen i " introduction to automata theory , languages and computation " , av hopcroft , motwani och ullman
formal proofs . ||| formella bevis .
finite automata , regular expressions , and algorithms connecting the two notions . ||| ändliga automater , reguljära uttryck och algoritmer som rör dessa .
context-free grammars . ||| kontext-fria språk .
pumping lemma and properties of regular and context-free languages . ||| pumplemmat och egenskaper för reguljära och kontext-fria språk .
short introduction to push-down automata and turing machines . ||| kort introduktion till push-down automater och turing-maskiner .
the course is examined by individual weekly assignments during the course and an individual written exam given in an examination hall at the end of the course . ||| kursen examineras av individuella veckovis hemuppgifter och en individuell skriftlig tentamen i tentasal på slutet av kursen .
the final degree of the course is based on the performance of both the weekly assignments and the exam . ||| det slutliga betyget baseras på både hemuppgifterna och tentan .
knowledge and understanding ||| kunskap och förståelse
explain and manipulate the different concepts in automata theory and formal languages such as formal proofs , ( non- ) deterministic automata , regular expressions , regular languages , context-free grammars , context-free languages , turing machines ; ||| förklara och manipulera olika begrepp inom automatateori och formella språk såsom formella bevis , automater , reguljära uttryck , reguljära språk , kontext-fria grammatiker , kontext-fria språk samt turing-maskiner ;
explain the power and the limitations of regular languages and context-free languages . ||| förklara styrkan och begränsningar hos reguljära språk och kontext-fria språk .
skills and abilities ||| färdighet och förmåga
prove properties of languages , grammars and automata with rigorously formal mathematical methods ; ||| bevisa egenskaper hos språk , grammatiker och automater med rigorösa matematiska metoder ;
design automata , regular expressions and context-free grammars accepting or generating a certain language ; ||| utforma automater , reguljära uttryck och kontext-fria grammatiker som accepterar eller genererar ett visst språk ;
describe the language accepted by an automaton or generated by a regular expression or a context-free grammar ; ||| beskriva det språket som accepteras av en viss automat eller som genereras av ett viss reguljär uttryck eller grammatik ;
transform between equivalent deterministic and non-deterministic finite automata , and regular expressions ; ||| översätta mellan deterministiska och ickedeterministiska ändliga automater och reguljära uttryck ;
simplify automata and context-free grammars ; ||| förenkla automater och grammatiker ;
determine if a certain word belongs to a regular or context-free language ; ||| avgöra om ett ord hör till ett visst reguljärt eller kontext-fritt språk ;
define turing machines performing simple tasks . ||| utforma turing-maskiner för enkla uppgifter .
judgement and approach ||| värderingsförmåga och förhållningssätt
differentiate and manipulate formal descriptions of languages , automata and grammars with focus on regular and context-free languages , finite automata and regular expressions . ||| manipulera formella beskrivningar av språk , automater och grammatiker med fokus på reguljära och kontext-fria språk , ändliga automater och reguljära uttryck .
knowledge in discrete mathematics and in programming . ||| kunskaper i diskret matematik och programmering .
